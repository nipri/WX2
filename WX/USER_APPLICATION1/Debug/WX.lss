
WX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d0  00800200  00004196  0000422a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004196  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001c3  008003d0  008003d0  000043fa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000043fa  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  00004456  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f5e  00000000  00000000  00004586  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ad  00000000  00000000  000054e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002787  00000000  00000000  00005a91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004f4  00000000  00000000  00008218  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00011cf8  00000000  00000000  0000870c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a8a  00000000  00000000  0001a404  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  0001ae8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00004cfd  00000000  00000000  0001af7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__ctors_end>
       4:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
       8:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
       c:	0c 94 14 13 	jmp	0x2628	; 0x2628 <__vector_3>
      10:	0c 94 46 13 	jmp	0x268c	; 0x268c <__vector_4>
      14:	0c 94 58 13 	jmp	0x26b0	; 0x26b0 <__vector_5>
      18:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <__vector_6>
      1c:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      20:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      24:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      28:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      2c:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      30:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      34:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      38:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      3c:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      40:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      44:	0c 94 c0 13 	jmp	0x2780	; 0x2780 <__vector_17>
      48:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      4c:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      50:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      54:	0c 94 ae 13 	jmp	0x275c	; 0x275c <__vector_21>
      58:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      5c:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      60:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      64:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__vector_25>
      68:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      6c:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      70:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      74:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      78:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      7c:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      80:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      84:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      88:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      8c:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      90:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      94:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      98:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      9c:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      a0:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      a4:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      a8:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      ac:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      b0:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      b4:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      b8:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      bc:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      c0:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      c4:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      c8:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      cc:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      d0:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      d4:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      d8:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      dc:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      e0:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
      e4:	7f 03       	fmul	r23, r23
      e6:	cc 03       	fmulsu	r20, r20
      e8:	86 03       	fmuls	r16, r22
      ea:	cc 03       	fmulsu	r20, r20
      ec:	8d 03       	fmulsu	r16, r21
      ee:	cc 03       	fmulsu	r20, r20
      f0:	94 03       	fmuls	r17, r20
      f2:	cc 03       	fmulsu	r20, r20
      f4:	9b 03       	fmulsu	r17, r19
      f6:	cc 03       	fmulsu	r20, r20
      f8:	a2 03       	fmuls	r18, r18
      fa:	cc 03       	fmulsu	r20, r20
      fc:	a9 03       	fmulsu	r18, r17
      fe:	cc 03       	fmulsu	r20, r20
     100:	b0 03       	fmuls	r19, r16
     102:	cc 03       	fmulsu	r20, r20
     104:	b7 03       	fmuls	r19, r23
     106:	cc 03       	fmulsu	r20, r20
     108:	be 03       	fmulsu	r19, r22
     10a:	cc 03       	fmulsu	r20, r20
     10c:	c5 03       	fmuls	r20, r21
     10e:	07 63       	ori	r16, 0x37	; 55
     110:	42 36       	cpi	r20, 0x62	; 98
     112:	b7 9b       	sbis	0x16, 7	; 22
     114:	d8 a7       	std	Y+40, r29	; 0x28
     116:	1a 39       	cpi	r17, 0x9A	; 154
     118:	68 56       	subi	r22, 0x68	; 104
     11a:	18 ae       	std	Y+56, r1	; 0x38
     11c:	ba ab       	std	Y+50, r27	; 0x32
     11e:	55 8c       	ldd	r5, Z+29	; 0x1d
     120:	1d 3c       	cpi	r17, 0xCD	; 205
     122:	b7 cc       	rjmp	.-1682   	; 0xfffffa92 <__eeprom_end+0xff7efa92>
     124:	57 63       	ori	r21, 0x37	; 55
     126:	bd 6d       	ori	r27, 0xDD	; 221
     128:	ed fd       	.word	0xfded	; ????
     12a:	75 3e       	cpi	r23, 0xE5	; 229
     12c:	f6 17       	cp	r31, r22
     12e:	72 31       	cpi	r23, 0x12	; 18
     130:	bf 00       	.word	0x00bf	; ????
     132:	00 00       	nop
     134:	80 3f       	cpi	r24, 0xF0	; 240
     136:	08 00       	.word	0x0008	; ????
     138:	00 00       	nop
     13a:	be 92       	st	-X, r11
     13c:	24 49       	sbci	r18, 0x94	; 148
     13e:	12 3e       	cpi	r17, 0xE2	; 226
     140:	ab aa       	std	Y+51, r10	; 0x33
     142:	aa 2a       	or	r10, r26
     144:	be cd       	rjmp	.-1156   	; 0xfffffcc2 <__eeprom_end+0xff7efcc2>
     146:	cc cc       	rjmp	.-1640   	; 0xfffffae0 <__eeprom_end+0xff7efae0>
     148:	4c 3e       	cpi	r20, 0xEC	; 236
     14a:	00 00       	nop
     14c:	00 80       	ld	r0, Z
     14e:	be ab       	std	Y+54, r27	; 0x36
     150:	aa aa       	std	Y+50, r10	; 0x32
     152:	aa 3e       	cpi	r26, 0xEA	; 234
     154:	00 00       	nop
     156:	00 00       	nop
     158:	bf 00       	.word	0x00bf	; ????
     15a:	00 00       	nop
     15c:	80 3f       	cpi	r24, 0xF0	; 240
     15e:	00 00       	nop
     160:	00 00       	nop
     162:	00 08       	sbc	r0, r0
     164:	41 78       	andi	r20, 0x81	; 129
     166:	d3 bb       	out	0x13, r29	; 19
     168:	43 87       	std	Z+11, r20	; 0x0b
     16a:	d1 13       	cpse	r29, r17
     16c:	3d 19       	sub	r19, r13
     16e:	0e 3c       	cpi	r16, 0xCE	; 206
     170:	c3 bd       	out	0x23, r28	; 35
     172:	42 82       	std	Z+2, r4	; 0x02
     174:	ad 2b       	or	r26, r29
     176:	3e 68       	ori	r19, 0x8E	; 142
     178:	ec 82       	std	Y+4, r14	; 0x04
     17a:	76 be       	out	0x36, r7	; 54
     17c:	d9 8f       	std	Y+25, r29	; 0x19
     17e:	e1 a9       	ldd	r30, Z+49	; 0x31
     180:	3e 4c       	sbci	r19, 0xCE	; 206
     182:	80 ef       	ldi	r24, 0xF0	; 240
     184:	ff be       	out	0x3f, r15	; 63
     186:	01 c4       	rjmp	.+2050   	; 0x98a <getBMPtemp+0x1d2>
     188:	ff 7f       	andi	r31, 0xFF	; 255
     18a:	3f 00       	.word	0x003f	; ????
     18c:	00 00       	nop
	...

00000190 <__trampolines_start>:
     190:	0c 94 8d 03 	jmp	0x71a	; 0x71a <getBMPcoefficients+0x1c8>
     194:	0c 94 c5 03 	jmp	0x78a	; 0x78a <getBMPcoefficients+0x238>
     198:	0c 94 b7 03 	jmp	0x76e	; 0x76e <getBMPcoefficients+0x21c>
     19c:	0c 94 cc 03 	jmp	0x798	; 0x798 <getBMPcoefficients+0x246>
     1a0:	0c 94 a9 03 	jmp	0x752	; 0x752 <getBMPcoefficients+0x200>
     1a4:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <getBMPcoefficients+0x1ac>
     1a8:	0c 94 94 03 	jmp	0x728	; 0x728 <getBMPcoefficients+0x1d6>
     1ac:	0c 94 86 03 	jmp	0x70c	; 0x70c <getBMPcoefficients+0x1ba>
     1b0:	0c 94 a2 03 	jmp	0x744	; 0x744 <getBMPcoefficients+0x1f2>
     1b4:	0c 94 b0 03 	jmp	0x760	; 0x760 <getBMPcoefficients+0x20e>
     1b8:	0c 94 9b 03 	jmp	0x736	; 0x736 <getBMPcoefficients+0x1e4>
     1bc:	0c 94 be 03 	jmp	0x77c	; 0x77c <getBMPcoefficients+0x22a>

000001c0 <__trampolines_end>:
     1c0:	6e 61       	ori	r22, 0x1E	; 30
     1c2:	6e 00       	.word	0x006e	; ????

000001c4 <__c.2159>:
     1c4:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1d4:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1e4:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1f4:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     204:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     214:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     224:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     234:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     244:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     254:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     264:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     274:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     284:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     294:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2a4:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2b4:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002c2 <__ctors_end>:
     2c2:	11 24       	eor	r1, r1
     2c4:	1f be       	out	0x3f, r1	; 63
     2c6:	cf ef       	ldi	r28, 0xFF	; 255
     2c8:	d1 e2       	ldi	r29, 0x21	; 33
     2ca:	de bf       	out	0x3e, r29	; 62
     2cc:	cd bf       	out	0x3d, r28	; 61
     2ce:	00 e0       	ldi	r16, 0x00	; 0
     2d0:	0c bf       	out	0x3c, r16	; 60

000002d2 <__do_copy_data>:
     2d2:	13 e0       	ldi	r17, 0x03	; 3
     2d4:	a0 e0       	ldi	r26, 0x00	; 0
     2d6:	b2 e0       	ldi	r27, 0x02	; 2
     2d8:	e6 e9       	ldi	r30, 0x96	; 150
     2da:	f1 e4       	ldi	r31, 0x41	; 65
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	0b bf       	out	0x3b, r16	; 59
     2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <__do_copy_data+0x14>
     2e2:	07 90       	elpm	r0, Z+
     2e4:	0d 92       	st	X+, r0
     2e6:	a0 3d       	cpi	r26, 0xD0	; 208
     2e8:	b1 07       	cpc	r27, r17
     2ea:	d9 f7       	brne	.-10     	; 0x2e2 <__do_copy_data+0x10>

000002ec <__do_clear_bss>:
     2ec:	25 e0       	ldi	r18, 0x05	; 5
     2ee:	a0 ed       	ldi	r26, 0xD0	; 208
     2f0:	b3 e0       	ldi	r27, 0x03	; 3
     2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <.do_clear_bss_start>

000002f4 <.do_clear_bss_loop>:
     2f4:	1d 92       	st	X+, r1

000002f6 <.do_clear_bss_start>:
     2f6:	a3 39       	cpi	r26, 0x93	; 147
     2f8:	b2 07       	cpc	r27, r18
     2fa:	e1 f7       	brne	.-8      	; 0x2f4 <.do_clear_bss_loop>
     2fc:	0e 94 20 15 	call	0x2a40	; 0x2a40 <main>
     300:	0c 94 c9 20 	jmp	0x4192	; 0x4192 <_exit>

00000304 <__bad_interrupt>:
     304:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000308 <init_crc8>:
void init_crc8(void);

uint8_t crc8_table[256];     /* 8-bit table */
static uint8_t made_table = 0;

void init_crc8(void) {
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	00 d0       	rcall	.+0      	; 0x30e <init_crc8+0x6>
     30e:	1f 92       	push	r1
     310:	cd b7       	in	r28, 0x3d	; 61
     312:	de b7       	in	r29, 0x3e	; 62

	uint16_t i;
	uint8_t j, crc;
  
		for (i=0; i<256; i++) {
     314:	1a 82       	std	Y+2, r1	; 0x02
     316:	19 82       	std	Y+1, r1	; 0x01
     318:	24 c0       	rjmp	.+72     	; 0x362 <init_crc8+0x5a>

			crc = i;
     31a:	89 81       	ldd	r24, Y+1	; 0x01
     31c:	8c 83       	std	Y+4, r24	; 0x04

			for (j=0; j<8; j++)
     31e:	1b 82       	std	Y+3, r1	; 0x03
     320:	11 c0       	rjmp	.+34     	; 0x344 <init_crc8+0x3c>
				crc = (crc << 1) ^ ((crc & 0x80) ? DI : 0);
     322:	8c 81       	ldd	r24, Y+4	; 0x04
     324:	88 2f       	mov	r24, r24
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	88 0f       	add	r24, r24
     32a:	99 1f       	adc	r25, r25
     32c:	98 2f       	mov	r25, r24
     32e:	8c 81       	ldd	r24, Y+4	; 0x04
     330:	88 23       	and	r24, r24
     332:	14 f4       	brge	.+4      	; 0x338 <init_crc8+0x30>
     334:	89 e1       	ldi	r24, 0x19	; 25
     336:	01 c0       	rjmp	.+2      	; 0x33a <init_crc8+0x32>
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	89 27       	eor	r24, r25
     33c:	8c 83       	std	Y+4, r24	; 0x04
  
		for (i=0; i<256; i++) {

			crc = i;

			for (j=0; j<8; j++)
     33e:	8b 81       	ldd	r24, Y+3	; 0x03
     340:	8f 5f       	subi	r24, 0xFF	; 255
     342:	8b 83       	std	Y+3, r24	; 0x03
     344:	8b 81       	ldd	r24, Y+3	; 0x03
     346:	88 30       	cpi	r24, 0x08	; 8
     348:	60 f3       	brcs	.-40     	; 0x322 <init_crc8+0x1a>
				crc = (crc << 1) ^ ((crc & 0x80) ? DI : 0);

			crc8_table[i] = crc & 0xFF;
     34a:	89 81       	ldd	r24, Y+1	; 0x01
     34c:	9a 81       	ldd	r25, Y+2	; 0x02
     34e:	8c 59       	subi	r24, 0x9C	; 156
     350:	9b 4f       	sbci	r25, 0xFB	; 251
     352:	2c 81       	ldd	r18, Y+4	; 0x04
     354:	fc 01       	movw	r30, r24
     356:	20 83       	st	Z, r18
void init_crc8(void) {

	uint16_t i;
	uint8_t j, crc;
  
		for (i=0; i<256; i++) {
     358:	89 81       	ldd	r24, Y+1	; 0x01
     35a:	9a 81       	ldd	r25, Y+2	; 0x02
     35c:	01 96       	adiw	r24, 0x01	; 1
     35e:	9a 83       	std	Y+2, r25	; 0x02
     360:	89 83       	std	Y+1, r24	; 0x01
     362:	89 81       	ldd	r24, Y+1	; 0x01
     364:	9a 81       	ldd	r25, Y+2	; 0x02
     366:	8f 3f       	cpi	r24, 0xFF	; 255
     368:	91 05       	cpc	r25, r1
     36a:	b9 f2       	breq	.-82     	; 0x31a <init_crc8+0x12>
     36c:	b0 f2       	brcs	.-84     	; 0x31a <init_crc8+0x12>
				crc = (crc << 1) ^ ((crc & 0x80) ? DI : 0);

			crc8_table[i] = crc & 0xFF;
		}

	made_table=1;
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	80 93 d0 03 	sts	0x03D0, r24
}
     374:	0f 90       	pop	r0
     376:	0f 90       	pop	r0
     378:	0f 90       	pop	r0
     37a:	0f 90       	pop	r0
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	08 95       	ret

00000382 <crc8>:

uint8_t crc8(uint8_t data[], uint8_t length) {
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	00 d0       	rcall	.+0      	; 0x388 <crc8+0x6>
     388:	1f 92       	push	r1
     38a:	1f 92       	push	r1
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	9c 83       	std	Y+4, r25	; 0x04
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	6d 83       	std	Y+5, r22	; 0x05
* For a byte array whose accumulated crc value is stored in *crc, computes
* resultant crc obtained by appending m to the byte array
*/

	uint8_t i;
	uint8_t crc = 0x0;
     396:	1a 82       	std	Y+2, r1	; 0x02
 
	if (made_table == 0)
     398:	80 91 d0 03 	lds	r24, 0x03D0
     39c:	88 23       	and	r24, r24
     39e:	11 f4       	brne	.+4      	; 0x3a4 <crc8+0x22>
		init_crc8();
     3a0:	0e 94 84 01 	call	0x308	; 0x308 <init_crc8>

	for (i=0; i<length; i++) {
     3a4:	19 82       	std	Y+1, r1	; 0x01
     3a6:	15 c0       	rjmp	.+42     	; 0x3d2 <crc8+0x50>
		crc = crc8_table[crc ^ data[i]];
     3a8:	89 81       	ldd	r24, Y+1	; 0x01
     3aa:	88 2f       	mov	r24, r24
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	2b 81       	ldd	r18, Y+3	; 0x03
     3b0:	3c 81       	ldd	r19, Y+4	; 0x04
     3b2:	82 0f       	add	r24, r18
     3b4:	93 1f       	adc	r25, r19
     3b6:	fc 01       	movw	r30, r24
     3b8:	90 81       	ld	r25, Z
     3ba:	8a 81       	ldd	r24, Y+2	; 0x02
     3bc:	89 27       	eor	r24, r25
     3be:	88 2f       	mov	r24, r24
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	8c 59       	subi	r24, 0x9C	; 156
     3c4:	9b 4f       	sbci	r25, 0xFB	; 251
     3c6:	fc 01       	movw	r30, r24
     3c8:	80 81       	ld	r24, Z
     3ca:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t crc = 0x0;
 
	if (made_table == 0)
		init_crc8();

	for (i=0; i<length; i++) {
     3cc:	89 81       	ldd	r24, Y+1	; 0x01
     3ce:	8f 5f       	subi	r24, 0xFF	; 255
     3d0:	89 83       	std	Y+1, r24	; 0x01
     3d2:	99 81       	ldd	r25, Y+1	; 0x01
     3d4:	8d 81       	ldd	r24, Y+5	; 0x05
     3d6:	98 17       	cp	r25, r24
     3d8:	38 f3       	brcs	.-50     	; 0x3a8 <crc8+0x26>
		crc = crc8_table[crc ^ data[i]];
	}
	return (crc & 0xff);
     3da:	8a 81       	ldd	r24, Y+2	; 0x02
}
     3dc:	0f 90       	pop	r0
     3de:	0f 90       	pop	r0
     3e0:	0f 90       	pop	r0
     3e2:	0f 90       	pop	r0
     3e4:	0f 90       	pop	r0
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	08 95       	ret

000003ec <twiError>:

static uint8_t oss = 3; //Need to change this along with the 2 oss bits in the control register

double getBMPpressure(uint16_t);

void twiError(uint8_t code) {
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
     3f0:	1f 92       	push	r1
     3f2:	cd b7       	in	r28, 0x3d	; 61
     3f4:	de b7       	in	r29, 0x3e	; 62
     3f6:	89 83       	std	Y+1, r24	; 0x01
	
//	memset(data, 0, 128);
//	sprintf(data, "TWI Error Code %d\r\n", code);
//	sendUART0data(data, sizeof(data));
}
     3f8:	0f 90       	pop	r0
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	08 95       	ret

00000400 <getBMP_ID>:

uint8_t getBMP_ID(void) {
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
     404:	1f 92       	push	r1
     406:	cd b7       	in	r28, 0x3d	; 61
     408:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t id;
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);	// send Start
     40a:	8c eb       	ldi	r24, 0xBC	; 188
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	24 ea       	ldi	r18, 0xA4	; 164
     410:	fc 01       	movw	r30, r24
     412:	20 83       	st	Z, r18
	while ( !(TWCR & (1<<TWINT) ) );		// Wait for Start to be transmitted
     414:	00 00       	nop
     416:	8c eb       	ldi	r24, 0xBC	; 188
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	fc 01       	movw	r30, r24
     41c:	80 81       	ld	r24, Z
     41e:	88 23       	and	r24, r24
     420:	d4 f7       	brge	.-12     	; 0x416 <getBMP_ID+0x16>
	
	if ( (TWSR & 0xf8) != START) {
     422:	89 eb       	ldi	r24, 0xB9	; 185
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	fc 01       	movw	r30, r24
     428:	80 81       	ld	r24, Z
     42a:	88 2f       	mov	r24, r24
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	88 7f       	andi	r24, 0xF8	; 248
     430:	99 27       	eor	r25, r25
     432:	88 30       	cpi	r24, 0x08	; 8
     434:	91 05       	cpc	r25, r1
     436:	39 f0       	breq	.+14     	; 0x446 <getBMP_ID+0x46>
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);  // Send a Stop
     438:	8c eb       	ldi	r24, 0xBC	; 188
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	24 e9       	ldi	r18, 0x94	; 148
     43e:	fc 01       	movw	r30, r24
     440:	20 83       	st	Z, r18
		return 0xba;
     442:	8a eb       	ldi	r24, 0xBA	; 186
     444:	82 c0       	rjmp	.+260    	; 0x54a <getBMP_ID+0x14a>
	}
	
	TWDR = BMP_SLA_W;						// Send the slave module address + write bit
     446:	8b eb       	ldi	r24, 0xBB	; 187
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	2e ee       	ldi	r18, 0xEE	; 238
     44c:	fc 01       	movw	r30, r24
     44e:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);			// Transmit the address and wait
     450:	8c eb       	ldi	r24, 0xBC	; 188
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	24 e8       	ldi	r18, 0x84	; 132
     456:	fc 01       	movw	r30, r24
     458:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)));
     45a:	00 00       	nop
     45c:	8c eb       	ldi	r24, 0xBC	; 188
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	fc 01       	movw	r30, r24
     462:	80 81       	ld	r24, Z
     464:	88 23       	and	r24, r24
     466:	d4 f7       	brge	.-12     	; 0x45c <getBMP_ID+0x5c>
	
	if ( (TWSR & 0xf8) != SL_ACK) {			// Look for slave ACK
     468:	89 eb       	ldi	r24, 0xB9	; 185
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	fc 01       	movw	r30, r24
     46e:	80 81       	ld	r24, Z
     470:	88 2f       	mov	r24, r24
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	88 7f       	andi	r24, 0xF8	; 248
     476:	99 27       	eor	r25, r25
     478:	88 31       	cpi	r24, 0x18	; 24
     47a:	91 05       	cpc	r25, r1
     47c:	39 f0       	breq	.+14     	; 0x48c <getBMP_ID+0x8c>
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);  // Send a Stop
     47e:	8c eb       	ldi	r24, 0xBC	; 188
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	24 e9       	ldi	r18, 0x94	; 148
     484:	fc 01       	movw	r30, r24
     486:	20 83       	st	Z, r18
		return 0xbb;
     488:	8b eb       	ldi	r24, 0xBB	; 187
     48a:	5f c0       	rjmp	.+190    	; 0x54a <getBMP_ID+0x14a>
	}
	
	TWDR = 0xd0;							// Load and send address of the BMP ID register which should contain 0x55
     48c:	8b eb       	ldi	r24, 0xBB	; 187
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	20 ed       	ldi	r18, 0xD0	; 208
     492:	fc 01       	movw	r30, r24
     494:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN );
     496:	8c eb       	ldi	r24, 0xBC	; 188
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	24 e8       	ldi	r18, 0x84	; 132
     49c:	fc 01       	movw	r30, r24
     49e:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)));
     4a0:	00 00       	nop
     4a2:	8c eb       	ldi	r24, 0xBC	; 188
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	fc 01       	movw	r30, r24
     4a8:	80 81       	ld	r24, Z
     4aa:	88 23       	and	r24, r24
     4ac:	d4 f7       	brge	.-12     	; 0x4a2 <getBMP_ID+0xa2>
	
	if ( (TWSR & 0xf8) != MT_DATA_ACK)		// Look for slave ACK
     4ae:	89 eb       	ldi	r24, 0xB9	; 185
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	fc 01       	movw	r30, r24
     4b4:	80 81       	ld	r24, Z
     4b6:	88 2f       	mov	r24, r24
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	88 7f       	andi	r24, 0xF8	; 248
     4bc:	99 27       	eor	r25, r25
     4be:	88 32       	cpi	r24, 0x28	; 40
     4c0:	91 05       	cpc	r25, r1
     4c2:	11 f0       	breq	.+4      	; 0x4c8 <getBMP_ID+0xc8>
	return 0xbc;
     4c4:	8c eb       	ldi	r24, 0xBC	; 188
     4c6:	41 c0       	rjmp	.+130    	; 0x54a <getBMP_ID+0x14a>
	
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);		// send Repeated Start and wait...
     4c8:	8c eb       	ldi	r24, 0xBC	; 188
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	24 ea       	ldi	r18, 0xA4	; 164
     4ce:	fc 01       	movw	r30, r24
     4d0:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)));
     4d2:	00 00       	nop
     4d4:	8c eb       	ldi	r24, 0xBC	; 188
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	fc 01       	movw	r30, r24
     4da:	80 81       	ld	r24, Z
     4dc:	88 23       	and	r24, r24
     4de:	d4 f7       	brge	.-12     	; 0x4d4 <getBMP_ID+0xd4>
	
	TWDR = BMP_SLA_R;							// Send the slave module address + read bit and wait
     4e0:	8b eb       	ldi	r24, 0xBB	; 187
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	2f ee       	ldi	r18, 0xEF	; 239
     4e6:	fc 01       	movw	r30, r24
     4e8:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (0<<TWSTA) | (0<<TWSTO) | (1<<TWEA) | (1<<TWEN);
     4ea:	8c eb       	ldi	r24, 0xBC	; 188
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	24 ec       	ldi	r18, 0xC4	; 196
     4f0:	fc 01       	movw	r30, r24
     4f2:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)));
     4f4:	00 00       	nop
     4f6:	8c eb       	ldi	r24, 0xBC	; 188
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	fc 01       	movw	r30, r24
     4fc:	80 81       	ld	r24, Z
     4fe:	88 23       	and	r24, r24
     500:	d4 f7       	brge	.-12     	; 0x4f6 <getBMP_ID+0xf6>
	
	if ( (TWSR & 0xf8) != MR_SLA_ACK)			 // Look for slave ACK
     502:	89 eb       	ldi	r24, 0xB9	; 185
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	fc 01       	movw	r30, r24
     508:	80 81       	ld	r24, Z
     50a:	88 2f       	mov	r24, r24
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	88 7f       	andi	r24, 0xF8	; 248
     510:	99 27       	eor	r25, r25
     512:	80 34       	cpi	r24, 0x40	; 64
     514:	91 05       	cpc	r25, r1
     516:	11 f0       	breq	.+4      	; 0x51c <getBMP_ID+0x11c>
	return 0xbd;
     518:	8d eb       	ldi	r24, 0xBD	; 189
     51a:	17 c0       	rjmp	.+46     	; 0x54a <getBMP_ID+0x14a>
	
	TWCR = (0<<TWSTA) | (0<<TWSTO) | (1<<TWINT) | (0<<TWEA) | (1<<TWEN);		// send a RESTART and return a NACK
     51c:	8c eb       	ldi	r24, 0xBC	; 188
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	24 e8       	ldi	r18, 0x84	; 132
     522:	fc 01       	movw	r30, r24
     524:	20 83       	st	Z, r18
	
	while (!(TWCR & (1<<TWINT))); // Wait for slave to return a byte
     526:	00 00       	nop
     528:	8c eb       	ldi	r24, 0xBC	; 188
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	fc 01       	movw	r30, r24
     52e:	80 81       	ld	r24, Z
     530:	88 23       	and	r24, r24
     532:	d4 f7       	brge	.-12     	; 0x528 <getBMP_ID+0x128>

	id = TWDR;
     534:	8b eb       	ldi	r24, 0xBB	; 187
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	fc 01       	movw	r30, r24
     53a:	80 81       	ld	r24, Z
     53c:	89 83       	std	Y+1, r24	; 0x01
	
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);  // Send a Stop
     53e:	8c eb       	ldi	r24, 0xBC	; 188
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	24 e9       	ldi	r18, 0x94	; 148
     544:	fc 01       	movw	r30, r24
     546:	20 83       	st	Z, r18
	
	return id;
     548:	89 81       	ldd	r24, Y+1	; 0x01
	
}
     54a:	0f 90       	pop	r0
     54c:	df 91       	pop	r29
     54e:	cf 91       	pop	r28
     550:	08 95       	ret

00000552 <getBMPcoefficients>:

void getBMPcoefficients(void) {
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	00 d0       	rcall	.+0      	; 0x558 <getBMPcoefficients+0x6>
     558:	1f 92       	push	r1
     55a:	1f 92       	push	r1
     55c:	cd b7       	in	r28, 0x3d	; 61
     55e:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t MSB, LSB, i;
	int16_t coeffData;
	
	for (i = 0xaa; i <= 0xbe; i += 2) {
     560:	8a ea       	ldi	r24, 0xAA	; 170
     562:	89 83       	std	Y+1, r24	; 0x01
     564:	1d c1       	rjmp	.+570    	; 0x7a0 <getBMPcoefficients+0x24e>
		
		TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);		// send Start
     566:	8c eb       	ldi	r24, 0xBC	; 188
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	24 ea       	ldi	r18, 0xA4	; 164
     56c:	fc 01       	movw	r30, r24
     56e:	20 83       	st	Z, r18
		while ( !(TWCR & (1<<TWINT) ) );			// Wait for Start to be transmitted
     570:	00 00       	nop
     572:	8c eb       	ldi	r24, 0xBC	; 188
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	fc 01       	movw	r30, r24
     578:	80 81       	ld	r24, Z
     57a:	88 23       	and	r24, r24
     57c:	d4 f7       	brge	.-12     	; 0x572 <getBMPcoefficients+0x20>
		
		if ( (TWSR & 0xf8) != START)
     57e:	89 eb       	ldi	r24, 0xB9	; 185
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	fc 01       	movw	r30, r24
     584:	80 81       	ld	r24, Z
     586:	88 2f       	mov	r24, r24
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	88 7f       	andi	r24, 0xF8	; 248
     58c:	99 27       	eor	r25, r25
     58e:	88 30       	cpi	r24, 0x08	; 8
     590:	91 05       	cpc	r25, r1
     592:	19 f0       	breq	.+6      	; 0x59a <getBMPcoefficients+0x48>
		twiError(0);
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	0e 94 f6 01 	call	0x3ec	; 0x3ec <twiError>
		
		TWDR = BMP_SLA_W;							// Send the slave module address + write bit
     59a:	8b eb       	ldi	r24, 0xBB	; 187
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	2e ee       	ldi	r18, 0xEE	; 238
     5a0:	fc 01       	movw	r30, r24
     5a2:	20 83       	st	Z, r18
		TWCR = (1<<TWINT) | (1<<TWEN);				// Transmit the address
     5a4:	8c eb       	ldi	r24, 0xBC	; 188
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	24 e8       	ldi	r18, 0x84	; 132
     5aa:	fc 01       	movw	r30, r24
     5ac:	20 83       	st	Z, r18
		while (!(TWCR & (1<<TWINT)));
     5ae:	00 00       	nop
     5b0:	8c eb       	ldi	r24, 0xBC	; 188
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	fc 01       	movw	r30, r24
     5b6:	80 81       	ld	r24, Z
     5b8:	88 23       	and	r24, r24
     5ba:	d4 f7       	brge	.-12     	; 0x5b0 <getBMPcoefficients+0x5e>
		
		if ( (TWSR & 0xf8) != SL_ACK)				// Look for slave ACK
     5bc:	89 eb       	ldi	r24, 0xB9	; 185
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	fc 01       	movw	r30, r24
     5c2:	80 81       	ld	r24, Z
     5c4:	88 2f       	mov	r24, r24
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	88 7f       	andi	r24, 0xF8	; 248
     5ca:	99 27       	eor	r25, r25
     5cc:	88 31       	cpi	r24, 0x18	; 24
     5ce:	91 05       	cpc	r25, r1
     5d0:	19 f0       	breq	.+6      	; 0x5d8 <getBMPcoefficients+0x86>
		twiError(1);
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	0e 94 f6 01 	call	0x3ec	; 0x3ec <twiError>
		
		TWDR = i;									// Send the EEPROM coefficient address to read
     5d8:	8b eb       	ldi	r24, 0xBB	; 187
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	29 81       	ldd	r18, Y+1	; 0x01
     5de:	fc 01       	movw	r30, r24
     5e0:	20 83       	st	Z, r18
		TWCR = (1<<TWINT) | (1<<TWEN );
     5e2:	8c eb       	ldi	r24, 0xBC	; 188
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	24 e8       	ldi	r18, 0x84	; 132
     5e8:	fc 01       	movw	r30, r24
     5ea:	20 83       	st	Z, r18
		while (!(TWCR & (1<<TWINT)));
     5ec:	00 00       	nop
     5ee:	8c eb       	ldi	r24, 0xBC	; 188
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	fc 01       	movw	r30, r24
     5f4:	80 81       	ld	r24, Z
     5f6:	88 23       	and	r24, r24
     5f8:	d4 f7       	brge	.-12     	; 0x5ee <getBMPcoefficients+0x9c>
		
		if ( (TWSR & 0xf8) != MT_DATA_ACK)			// Look for slave ACK
     5fa:	89 eb       	ldi	r24, 0xB9	; 185
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	fc 01       	movw	r30, r24
     600:	80 81       	ld	r24, Z
     602:	88 2f       	mov	r24, r24
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	88 7f       	andi	r24, 0xF8	; 248
     608:	99 27       	eor	r25, r25
     60a:	88 32       	cpi	r24, 0x28	; 40
     60c:	91 05       	cpc	r25, r1
     60e:	19 f0       	breq	.+6      	; 0x616 <getBMPcoefficients+0xc4>
		twiError(2);
     610:	82 e0       	ldi	r24, 0x02	; 2
     612:	0e 94 f6 01 	call	0x3ec	; 0x3ec <twiError>
		
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); // send Repeated Start and wait...
     616:	8c eb       	ldi	r24, 0xBC	; 188
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	24 ea       	ldi	r18, 0xA4	; 164
     61c:	fc 01       	movw	r30, r24
     61e:	20 83       	st	Z, r18
		while (!(TWCR & (1<<TWINT)));
     620:	00 00       	nop
     622:	8c eb       	ldi	r24, 0xBC	; 188
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	fc 01       	movw	r30, r24
     628:	80 81       	ld	r24, Z
     62a:	88 23       	and	r24, r24
     62c:	d4 f7       	brge	.-12     	; 0x622 <getBMPcoefficients+0xd0>
		
		TWDR = BMP_SLA_R;							// Send the slave module address + read bit
     62e:	8b eb       	ldi	r24, 0xBB	; 187
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	2f ee       	ldi	r18, 0xEF	; 239
     634:	fc 01       	movw	r30, r24
     636:	20 83       	st	Z, r18
		TWCR = (1<<TWINT) | (0<<TWSTA) | (0<<TWSTO) | (1<<TWEA) | (1<<TWEN);
     638:	8c eb       	ldi	r24, 0xBC	; 188
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	24 ec       	ldi	r18, 0xC4	; 196
     63e:	fc 01       	movw	r30, r24
     640:	20 83       	st	Z, r18
		while (!(TWCR & (1<<TWINT)));
     642:	00 00       	nop
     644:	8c eb       	ldi	r24, 0xBC	; 188
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	fc 01       	movw	r30, r24
     64a:	80 81       	ld	r24, Z
     64c:	88 23       	and	r24, r24
     64e:	d4 f7       	brge	.-12     	; 0x644 <getBMPcoefficients+0xf2>
		
		if ( (TWSR & 0xf8) != MR_SLA_ACK)			// Look for slave ACK
     650:	89 eb       	ldi	r24, 0xB9	; 185
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	fc 01       	movw	r30, r24
     656:	80 81       	ld	r24, Z
     658:	88 2f       	mov	r24, r24
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	88 7f       	andi	r24, 0xF8	; 248
     65e:	99 27       	eor	r25, r25
     660:	80 34       	cpi	r24, 0x40	; 64
     662:	91 05       	cpc	r25, r1
     664:	19 f0       	breq	.+6      	; 0x66c <getBMPcoefficients+0x11a>
		twiError(4);
     666:	84 e0       	ldi	r24, 0x04	; 4
     668:	0e 94 f6 01 	call	0x3ec	; 0x3ec <twiError>

		TWCR = (0<<TWSTA) | (0<<TWSTO) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);   // Send a RESTART and an ACK after MSB is received
     66c:	8c eb       	ldi	r24, 0xBC	; 188
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	24 ec       	ldi	r18, 0xC4	; 196
     672:	fc 01       	movw	r30, r24
     674:	20 83       	st	Z, r18
		while (!(TWCR & (1<<TWINT)));
     676:	00 00       	nop
     678:	8c eb       	ldi	r24, 0xBC	; 188
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	fc 01       	movw	r30, r24
     67e:	80 81       	ld	r24, Z
     680:	88 23       	and	r24, r24
     682:	d4 f7       	brge	.-12     	; 0x678 <getBMPcoefficients+0x126>
		
		MSB = TWDR;
     684:	8b eb       	ldi	r24, 0xBB	; 187
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	fc 01       	movw	r30, r24
     68a:	80 81       	ld	r24, Z
     68c:	8a 83       	std	Y+2, r24	; 0x02
		
		TWCR = (0<<TWSTA) | (0<<TWSTO) | (1<<TWINT) | (0<<TWEA) | (1<<TWEN);   // Send a RESTART and a NACK after LSB is received
     68e:	8c eb       	ldi	r24, 0xBC	; 188
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	24 e8       	ldi	r18, 0x84	; 132
     694:	fc 01       	movw	r30, r24
     696:	20 83       	st	Z, r18
		while (!(TWCR & (1<<TWINT)));
     698:	00 00       	nop
     69a:	8c eb       	ldi	r24, 0xBC	; 188
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	fc 01       	movw	r30, r24
     6a0:	80 81       	ld	r24, Z
     6a2:	88 23       	and	r24, r24
     6a4:	d4 f7       	brge	.-12     	; 0x69a <getBMPcoefficients+0x148>

		LSB = TWDR;
     6a6:	8b eb       	ldi	r24, 0xBB	; 187
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	fc 01       	movw	r30, r24
     6ac:	80 81       	ld	r24, Z
     6ae:	8b 83       	std	Y+3, r24	; 0x03
		
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);  // Send a Stop
     6b0:	8c eb       	ldi	r24, 0xBC	; 188
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	24 e9       	ldi	r18, 0x94	; 148
     6b6:	fc 01       	movw	r30, r24
     6b8:	20 83       	st	Z, r18
		
		
		coeffData = (MSB << 8) | LSB;
     6ba:	8a 81       	ldd	r24, Y+2	; 0x02
     6bc:	88 2f       	mov	r24, r24
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	38 2f       	mov	r19, r24
     6c2:	22 27       	eor	r18, r18
     6c4:	8b 81       	ldd	r24, Y+3	; 0x03
     6c6:	88 2f       	mov	r24, r24
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	82 2b       	or	r24, r18
     6cc:	93 2b       	or	r25, r19
     6ce:	9d 83       	std	Y+5, r25	; 0x05
     6d0:	8c 83       	std	Y+4, r24	; 0x04
		
		switch (i) {
     6d2:	89 81       	ldd	r24, Y+1	; 0x01
     6d4:	88 2f       	mov	r24, r24
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	aa 27       	eor	r26, r26
     6da:	97 fd       	sbrc	r25, 7
     6dc:	a0 95       	com	r26
     6de:	ba 2f       	mov	r27, r26
     6e0:	4a ea       	ldi	r20, 0xAA	; 170
     6e2:	50 e0       	ldi	r21, 0x00	; 0
     6e4:	24 e1       	ldi	r18, 0x14	; 20
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	84 1b       	sub	r24, r20
     6ea:	95 0b       	sbc	r25, r21
     6ec:	28 17       	cp	r18, r24
     6ee:	39 07       	cpc	r19, r25
     6f0:	08 f4       	brcc	.+2      	; 0x6f4 <getBMPcoefficients+0x1a2>
     6f2:	52 c0       	rjmp	.+164    	; 0x798 <getBMPcoefficients+0x246>
     6f4:	8e 58       	subi	r24, 0x8E	; 142
     6f6:	9f 4f       	sbci	r25, 0xFF	; 255
     6f8:	fc 01       	movw	r30, r24
     6fa:	0c 94 6d 1b 	jmp	0x36da	; 0x36da <__tablejump2__>
			
			case 0xaa:
			bmp.ac1 = coeffData;
     6fe:	8c 81       	ldd	r24, Y+4	; 0x04
     700:	9d 81       	ldd	r25, Y+5	; 0x05
     702:	90 93 65 05 	sts	0x0565, r25
     706:	80 93 64 05 	sts	0x0564, r24
			break;
     70a:	47 c0       	rjmp	.+142    	; 0x79a <getBMPcoefficients+0x248>
			
			case 0xac:
			bmp.ac2 = coeffData;
     70c:	8c 81       	ldd	r24, Y+4	; 0x04
     70e:	9d 81       	ldd	r25, Y+5	; 0x05
     710:	90 93 67 05 	sts	0x0567, r25
     714:	80 93 66 05 	sts	0x0566, r24
			break;
     718:	40 c0       	rjmp	.+128    	; 0x79a <getBMPcoefficients+0x248>
			
			case 0xae:
			bmp.ac3 = coeffData;
     71a:	8c 81       	ldd	r24, Y+4	; 0x04
     71c:	9d 81       	ldd	r25, Y+5	; 0x05
     71e:	90 93 69 05 	sts	0x0569, r25
     722:	80 93 68 05 	sts	0x0568, r24
			break;
     726:	39 c0       	rjmp	.+114    	; 0x79a <getBMPcoefficients+0x248>
			
			case 0xb0:
			bmp.ac4 = coeffData;
     728:	8c 81       	ldd	r24, Y+4	; 0x04
     72a:	9d 81       	ldd	r25, Y+5	; 0x05
     72c:	90 93 6b 05 	sts	0x056B, r25
     730:	80 93 6a 05 	sts	0x056A, r24
			break;
     734:	32 c0       	rjmp	.+100    	; 0x79a <getBMPcoefficients+0x248>
			
			case 0xb2:
			bmp.ac5 = coeffData;
     736:	8c 81       	ldd	r24, Y+4	; 0x04
     738:	9d 81       	ldd	r25, Y+5	; 0x05
     73a:	90 93 6d 05 	sts	0x056D, r25
     73e:	80 93 6c 05 	sts	0x056C, r24
			break;
     742:	2b c0       	rjmp	.+86     	; 0x79a <getBMPcoefficients+0x248>
			
			case 0xb4:
			bmp.ac6 = coeffData;
     744:	8c 81       	ldd	r24, Y+4	; 0x04
     746:	9d 81       	ldd	r25, Y+5	; 0x05
     748:	90 93 6f 05 	sts	0x056F, r25
     74c:	80 93 6e 05 	sts	0x056E, r24
			break;
     750:	24 c0       	rjmp	.+72     	; 0x79a <getBMPcoefficients+0x248>
			
			case 0xb6:
			bmp.b1 = coeffData;
     752:	8c 81       	ldd	r24, Y+4	; 0x04
     754:	9d 81       	ldd	r25, Y+5	; 0x05
     756:	90 93 71 05 	sts	0x0571, r25
     75a:	80 93 70 05 	sts	0x0570, r24
			break;
     75e:	1d c0       	rjmp	.+58     	; 0x79a <getBMPcoefficients+0x248>
			
			case 0xb8:
			bmp.b2 = coeffData;
     760:	8c 81       	ldd	r24, Y+4	; 0x04
     762:	9d 81       	ldd	r25, Y+5	; 0x05
     764:	90 93 73 05 	sts	0x0573, r25
     768:	80 93 72 05 	sts	0x0572, r24
			break;
     76c:	16 c0       	rjmp	.+44     	; 0x79a <getBMPcoefficients+0x248>
			
			case 0xba:
			bmp.mb = coeffData;
     76e:	8c 81       	ldd	r24, Y+4	; 0x04
     770:	9d 81       	ldd	r25, Y+5	; 0x05
     772:	90 93 75 05 	sts	0x0575, r25
     776:	80 93 74 05 	sts	0x0574, r24
			break;
     77a:	0f c0       	rjmp	.+30     	; 0x79a <getBMPcoefficients+0x248>
			
			case 0xbc:
			bmp.mc = coeffData;
     77c:	8c 81       	ldd	r24, Y+4	; 0x04
     77e:	9d 81       	ldd	r25, Y+5	; 0x05
     780:	90 93 77 05 	sts	0x0577, r25
     784:	80 93 76 05 	sts	0x0576, r24
			break;
     788:	08 c0       	rjmp	.+16     	; 0x79a <getBMPcoefficients+0x248>
			
			case 0xbe:
			bmp.md = coeffData;
     78a:	8c 81       	ldd	r24, Y+4	; 0x04
     78c:	9d 81       	ldd	r25, Y+5	; 0x05
     78e:	90 93 79 05 	sts	0x0579, r25
     792:	80 93 78 05 	sts	0x0578, r24
			break;
     796:	01 c0       	rjmp	.+2      	; 0x79a <getBMPcoefficients+0x248>
			
			default:
			break;
     798:	00 00       	nop
void getBMPcoefficients(void) {
	
	uint8_t MSB, LSB, i;
	int16_t coeffData;
	
	for (i = 0xaa; i <= 0xbe; i += 2) {
     79a:	89 81       	ldd	r24, Y+1	; 0x01
     79c:	8e 5f       	subi	r24, 0xFE	; 254
     79e:	89 83       	std	Y+1, r24	; 0x01
     7a0:	89 81       	ldd	r24, Y+1	; 0x01
     7a2:	8f 3b       	cpi	r24, 0xBF	; 191
     7a4:	08 f4       	brcc	.+2      	; 0x7a8 <getBMPcoefficients+0x256>
     7a6:	df ce       	rjmp	.-578    	; 0x566 <getBMPcoefficients+0x14>
			default:
			break;
		}
		
	}
}
     7a8:	0f 90       	pop	r0
     7aa:	0f 90       	pop	r0
     7ac:	0f 90       	pop	r0
     7ae:	0f 90       	pop	r0
     7b0:	0f 90       	pop	r0
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	08 95       	ret

000007b8 <getBMPtemp>:


double getBMPtemp(void) {
     7b8:	cf 92       	push	r12
     7ba:	df 92       	push	r13
     7bc:	ef 92       	push	r14
     7be:	ff 92       	push	r15
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	cd b7       	in	r28, 0x3d	; 61
     7c6:	de b7       	in	r29, 0x3e	; 62
     7c8:	a6 97       	sbiw	r28, 0x26	; 38
     7ca:	0f b6       	in	r0, 0x3f	; 63
     7cc:	f8 94       	cli
     7ce:	de bf       	out	0x3e, r29	; 62
     7d0:	0f be       	out	0x3f, r0	; 63
     7d2:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t MSB, LSB;
	uint32_t rawTempData;
	double calcTemp;
	
	int32_t x1 = 0;
     7d4:	19 82       	std	Y+1, r1	; 0x01
     7d6:	1a 82       	std	Y+2, r1	; 0x02
     7d8:	1b 82       	std	Y+3, r1	; 0x03
     7da:	1c 82       	std	Y+4, r1	; 0x04
	int32_t x2 = 0;
     7dc:	1d 82       	std	Y+5, r1	; 0x05
     7de:	1e 82       	std	Y+6, r1	; 0x06
     7e0:	1f 82       	std	Y+7, r1	; 0x07
     7e2:	18 86       	std	Y+8, r1	; 0x08
	int32_t b5 = 0;
     7e4:	19 86       	std	Y+9, r1	; 0x09
     7e6:	1a 86       	std	Y+10, r1	; 0x0a
     7e8:	1b 86       	std	Y+11, r1	; 0x0b
     7ea:	1c 86       	std	Y+12, r1	; 0x0c
	int16_t t = 0;
     7ec:	1e 86       	std	Y+14, r1	; 0x0e
     7ee:	1d 86       	std	Y+13, r1	; 0x0d
	
// Get raw temperature
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);		// send Start
     7f0:	8c eb       	ldi	r24, 0xBC	; 188
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	24 ea       	ldi	r18, 0xA4	; 164
     7f6:	fc 01       	movw	r30, r24
     7f8:	20 83       	st	Z, r18
	while ( !(TWCR & (1<<TWINT) ) );			// Wait for Start to be transmitted
     7fa:	00 00       	nop
     7fc:	8c eb       	ldi	r24, 0xBC	; 188
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	fc 01       	movw	r30, r24
     802:	80 81       	ld	r24, Z
     804:	88 23       	and	r24, r24
     806:	d4 f7       	brge	.-12     	; 0x7fc <getBMPtemp+0x44>
	
	if ( (TWSR & 0xf8) != START)
     808:	89 eb       	ldi	r24, 0xB9	; 185
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	fc 01       	movw	r30, r24
     80e:	80 81       	ld	r24, Z
     810:	88 2f       	mov	r24, r24
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	88 7f       	andi	r24, 0xF8	; 248
     816:	99 27       	eor	r25, r25
     818:	88 30       	cpi	r24, 0x08	; 8
     81a:	91 05       	cpc	r25, r1
     81c:	19 f0       	breq	.+6      	; 0x824 <getBMPtemp+0x6c>
	twiError(5);
     81e:	85 e0       	ldi	r24, 0x05	; 5
     820:	0e 94 f6 01 	call	0x3ec	; 0x3ec <twiError>
	
	TWDR = BMP_SLA_W;							// Send the slave module address + write bit
     824:	8b eb       	ldi	r24, 0xBB	; 187
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	2e ee       	ldi	r18, 0xEE	; 238
     82a:	fc 01       	movw	r30, r24
     82c:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);				// Transmit the address
     82e:	8c eb       	ldi	r24, 0xBC	; 188
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	24 e8       	ldi	r18, 0x84	; 132
     834:	fc 01       	movw	r30, r24
     836:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)));
     838:	00 00       	nop
     83a:	8c eb       	ldi	r24, 0xBC	; 188
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	fc 01       	movw	r30, r24
     840:	80 81       	ld	r24, Z
     842:	88 23       	and	r24, r24
     844:	d4 f7       	brge	.-12     	; 0x83a <getBMPtemp+0x82>
	
	if ( (TWSR & 0xf8) != SL_ACK)				// Look for slave ACK
     846:	89 eb       	ldi	r24, 0xB9	; 185
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	fc 01       	movw	r30, r24
     84c:	80 81       	ld	r24, Z
     84e:	88 2f       	mov	r24, r24
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	88 7f       	andi	r24, 0xF8	; 248
     854:	99 27       	eor	r25, r25
     856:	88 31       	cpi	r24, 0x18	; 24
     858:	91 05       	cpc	r25, r1
     85a:	19 f0       	breq	.+6      	; 0x862 <getBMPtemp+0xaa>
	twiError(6);
     85c:	86 e0       	ldi	r24, 0x06	; 6
     85e:	0e 94 f6 01 	call	0x3ec	; 0x3ec <twiError>
	
	TWDR = 0xf4;								// Send the control register address
     862:	8b eb       	ldi	r24, 0xBB	; 187
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	24 ef       	ldi	r18, 0xF4	; 244
     868:	fc 01       	movw	r30, r24
     86a:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN );
     86c:	8c eb       	ldi	r24, 0xBC	; 188
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	24 e8       	ldi	r18, 0x84	; 132
     872:	fc 01       	movw	r30, r24
     874:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)));
     876:	00 00       	nop
     878:	8c eb       	ldi	r24, 0xBC	; 188
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	fc 01       	movw	r30, r24
     87e:	80 81       	ld	r24, Z
     880:	88 23       	and	r24, r24
     882:	d4 f7       	brge	.-12     	; 0x878 <getBMPtemp+0xc0>
	
	if ( (TWSR & 0xf8) != MT_DATA_ACK)			// Look for slave ACK
     884:	89 eb       	ldi	r24, 0xB9	; 185
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	fc 01       	movw	r30, r24
     88a:	80 81       	ld	r24, Z
     88c:	88 2f       	mov	r24, r24
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	88 7f       	andi	r24, 0xF8	; 248
     892:	99 27       	eor	r25, r25
     894:	88 32       	cpi	r24, 0x28	; 40
     896:	91 05       	cpc	r25, r1
     898:	19 f0       	breq	.+6      	; 0x8a0 <getBMPtemp+0xe8>
	twiError(7);
     89a:	87 e0       	ldi	r24, 0x07	; 7
     89c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <twiError>
	
	TWDR = 0x2e;								// Send the control register data
     8a0:	8b eb       	ldi	r24, 0xBB	; 187
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	2e e2       	ldi	r18, 0x2E	; 46
     8a6:	fc 01       	movw	r30, r24
     8a8:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN );
     8aa:	8c eb       	ldi	r24, 0xBC	; 188
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	24 e8       	ldi	r18, 0x84	; 132
     8b0:	fc 01       	movw	r30, r24
     8b2:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)));
     8b4:	00 00       	nop
     8b6:	8c eb       	ldi	r24, 0xBC	; 188
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	fc 01       	movw	r30, r24
     8bc:	80 81       	ld	r24, Z
     8be:	88 23       	and	r24, r24
     8c0:	d4 f7       	brge	.-12     	; 0x8b6 <getBMPtemp+0xfe>
	
	if ( (TWSR & 0xf8) != MT_DATA_ACK)			// Look for slave ACK
     8c2:	89 eb       	ldi	r24, 0xB9	; 185
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	fc 01       	movw	r30, r24
     8c8:	80 81       	ld	r24, Z
     8ca:	88 2f       	mov	r24, r24
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	88 7f       	andi	r24, 0xF8	; 248
     8d0:	99 27       	eor	r25, r25
     8d2:	88 32       	cpi	r24, 0x28	; 40
     8d4:	91 05       	cpc	r25, r1
     8d6:	19 f0       	breq	.+6      	; 0x8de <getBMPtemp+0x126>
	twiError(8);
     8d8:	88 e0       	ldi	r24, 0x08	; 8
     8da:	0e 94 f6 01 	call	0x3ec	; 0x3ec <twiError>
	
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);  // Send a Stop	
     8de:	8c eb       	ldi	r24, 0xBC	; 188
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	24 e9       	ldi	r18, 0x94	; 148
     8e4:	fc 01       	movw	r30, r24
     8e6:	20 83       	st	Z, r18
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	a0 e2       	ldi	r26, 0x20	; 32
     8ee:	b1 e4       	ldi	r27, 0x41	; 65
     8f0:	89 8f       	std	Y+25, r24	; 0x19
     8f2:	9a 8f       	std	Y+26, r25	; 0x1a
     8f4:	ab 8f       	std	Y+27, r26	; 0x1b
     8f6:	bc 8f       	std	Y+28, r27	; 0x1c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     8f8:	20 e0       	ldi	r18, 0x00	; 0
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	4a e7       	ldi	r20, 0x7A	; 122
     8fe:	55 e4       	ldi	r21, 0x45	; 69
     900:	69 8d       	ldd	r22, Y+25	; 0x19
     902:	7a 8d       	ldd	r23, Y+26	; 0x1a
     904:	8b 8d       	ldd	r24, Y+27	; 0x1b
     906:	9c 8d       	ldd	r25, Y+28	; 0x1c
     908:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
     90c:	dc 01       	movw	r26, r24
     90e:	cb 01       	movw	r24, r22
     910:	8d 8f       	std	Y+29, r24	; 0x1d
     912:	9e 8f       	std	Y+30, r25	; 0x1e
     914:	af 8f       	std	Y+31, r26	; 0x1f
     916:	b8 a3       	std	Y+32, r27	; 0x20
	if (__tmp < 1.0)
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	40 e8       	ldi	r20, 0x80	; 128
     91e:	5f e3       	ldi	r21, 0x3F	; 63
     920:	6d 8d       	ldd	r22, Y+29	; 0x1d
     922:	7e 8d       	ldd	r23, Y+30	; 0x1e
     924:	8f 8d       	ldd	r24, Y+31	; 0x1f
     926:	98 a1       	ldd	r25, Y+32	; 0x20
     928:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__cmpsf2>
     92c:	88 23       	and	r24, r24
     92e:	2c f4       	brge	.+10     	; 0x93a <getBMPtemp+0x182>
		__ticks = 1;
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	9a a3       	std	Y+34, r25	; 0x22
     936:	89 a3       	std	Y+33, r24	; 0x21
     938:	3f c0       	rjmp	.+126    	; 0x9b8 <getBMPtemp+0x200>
	else if (__tmp > 65535)
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	3f ef       	ldi	r19, 0xFF	; 255
     93e:	4f e7       	ldi	r20, 0x7F	; 127
     940:	57 e4       	ldi	r21, 0x47	; 71
     942:	6d 8d       	ldd	r22, Y+29	; 0x1d
     944:	7e 8d       	ldd	r23, Y+30	; 0x1e
     946:	8f 8d       	ldd	r24, Y+31	; 0x1f
     948:	98 a1       	ldd	r25, Y+32	; 0x20
     94a:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <__gesf2>
     94e:	18 16       	cp	r1, r24
     950:	4c f5       	brge	.+82     	; 0x9a4 <getBMPtemp+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     952:	20 e0       	ldi	r18, 0x00	; 0
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	40 e2       	ldi	r20, 0x20	; 32
     958:	51 e4       	ldi	r21, 0x41	; 65
     95a:	69 8d       	ldd	r22, Y+25	; 0x19
     95c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     95e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     960:	9c 8d       	ldd	r25, Y+28	; 0x1c
     962:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
     966:	dc 01       	movw	r26, r24
     968:	cb 01       	movw	r24, r22
     96a:	bc 01       	movw	r22, r24
     96c:	cd 01       	movw	r24, r26
     96e:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <__fixunssfsi>
     972:	dc 01       	movw	r26, r24
     974:	cb 01       	movw	r24, r22
     976:	9a a3       	std	Y+34, r25	; 0x22
     978:	89 a3       	std	Y+33, r24	; 0x21
     97a:	0f c0       	rjmp	.+30     	; 0x99a <getBMPtemp+0x1e2>
     97c:	80 e9       	ldi	r24, 0x90	; 144
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	9c a3       	std	Y+36, r25	; 0x24
     982:	8b a3       	std	Y+35, r24	; 0x23
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     984:	8b a1       	ldd	r24, Y+35	; 0x23
     986:	9c a1       	ldd	r25, Y+36	; 0x24
     988:	01 97       	sbiw	r24, 0x01	; 1
     98a:	f1 f7       	brne	.-4      	; 0x988 <getBMPtemp+0x1d0>
     98c:	9c a3       	std	Y+36, r25	; 0x24
     98e:	8b a3       	std	Y+35, r24	; 0x23
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     990:	89 a1       	ldd	r24, Y+33	; 0x21
     992:	9a a1       	ldd	r25, Y+34	; 0x22
     994:	01 97       	sbiw	r24, 0x01	; 1
     996:	9a a3       	std	Y+34, r25	; 0x22
     998:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     99a:	89 a1       	ldd	r24, Y+33	; 0x21
     99c:	9a a1       	ldd	r25, Y+34	; 0x22
     99e:	00 97       	sbiw	r24, 0x00	; 0
     9a0:	69 f7       	brne	.-38     	; 0x97c <getBMPtemp+0x1c4>
     9a2:	14 c0       	rjmp	.+40     	; 0x9cc <getBMPtemp+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9a4:	6d 8d       	ldd	r22, Y+29	; 0x1d
     9a6:	7e 8d       	ldd	r23, Y+30	; 0x1e
     9a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     9aa:	98 a1       	ldd	r25, Y+32	; 0x20
     9ac:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <__fixunssfsi>
     9b0:	dc 01       	movw	r26, r24
     9b2:	cb 01       	movw	r24, r22
     9b4:	9a a3       	std	Y+34, r25	; 0x22
     9b6:	89 a3       	std	Y+33, r24	; 0x21
     9b8:	89 a1       	ldd	r24, Y+33	; 0x21
     9ba:	9a a1       	ldd	r25, Y+34	; 0x22
     9bc:	9e a3       	std	Y+38, r25	; 0x26
     9be:	8d a3       	std	Y+37, r24	; 0x25
     9c0:	8d a1       	ldd	r24, Y+37	; 0x25
     9c2:	9e a1       	ldd	r25, Y+38	; 0x26
     9c4:	01 97       	sbiw	r24, 0x01	; 1
     9c6:	f1 f7       	brne	.-4      	; 0x9c4 <getBMPtemp+0x20c>
     9c8:	9e a3       	std	Y+38, r25	; 0x26
     9ca:	8d a3       	std	Y+37, r24	; 0x25
	
	
	_delay_ms(10);
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);		// send Start
     9cc:	8c eb       	ldi	r24, 0xBC	; 188
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	24 ea       	ldi	r18, 0xA4	; 164
     9d2:	fc 01       	movw	r30, r24
     9d4:	20 83       	st	Z, r18
	while ( !(TWCR & (1<<TWINT) ) );			// Wait for Start to be transmitted
     9d6:	00 00       	nop
     9d8:	8c eb       	ldi	r24, 0xBC	; 188
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	fc 01       	movw	r30, r24
     9de:	80 81       	ld	r24, Z
     9e0:	88 23       	and	r24, r24
     9e2:	d4 f7       	brge	.-12     	; 0x9d8 <getBMPtemp+0x220>
	
	TWDR = BMP_SLA_W;							// Send the slave module address + write bit
     9e4:	8b eb       	ldi	r24, 0xBB	; 187
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	2e ee       	ldi	r18, 0xEE	; 238
     9ea:	fc 01       	movw	r30, r24
     9ec:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);				// Transmit the address
     9ee:	8c eb       	ldi	r24, 0xBC	; 188
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	24 e8       	ldi	r18, 0x84	; 132
     9f4:	fc 01       	movw	r30, r24
     9f6:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)));
     9f8:	00 00       	nop
     9fa:	8c eb       	ldi	r24, 0xBC	; 188
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	fc 01       	movw	r30, r24
     a00:	80 81       	ld	r24, Z
     a02:	88 23       	and	r24, r24
     a04:	d4 f7       	brge	.-12     	; 0x9fa <getBMPtemp+0x242>
	
	if ( (TWSR & 0xf8) != SL_ACK)				// Look for slave ACK
     a06:	89 eb       	ldi	r24, 0xB9	; 185
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	fc 01       	movw	r30, r24
     a0c:	80 81       	ld	r24, Z
     a0e:	88 2f       	mov	r24, r24
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	88 7f       	andi	r24, 0xF8	; 248
     a14:	99 27       	eor	r25, r25
     a16:	88 31       	cpi	r24, 0x18	; 24
     a18:	91 05       	cpc	r25, r1
     a1a:	19 f0       	breq	.+6      	; 0xa22 <getBMPtemp+0x26a>
	twiError(6);
     a1c:	86 e0       	ldi	r24, 0x06	; 6
     a1e:	0e 94 f6 01 	call	0x3ec	; 0x3ec <twiError>
	
	TWDR = 0xf6;								// Send the address of the AD MSB
     a22:	8b eb       	ldi	r24, 0xBB	; 187
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	26 ef       	ldi	r18, 0xF6	; 246
     a28:	fc 01       	movw	r30, r24
     a2a:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN );
     a2c:	8c eb       	ldi	r24, 0xBC	; 188
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	24 e8       	ldi	r18, 0x84	; 132
     a32:	fc 01       	movw	r30, r24
     a34:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)));
     a36:	00 00       	nop
     a38:	8c eb       	ldi	r24, 0xBC	; 188
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	fc 01       	movw	r30, r24
     a3e:	80 81       	ld	r24, Z
     a40:	88 23       	and	r24, r24
     a42:	d4 f7       	brge	.-12     	; 0xa38 <getBMPtemp+0x280>
	
	if ( (TWSR & 0xf8) != MT_DATA_ACK)			// Look for slave ACK
     a44:	89 eb       	ldi	r24, 0xB9	; 185
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	fc 01       	movw	r30, r24
     a4a:	80 81       	ld	r24, Z
     a4c:	88 2f       	mov	r24, r24
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	88 7f       	andi	r24, 0xF8	; 248
     a52:	99 27       	eor	r25, r25
     a54:	88 32       	cpi	r24, 0x28	; 40
     a56:	91 05       	cpc	r25, r1
     a58:	19 f0       	breq	.+6      	; 0xa60 <getBMPtemp+0x2a8>
	twiError(8);
     a5a:	88 e0       	ldi	r24, 0x08	; 8
     a5c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <twiError>
	
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); // send Repeated Start and wait...
     a60:	8c eb       	ldi	r24, 0xBC	; 188
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	24 ea       	ldi	r18, 0xA4	; 164
     a66:	fc 01       	movw	r30, r24
     a68:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)));
     a6a:	00 00       	nop
     a6c:	8c eb       	ldi	r24, 0xBC	; 188
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	fc 01       	movw	r30, r24
     a72:	80 81       	ld	r24, Z
     a74:	88 23       	and	r24, r24
     a76:	d4 f7       	brge	.-12     	; 0xa6c <getBMPtemp+0x2b4>
	
	TWDR = BMP_SLA_R;							// Send the slave module address + read bit
     a78:	8b eb       	ldi	r24, 0xBB	; 187
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	2f ee       	ldi	r18, 0xEF	; 239
     a7e:	fc 01       	movw	r30, r24
     a80:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (0<<TWSTA) | (0<<TWSTO) | (1<<TWEA) | (1<<TWEN);
     a82:	8c eb       	ldi	r24, 0xBC	; 188
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	24 ec       	ldi	r18, 0xC4	; 196
     a88:	fc 01       	movw	r30, r24
     a8a:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)));
     a8c:	00 00       	nop
     a8e:	8c eb       	ldi	r24, 0xBC	; 188
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	fc 01       	movw	r30, r24
     a94:	80 81       	ld	r24, Z
     a96:	88 23       	and	r24, r24
     a98:	d4 f7       	brge	.-12     	; 0xa8e <getBMPtemp+0x2d6>
	
	if ( (TWSR & 0xf8) != MR_SLA_ACK)			// Look for slave ACK
     a9a:	89 eb       	ldi	r24, 0xB9	; 185
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	fc 01       	movw	r30, r24
     aa0:	80 81       	ld	r24, Z
     aa2:	88 2f       	mov	r24, r24
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	88 7f       	andi	r24, 0xF8	; 248
     aa8:	99 27       	eor	r25, r25
     aaa:	80 34       	cpi	r24, 0x40	; 64
     aac:	91 05       	cpc	r25, r1
     aae:	19 f0       	breq	.+6      	; 0xab6 <getBMPtemp+0x2fe>
	twiError(8);
     ab0:	88 e0       	ldi	r24, 0x08	; 8
     ab2:	0e 94 f6 01 	call	0x3ec	; 0x3ec <twiError>

	TWCR = (0<<TWSTA) | (0<<TWSTO) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);   // Send a RESTART and an ACK after MSB is received
     ab6:	8c eb       	ldi	r24, 0xBC	; 188
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	24 ec       	ldi	r18, 0xC4	; 196
     abc:	fc 01       	movw	r30, r24
     abe:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)));
     ac0:	00 00       	nop
     ac2:	8c eb       	ldi	r24, 0xBC	; 188
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	fc 01       	movw	r30, r24
     ac8:	80 81       	ld	r24, Z
     aca:	88 23       	and	r24, r24
     acc:	d4 f7       	brge	.-12     	; 0xac2 <getBMPtemp+0x30a>
	
	MSB = TWDR;
     ace:	8b eb       	ldi	r24, 0xBB	; 187
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	fc 01       	movw	r30, r24
     ad4:	80 81       	ld	r24, Z
     ad6:	8f 87       	std	Y+15, r24	; 0x0f
	
	TWCR = (0<<TWSTA) | (0<<TWSTO) | (1<<TWINT) | (0<<TWEA) | (1<<TWEN);   // Send a RESTART and a NACK after LSB is received
     ad8:	8c eb       	ldi	r24, 0xBC	; 188
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	24 e8       	ldi	r18, 0x84	; 132
     ade:	fc 01       	movw	r30, r24
     ae0:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)));
     ae2:	00 00       	nop
     ae4:	8c eb       	ldi	r24, 0xBC	; 188
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	fc 01       	movw	r30, r24
     aea:	80 81       	ld	r24, Z
     aec:	88 23       	and	r24, r24
     aee:	d4 f7       	brge	.-12     	; 0xae4 <getBMPtemp+0x32c>

	LSB = TWDR;
     af0:	8b eb       	ldi	r24, 0xBB	; 187
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	fc 01       	movw	r30, r24
     af6:	80 81       	ld	r24, Z
     af8:	88 8b       	std	Y+16, r24	; 0x10
	
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);  // Send a Stop
     afa:	8c eb       	ldi	r24, 0xBC	; 188
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	24 e9       	ldi	r18, 0x94	; 148
     b00:	fc 01       	movw	r30, r24
     b02:	20 83       	st	Z, r18
	
	rawTempData = (MSB << 8) | LSB;
     b04:	8f 85       	ldd	r24, Y+15	; 0x0f
     b06:	88 2f       	mov	r24, r24
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	38 2f       	mov	r19, r24
     b0c:	22 27       	eor	r18, r18
     b0e:	88 89       	ldd	r24, Y+16	; 0x10
     b10:	88 2f       	mov	r24, r24
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	82 2b       	or	r24, r18
     b16:	93 2b       	or	r25, r19
     b18:	aa 27       	eor	r26, r26
     b1a:	97 fd       	sbrc	r25, 7
     b1c:	a0 95       	com	r26
     b1e:	ba 2f       	mov	r27, r26
     b20:	89 8b       	std	Y+17, r24	; 0x11
     b22:	9a 8b       	std	Y+18, r25	; 0x12
     b24:	ab 8b       	std	Y+19, r26	; 0x13
     b26:	bc 8b       	std	Y+20, r27	; 0x14

// Calculate the temperature using the coefficients
	x1=(rawTempData - bmp.ac6) * bmp.ac5 /pow(2, 15);
     b28:	80 91 6e 05 	lds	r24, 0x056E
     b2c:	90 91 6f 05 	lds	r25, 0x056F
     b30:	cc 01       	movw	r24, r24
     b32:	a0 e0       	ldi	r26, 0x00	; 0
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	29 89       	ldd	r18, Y+17	; 0x11
     b38:	3a 89       	ldd	r19, Y+18	; 0x12
     b3a:	4b 89       	ldd	r20, Y+19	; 0x13
     b3c:	5c 89       	ldd	r21, Y+20	; 0x14
     b3e:	28 1b       	sub	r18, r24
     b40:	39 0b       	sbc	r19, r25
     b42:	4a 0b       	sbc	r20, r26
     b44:	5b 0b       	sbc	r21, r27
     b46:	80 91 6c 05 	lds	r24, 0x056C
     b4a:	90 91 6d 05 	lds	r25, 0x056D
     b4e:	cc 01       	movw	r24, r24
     b50:	a0 e0       	ldi	r26, 0x00	; 0
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	bc 01       	movw	r22, r24
     b56:	cd 01       	movw	r24, r26
     b58:	0e 94 3b 1b 	call	0x3676	; 0x3676 <__mulsi3>
     b5c:	dc 01       	movw	r26, r24
     b5e:	cb 01       	movw	r24, r22
     b60:	bc 01       	movw	r22, r24
     b62:	cd 01       	movw	r24, r26
     b64:	0e 94 97 1c 	call	0x392e	; 0x392e <__floatunsisf>
     b68:	dc 01       	movw	r26, r24
     b6a:	cb 01       	movw	r24, r22
     b6c:	20 e0       	ldi	r18, 0x00	; 0
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	57 e4       	ldi	r21, 0x47	; 71
     b74:	bc 01       	movw	r22, r24
     b76:	cd 01       	movw	r24, r26
     b78:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__divsf3>
     b7c:	dc 01       	movw	r26, r24
     b7e:	cb 01       	movw	r24, r22
     b80:	bc 01       	movw	r22, r24
     b82:	cd 01       	movw	r24, r26
     b84:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__fixsfsi>
     b88:	dc 01       	movw	r26, r24
     b8a:	cb 01       	movw	r24, r22
     b8c:	89 83       	std	Y+1, r24	; 0x01
     b8e:	9a 83       	std	Y+2, r25	; 0x02
     b90:	ab 83       	std	Y+3, r26	; 0x03
     b92:	bc 83       	std	Y+4, r27	; 0x04
	x2 = bmp.mc * pow(2, 11)/(x1 + bmp.md);
     b94:	80 91 76 05 	lds	r24, 0x0576
     b98:	90 91 77 05 	lds	r25, 0x0577
     b9c:	aa 27       	eor	r26, r26
     b9e:	97 fd       	sbrc	r25, 7
     ba0:	a0 95       	com	r26
     ba2:	ba 2f       	mov	r27, r26
     ba4:	bc 01       	movw	r22, r24
     ba6:	cd 01       	movw	r24, r26
     ba8:	0e 94 99 1c 	call	0x3932	; 0x3932 <__floatsisf>
     bac:	dc 01       	movw	r26, r24
     bae:	cb 01       	movw	r24, r22
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	40 e0       	ldi	r20, 0x00	; 0
     bb6:	55 e4       	ldi	r21, 0x45	; 69
     bb8:	bc 01       	movw	r22, r24
     bba:	cd 01       	movw	r24, r26
     bbc:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
     bc0:	dc 01       	movw	r26, r24
     bc2:	cb 01       	movw	r24, r22
     bc4:	6c 01       	movw	r12, r24
     bc6:	7d 01       	movw	r14, r26
     bc8:	80 91 78 05 	lds	r24, 0x0578
     bcc:	90 91 79 05 	lds	r25, 0x0579
     bd0:	9c 01       	movw	r18, r24
     bd2:	44 27       	eor	r20, r20
     bd4:	37 fd       	sbrc	r19, 7
     bd6:	40 95       	com	r20
     bd8:	54 2f       	mov	r21, r20
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	9a 81       	ldd	r25, Y+2	; 0x02
     bde:	ab 81       	ldd	r26, Y+3	; 0x03
     be0:	bc 81       	ldd	r27, Y+4	; 0x04
     be2:	82 0f       	add	r24, r18
     be4:	93 1f       	adc	r25, r19
     be6:	a4 1f       	adc	r26, r20
     be8:	b5 1f       	adc	r27, r21
     bea:	bc 01       	movw	r22, r24
     bec:	cd 01       	movw	r24, r26
     bee:	0e 94 99 1c 	call	0x3932	; 0x3932 <__floatsisf>
     bf2:	dc 01       	movw	r26, r24
     bf4:	cb 01       	movw	r24, r22
     bf6:	9c 01       	movw	r18, r24
     bf8:	ad 01       	movw	r20, r26
     bfa:	c7 01       	movw	r24, r14
     bfc:	b6 01       	movw	r22, r12
     bfe:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__divsf3>
     c02:	dc 01       	movw	r26, r24
     c04:	cb 01       	movw	r24, r22
     c06:	bc 01       	movw	r22, r24
     c08:	cd 01       	movw	r24, r26
     c0a:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__fixsfsi>
     c0e:	dc 01       	movw	r26, r24
     c10:	cb 01       	movw	r24, r22
     c12:	8d 83       	std	Y+5, r24	; 0x05
     c14:	9e 83       	std	Y+6, r25	; 0x06
     c16:	af 83       	std	Y+7, r26	; 0x07
     c18:	b8 87       	std	Y+8, r27	; 0x08
	b5 = x1 + x2;
     c1a:	29 81       	ldd	r18, Y+1	; 0x01
     c1c:	3a 81       	ldd	r19, Y+2	; 0x02
     c1e:	4b 81       	ldd	r20, Y+3	; 0x03
     c20:	5c 81       	ldd	r21, Y+4	; 0x04
     c22:	8d 81       	ldd	r24, Y+5	; 0x05
     c24:	9e 81       	ldd	r25, Y+6	; 0x06
     c26:	af 81       	ldd	r26, Y+7	; 0x07
     c28:	b8 85       	ldd	r27, Y+8	; 0x08
     c2a:	82 0f       	add	r24, r18
     c2c:	93 1f       	adc	r25, r19
     c2e:	a4 1f       	adc	r26, r20
     c30:	b5 1f       	adc	r27, r21
     c32:	89 87       	std	Y+9, r24	; 0x09
     c34:	9a 87       	std	Y+10, r25	; 0x0a
     c36:	ab 87       	std	Y+11, r26	; 0x0b
     c38:	bc 87       	std	Y+12, r27	; 0x0c

// Save this to a global for use in calculating the pressure	
	b5_2 = b5;
     c3a:	89 85       	ldd	r24, Y+9	; 0x09
     c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c3e:	ab 85       	ldd	r26, Y+11	; 0x0b
     c40:	bc 85       	ldd	r27, Y+12	; 0x0c
     c42:	80 93 d1 03 	sts	0x03D1, r24
     c46:	90 93 d2 03 	sts	0x03D2, r25
     c4a:	a0 93 d3 03 	sts	0x03D3, r26
     c4e:	b0 93 d4 03 	sts	0x03D4, r27
	
	t = (b5 + 8)/pow(2, 4);
     c52:	89 85       	ldd	r24, Y+9	; 0x09
     c54:	9a 85       	ldd	r25, Y+10	; 0x0a
     c56:	ab 85       	ldd	r26, Y+11	; 0x0b
     c58:	bc 85       	ldd	r27, Y+12	; 0x0c
     c5a:	08 96       	adiw	r24, 0x08	; 8
     c5c:	a1 1d       	adc	r26, r1
     c5e:	b1 1d       	adc	r27, r1
     c60:	bc 01       	movw	r22, r24
     c62:	cd 01       	movw	r24, r26
     c64:	0e 94 99 1c 	call	0x3932	; 0x3932 <__floatsisf>
     c68:	dc 01       	movw	r26, r24
     c6a:	cb 01       	movw	r24, r22
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	40 e8       	ldi	r20, 0x80	; 128
     c72:	51 e4       	ldi	r21, 0x41	; 65
     c74:	bc 01       	movw	r22, r24
     c76:	cd 01       	movw	r24, r26
     c78:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__divsf3>
     c7c:	dc 01       	movw	r26, r24
     c7e:	cb 01       	movw	r24, r22
     c80:	bc 01       	movw	r22, r24
     c82:	cd 01       	movw	r24, r26
     c84:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__fixsfsi>
     c88:	dc 01       	movw	r26, r24
     c8a:	cb 01       	movw	r24, r22
     c8c:	9e 87       	std	Y+14, r25	; 0x0e
     c8e:	8d 87       	std	Y+13, r24	; 0x0d

// Returns temperature in deg.C
	calcTemp = (double)t / 10;	
     c90:	8d 85       	ldd	r24, Y+13	; 0x0d
     c92:	9e 85       	ldd	r25, Y+14	; 0x0e
     c94:	aa 27       	eor	r26, r26
     c96:	97 fd       	sbrc	r25, 7
     c98:	a0 95       	com	r26
     c9a:	ba 2f       	mov	r27, r26
     c9c:	bc 01       	movw	r22, r24
     c9e:	cd 01       	movw	r24, r26
     ca0:	0e 94 99 1c 	call	0x3932	; 0x3932 <__floatsisf>
     ca4:	dc 01       	movw	r26, r24
     ca6:	cb 01       	movw	r24, r22
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	40 e2       	ldi	r20, 0x20	; 32
     cae:	51 e4       	ldi	r21, 0x41	; 65
     cb0:	bc 01       	movw	r22, r24
     cb2:	cd 01       	movw	r24, r26
     cb4:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__divsf3>
     cb8:	dc 01       	movw	r26, r24
     cba:	cb 01       	movw	r24, r22
     cbc:	8d 8b       	std	Y+21, r24	; 0x15
     cbe:	9e 8b       	std	Y+22, r25	; 0x16
     cc0:	af 8b       	std	Y+23, r26	; 0x17
     cc2:	b8 8f       	std	Y+24, r27	; 0x18
	return calcTemp;
     cc4:	8d 89       	ldd	r24, Y+21	; 0x15
     cc6:	9e 89       	ldd	r25, Y+22	; 0x16
     cc8:	af 89       	ldd	r26, Y+23	; 0x17
     cca:	b8 8d       	ldd	r27, Y+24	; 0x18
}
     ccc:	bc 01       	movw	r22, r24
     cce:	cd 01       	movw	r24, r26
     cd0:	a6 96       	adiw	r28, 0x26	; 38
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	f8 94       	cli
     cd6:	de bf       	out	0x3e, r29	; 62
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	cd bf       	out	0x3d, r28	; 61
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	ff 90       	pop	r15
     ce2:	ef 90       	pop	r14
     ce4:	df 90       	pop	r13
     ce6:	cf 90       	pop	r12
     ce8:	08 95       	ret

00000cea <getBMPpressure>:

double getBMPpressure(uint16_t height) {
     cea:	8f 92       	push	r8
     cec:	9f 92       	push	r9
     cee:	af 92       	push	r10
     cf0:	bf 92       	push	r11
     cf2:	cf 92       	push	r12
     cf4:	df 92       	push	r13
     cf6:	ef 92       	push	r14
     cf8:	ff 92       	push	r15
     cfa:	0f 93       	push	r16
     cfc:	1f 93       	push	r17
     cfe:	cf 93       	push	r28
     d00:	df 93       	push	r29
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	c4 55       	subi	r28, 0x54	; 84
     d08:	d1 09       	sbc	r29, r1
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	f8 94       	cli
     d0e:	de bf       	out	0x3e, r29	; 62
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	cd bf       	out	0x3d, r28	; 61
     d14:	9e 01       	movw	r18, r28
     d16:	25 5b       	subi	r18, 0xB5	; 181
     d18:	3f 4f       	sbci	r19, 0xFF	; 255
     d1a:	f9 01       	movw	r30, r18
     d1c:	91 83       	std	Z+1, r25	; 0x01
     d1e:	80 83       	st	Z, r24
	int32_t b3, b6;
	uint32_t b4, b7;
	int32_t x1, x2, x3;
	int32_t p;	
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);		// send Start
     d20:	8c eb       	ldi	r24, 0xBC	; 188
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	24 ea       	ldi	r18, 0xA4	; 164
     d26:	fc 01       	movw	r30, r24
     d28:	20 83       	st	Z, r18
	while ( !(TWCR & (1<<TWINT) ) );			// Wait for Start to be transmitted
     d2a:	00 00       	nop
     d2c:	8c eb       	ldi	r24, 0xBC	; 188
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	fc 01       	movw	r30, r24
     d32:	80 81       	ld	r24, Z
     d34:	88 23       	and	r24, r24
     d36:	d4 f7       	brge	.-12     	; 0xd2c <getBMPpressure+0x42>
	
	if ( (TWSR & 0xf8) != START)
     d38:	89 eb       	ldi	r24, 0xB9	; 185
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	fc 01       	movw	r30, r24
     d3e:	80 81       	ld	r24, Z
     d40:	88 2f       	mov	r24, r24
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	88 7f       	andi	r24, 0xF8	; 248
     d46:	99 27       	eor	r25, r25
     d48:	88 30       	cpi	r24, 0x08	; 8
     d4a:	91 05       	cpc	r25, r1
     d4c:	19 f0       	breq	.+6      	; 0xd54 <getBMPpressure+0x6a>
	twiError(5);
     d4e:	85 e0       	ldi	r24, 0x05	; 5
     d50:	0e 94 f6 01 	call	0x3ec	; 0x3ec <twiError>
	
	TWDR = BMP_SLA_W;							// Send the slave module address + write bit
     d54:	8b eb       	ldi	r24, 0xBB	; 187
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	2e ee       	ldi	r18, 0xEE	; 238
     d5a:	fc 01       	movw	r30, r24
     d5c:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);				// Transmit the address
     d5e:	8c eb       	ldi	r24, 0xBC	; 188
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	24 e8       	ldi	r18, 0x84	; 132
     d64:	fc 01       	movw	r30, r24
     d66:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)));
     d68:	00 00       	nop
     d6a:	8c eb       	ldi	r24, 0xBC	; 188
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	fc 01       	movw	r30, r24
     d70:	80 81       	ld	r24, Z
     d72:	88 23       	and	r24, r24
     d74:	d4 f7       	brge	.-12     	; 0xd6a <getBMPpressure+0x80>
	
	if ( (TWSR & 0xf8) != SL_ACK)				// Look for slave ACK
     d76:	89 eb       	ldi	r24, 0xB9	; 185
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	fc 01       	movw	r30, r24
     d7c:	80 81       	ld	r24, Z
     d7e:	88 2f       	mov	r24, r24
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	88 7f       	andi	r24, 0xF8	; 248
     d84:	99 27       	eor	r25, r25
     d86:	88 31       	cpi	r24, 0x18	; 24
     d88:	91 05       	cpc	r25, r1
     d8a:	19 f0       	breq	.+6      	; 0xd92 <getBMPpressure+0xa8>
	twiError(6);
     d8c:	86 e0       	ldi	r24, 0x06	; 6
     d8e:	0e 94 f6 01 	call	0x3ec	; 0x3ec <twiError>
	
	TWDR = 0xf4;								// Send the control register address
     d92:	8b eb       	ldi	r24, 0xBB	; 187
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	24 ef       	ldi	r18, 0xF4	; 244
     d98:	fc 01       	movw	r30, r24
     d9a:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN );
     d9c:	8c eb       	ldi	r24, 0xBC	; 188
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	24 e8       	ldi	r18, 0x84	; 132
     da2:	fc 01       	movw	r30, r24
     da4:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)));
     da6:	00 00       	nop
     da8:	8c eb       	ldi	r24, 0xBC	; 188
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	fc 01       	movw	r30, r24
     dae:	80 81       	ld	r24, Z
     db0:	88 23       	and	r24, r24
     db2:	d4 f7       	brge	.-12     	; 0xda8 <getBMPpressure+0xbe>
	
	if ( (TWSR & 0xf8) != MT_DATA_ACK)			// Look for slave ACK
     db4:	89 eb       	ldi	r24, 0xB9	; 185
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	fc 01       	movw	r30, r24
     dba:	80 81       	ld	r24, Z
     dbc:	88 2f       	mov	r24, r24
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	88 7f       	andi	r24, 0xF8	; 248
     dc2:	99 27       	eor	r25, r25
     dc4:	88 32       	cpi	r24, 0x28	; 40
     dc6:	91 05       	cpc	r25, r1
     dc8:	19 f0       	breq	.+6      	; 0xdd0 <getBMPpressure+0xe6>
	twiError(7);
     dca:	87 e0       	ldi	r24, 0x07	; 7
     dcc:	0e 94 f6 01 	call	0x3ec	; 0x3ec <twiError>
	
//	TWDR = 0x34;								// Send the control register data
	TWDR = 0xf4;								// Send the control register data
     dd0:	8b eb       	ldi	r24, 0xBB	; 187
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	24 ef       	ldi	r18, 0xF4	; 244
     dd6:	fc 01       	movw	r30, r24
     dd8:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN );
     dda:	8c eb       	ldi	r24, 0xBC	; 188
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	24 e8       	ldi	r18, 0x84	; 132
     de0:	fc 01       	movw	r30, r24
     de2:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)));
     de4:	00 00       	nop
     de6:	8c eb       	ldi	r24, 0xBC	; 188
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	fc 01       	movw	r30, r24
     dec:	80 81       	ld	r24, Z
     dee:	88 23       	and	r24, r24
     df0:	d4 f7       	brge	.-12     	; 0xde6 <getBMPpressure+0xfc>
	
	if ( (TWSR & 0xf8) != MT_DATA_ACK)			// Look for slave ACK
     df2:	89 eb       	ldi	r24, 0xB9	; 185
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	fc 01       	movw	r30, r24
     df8:	80 81       	ld	r24, Z
     dfa:	88 2f       	mov	r24, r24
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	88 7f       	andi	r24, 0xF8	; 248
     e00:	99 27       	eor	r25, r25
     e02:	88 32       	cpi	r24, 0x28	; 40
     e04:	91 05       	cpc	r25, r1
     e06:	19 f0       	breq	.+6      	; 0xe0e <getBMPpressure+0x124>
	twiError(8);
     e08:	88 e0       	ldi	r24, 0x08	; 8
     e0a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <twiError>
	
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);  // Send a Stop	
     e0e:	8c eb       	ldi	r24, 0xBC	; 188
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	24 e9       	ldi	r18, 0x94	; 148
     e14:	fc 01       	movw	r30, r24
     e16:	20 83       	st	Z, r18
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	a8 ec       	ldi	r26, 0xC8	; 200
     e1e:	b2 e4       	ldi	r27, 0x42	; 66
     e20:	9e 01       	movw	r18, r28
     e22:	23 5c       	subi	r18, 0xC3	; 195
     e24:	3f 4f       	sbci	r19, 0xFF	; 255
     e26:	f9 01       	movw	r30, r18
     e28:	80 83       	st	Z, r24
     e2a:	91 83       	std	Z+1, r25	; 0x01
     e2c:	a2 83       	std	Z+2, r26	; 0x02
     e2e:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e30:	8e 01       	movw	r16, r28
     e32:	0f 5b       	subi	r16, 0xBF	; 191
     e34:	1f 4f       	sbci	r17, 0xFF	; 255
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	4a e7       	ldi	r20, 0x7A	; 122
     e3c:	55 e4       	ldi	r21, 0x45	; 69
     e3e:	ce 01       	movw	r24, r28
     e40:	cd 96       	adiw	r24, 0x3d	; 61
     e42:	fc 01       	movw	r30, r24
     e44:	60 81       	ld	r22, Z
     e46:	71 81       	ldd	r23, Z+1	; 0x01
     e48:	82 81       	ldd	r24, Z+2	; 0x02
     e4a:	93 81       	ldd	r25, Z+3	; 0x03
     e4c:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	f8 01       	movw	r30, r16
     e56:	80 83       	st	Z, r24
     e58:	91 83       	std	Z+1, r25	; 0x01
     e5a:	a2 83       	std	Z+2, r26	; 0x02
     e5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e5e:	ce 01       	movw	r24, r28
     e60:	8f 5b       	subi	r24, 0xBF	; 191
     e62:	9f 4f       	sbci	r25, 0xFF	; 255
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	40 e8       	ldi	r20, 0x80	; 128
     e6a:	5f e3       	ldi	r21, 0x3F	; 63
     e6c:	fc 01       	movw	r30, r24
     e6e:	60 81       	ld	r22, Z
     e70:	71 81       	ldd	r23, Z+1	; 0x01
     e72:	82 81       	ldd	r24, Z+2	; 0x02
     e74:	93 81       	ldd	r25, Z+3	; 0x03
     e76:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__cmpsf2>
     e7a:	88 23       	and	r24, r24
     e7c:	4c f4       	brge	.+18     	; 0xe90 <getBMPpressure+0x1a6>
		__ticks = 1;
     e7e:	ce 01       	movw	r24, r28
     e80:	8b 5b       	subi	r24, 0xBB	; 187
     e82:	9f 4f       	sbci	r25, 0xFF	; 255
     e84:	21 e0       	ldi	r18, 0x01	; 1
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	fc 01       	movw	r30, r24
     e8a:	31 83       	std	Z+1, r19	; 0x01
     e8c:	20 83       	st	Z, r18
     e8e:	6c c0       	rjmp	.+216    	; 0xf68 <getBMPpressure+0x27e>
	else if (__tmp > 65535)
     e90:	ce 01       	movw	r24, r28
     e92:	8f 5b       	subi	r24, 0xBF	; 191
     e94:	9f 4f       	sbci	r25, 0xFF	; 255
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	3f ef       	ldi	r19, 0xFF	; 255
     e9a:	4f e7       	ldi	r20, 0x7F	; 127
     e9c:	57 e4       	ldi	r21, 0x47	; 71
     e9e:	fc 01       	movw	r30, r24
     ea0:	60 81       	ld	r22, Z
     ea2:	71 81       	ldd	r23, Z+1	; 0x01
     ea4:	82 81       	ldd	r24, Z+2	; 0x02
     ea6:	93 81       	ldd	r25, Z+3	; 0x03
     ea8:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <__gesf2>
     eac:	18 16       	cp	r1, r24
     eae:	0c f0       	brlt	.+2      	; 0xeb2 <getBMPpressure+0x1c8>
     eb0:	49 c0       	rjmp	.+146    	; 0xf44 <getBMPpressure+0x25a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	40 e2       	ldi	r20, 0x20	; 32
     eb8:	51 e4       	ldi	r21, 0x41	; 65
     eba:	ce 01       	movw	r24, r28
     ebc:	cd 96       	adiw	r24, 0x3d	; 61
     ebe:	fc 01       	movw	r30, r24
     ec0:	60 81       	ld	r22, Z
     ec2:	71 81       	ldd	r23, Z+1	; 0x01
     ec4:	82 81       	ldd	r24, Z+2	; 0x02
     ec6:	93 81       	ldd	r25, Z+3	; 0x03
     ec8:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	8e 01       	movw	r16, r28
     ed2:	0b 5b       	subi	r16, 0xBB	; 187
     ed4:	1f 4f       	sbci	r17, 0xFF	; 255
     ed6:	bc 01       	movw	r22, r24
     ed8:	cd 01       	movw	r24, r26
     eda:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <__fixunssfsi>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	f8 01       	movw	r30, r16
     ee4:	91 83       	std	Z+1, r25	; 0x01
     ee6:	80 83       	st	Z, r24
     ee8:	24 c0       	rjmp	.+72     	; 0xf32 <getBMPpressure+0x248>
     eea:	ce 01       	movw	r24, r28
     eec:	89 5b       	subi	r24, 0xB9	; 185
     eee:	9f 4f       	sbci	r25, 0xFF	; 255
     ef0:	20 e9       	ldi	r18, 0x90	; 144
     ef2:	31 e0       	ldi	r19, 0x01	; 1
     ef4:	fc 01       	movw	r30, r24
     ef6:	31 83       	std	Z+1, r19	; 0x01
     ef8:	20 83       	st	Z, r18
     efa:	ce 01       	movw	r24, r28
     efc:	89 5b       	subi	r24, 0xB9	; 185
     efe:	9f 4f       	sbci	r25, 0xFF	; 255
     f00:	fc 01       	movw	r30, r24
     f02:	80 81       	ld	r24, Z
     f04:	91 81       	ldd	r25, Z+1	; 0x01
     f06:	01 97       	sbiw	r24, 0x01	; 1
     f08:	f1 f7       	brne	.-4      	; 0xf06 <getBMPpressure+0x21c>
     f0a:	9e 01       	movw	r18, r28
     f0c:	29 5b       	subi	r18, 0xB9	; 185
     f0e:	3f 4f       	sbci	r19, 0xFF	; 255
     f10:	f9 01       	movw	r30, r18
     f12:	91 83       	std	Z+1, r25	; 0x01
     f14:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f16:	ce 01       	movw	r24, r28
     f18:	8b 5b       	subi	r24, 0xBB	; 187
     f1a:	9f 4f       	sbci	r25, 0xFF	; 255
     f1c:	9e 01       	movw	r18, r28
     f1e:	2b 5b       	subi	r18, 0xBB	; 187
     f20:	3f 4f       	sbci	r19, 0xFF	; 255
     f22:	f9 01       	movw	r30, r18
     f24:	20 81       	ld	r18, Z
     f26:	31 81       	ldd	r19, Z+1	; 0x01
     f28:	21 50       	subi	r18, 0x01	; 1
     f2a:	31 09       	sbc	r19, r1
     f2c:	fc 01       	movw	r30, r24
     f2e:	31 83       	std	Z+1, r19	; 0x01
     f30:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f32:	ce 01       	movw	r24, r28
     f34:	8b 5b       	subi	r24, 0xBB	; 187
     f36:	9f 4f       	sbci	r25, 0xFF	; 255
     f38:	fc 01       	movw	r30, r24
     f3a:	80 81       	ld	r24, Z
     f3c:	91 81       	ldd	r25, Z+1	; 0x01
     f3e:	00 97       	sbiw	r24, 0x00	; 0
     f40:	a1 f6       	brne	.-88     	; 0xeea <getBMPpressure+0x200>
     f42:	2c c0       	rjmp	.+88     	; 0xf9c <getBMPpressure+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f44:	8e 01       	movw	r16, r28
     f46:	0b 5b       	subi	r16, 0xBB	; 187
     f48:	1f 4f       	sbci	r17, 0xFF	; 255
     f4a:	ce 01       	movw	r24, r28
     f4c:	8f 5b       	subi	r24, 0xBF	; 191
     f4e:	9f 4f       	sbci	r25, 0xFF	; 255
     f50:	fc 01       	movw	r30, r24
     f52:	60 81       	ld	r22, Z
     f54:	71 81       	ldd	r23, Z+1	; 0x01
     f56:	82 81       	ldd	r24, Z+2	; 0x02
     f58:	93 81       	ldd	r25, Z+3	; 0x03
     f5a:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <__fixunssfsi>
     f5e:	dc 01       	movw	r26, r24
     f60:	cb 01       	movw	r24, r22
     f62:	f8 01       	movw	r30, r16
     f64:	91 83       	std	Z+1, r25	; 0x01
     f66:	80 83       	st	Z, r24
     f68:	ce 01       	movw	r24, r28
     f6a:	87 5b       	subi	r24, 0xB7	; 183
     f6c:	9f 4f       	sbci	r25, 0xFF	; 255
     f6e:	9e 01       	movw	r18, r28
     f70:	2b 5b       	subi	r18, 0xBB	; 187
     f72:	3f 4f       	sbci	r19, 0xFF	; 255
     f74:	f9 01       	movw	r30, r18
     f76:	20 81       	ld	r18, Z
     f78:	31 81       	ldd	r19, Z+1	; 0x01
     f7a:	fc 01       	movw	r30, r24
     f7c:	31 83       	std	Z+1, r19	; 0x01
     f7e:	20 83       	st	Z, r18
     f80:	ce 01       	movw	r24, r28
     f82:	87 5b       	subi	r24, 0xB7	; 183
     f84:	9f 4f       	sbci	r25, 0xFF	; 255
     f86:	fc 01       	movw	r30, r24
     f88:	80 81       	ld	r24, Z
     f8a:	91 81       	ldd	r25, Z+1	; 0x01
     f8c:	01 97       	sbiw	r24, 0x01	; 1
     f8e:	f1 f7       	brne	.-4      	; 0xf8c <getBMPpressure+0x2a2>
     f90:	9e 01       	movw	r18, r28
     f92:	27 5b       	subi	r18, 0xB7	; 183
     f94:	3f 4f       	sbci	r19, 0xFF	; 255
     f96:	f9 01       	movw	r30, r18
     f98:	91 83       	std	Z+1, r25	; 0x01
     f9a:	80 83       	st	Z, r24

//	_delay_ms(10);	
	_delay_ms(100);
	
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);		// send Start
     f9c:	8c eb       	ldi	r24, 0xBC	; 188
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	24 ea       	ldi	r18, 0xA4	; 164
     fa2:	fc 01       	movw	r30, r24
     fa4:	20 83       	st	Z, r18
	while ( !(TWCR & (1<<TWINT) ) );			// Wait for Start to be transmitted	
     fa6:	00 00       	nop
     fa8:	8c eb       	ldi	r24, 0xBC	; 188
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	fc 01       	movw	r30, r24
     fae:	80 81       	ld	r24, Z
     fb0:	88 23       	and	r24, r24
     fb2:	d4 f7       	brge	.-12     	; 0xfa8 <getBMPpressure+0x2be>
	
	TWDR = BMP_SLA_W;							// Send the slave module address + write bit
     fb4:	8b eb       	ldi	r24, 0xBB	; 187
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	2e ee       	ldi	r18, 0xEE	; 238
     fba:	fc 01       	movw	r30, r24
     fbc:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);				// Transmit the address
     fbe:	8c eb       	ldi	r24, 0xBC	; 188
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	24 e8       	ldi	r18, 0x84	; 132
     fc4:	fc 01       	movw	r30, r24
     fc6:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)));
     fc8:	00 00       	nop
     fca:	8c eb       	ldi	r24, 0xBC	; 188
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	fc 01       	movw	r30, r24
     fd0:	80 81       	ld	r24, Z
     fd2:	88 23       	and	r24, r24
     fd4:	d4 f7       	brge	.-12     	; 0xfca <getBMPpressure+0x2e0>
	
	if ( (TWSR & 0xf8) != SL_ACK)				// Look for slave ACK
     fd6:	89 eb       	ldi	r24, 0xB9	; 185
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	fc 01       	movw	r30, r24
     fdc:	80 81       	ld	r24, Z
     fde:	88 2f       	mov	r24, r24
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	88 7f       	andi	r24, 0xF8	; 248
     fe4:	99 27       	eor	r25, r25
     fe6:	88 31       	cpi	r24, 0x18	; 24
     fe8:	91 05       	cpc	r25, r1
     fea:	19 f0       	breq	.+6      	; 0xff2 <getBMPpressure+0x308>
	twiError(6);
     fec:	86 e0       	ldi	r24, 0x06	; 6
     fee:	0e 94 f6 01 	call	0x3ec	; 0x3ec <twiError>
	
	TWDR = 0xf6;								// Send the address of the AD MSB
     ff2:	8b eb       	ldi	r24, 0xBB	; 187
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	26 ef       	ldi	r18, 0xF6	; 246
     ff8:	fc 01       	movw	r30, r24
     ffa:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN );
     ffc:	8c eb       	ldi	r24, 0xBC	; 188
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	24 e8       	ldi	r18, 0x84	; 132
    1002:	fc 01       	movw	r30, r24
    1004:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)));
    1006:	00 00       	nop
    1008:	8c eb       	ldi	r24, 0xBC	; 188
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	fc 01       	movw	r30, r24
    100e:	80 81       	ld	r24, Z
    1010:	88 23       	and	r24, r24
    1012:	d4 f7       	brge	.-12     	; 0x1008 <getBMPpressure+0x31e>
	
	if ( (TWSR & 0xf8) != MT_DATA_ACK)			// Look for slave ACK
    1014:	89 eb       	ldi	r24, 0xB9	; 185
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	fc 01       	movw	r30, r24
    101a:	80 81       	ld	r24, Z
    101c:	88 2f       	mov	r24, r24
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	88 7f       	andi	r24, 0xF8	; 248
    1022:	99 27       	eor	r25, r25
    1024:	88 32       	cpi	r24, 0x28	; 40
    1026:	91 05       	cpc	r25, r1
    1028:	19 f0       	breq	.+6      	; 0x1030 <getBMPpressure+0x346>
	twiError(8);
    102a:	88 e0       	ldi	r24, 0x08	; 8
    102c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <twiError>
	
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); // send Repeated Start and wait...
    1030:	8c eb       	ldi	r24, 0xBC	; 188
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	24 ea       	ldi	r18, 0xA4	; 164
    1036:	fc 01       	movw	r30, r24
    1038:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)));
    103a:	00 00       	nop
    103c:	8c eb       	ldi	r24, 0xBC	; 188
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	fc 01       	movw	r30, r24
    1042:	80 81       	ld	r24, Z
    1044:	88 23       	and	r24, r24
    1046:	d4 f7       	brge	.-12     	; 0x103c <getBMPpressure+0x352>
	
	TWDR = BMP_SLA_R;							// Send the slave module address + read bit
    1048:	8b eb       	ldi	r24, 0xBB	; 187
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	2f ee       	ldi	r18, 0xEF	; 239
    104e:	fc 01       	movw	r30, r24
    1050:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (0<<TWSTA) | (0<<TWSTO) | (1<<TWEA) | (1<<TWEN);
    1052:	8c eb       	ldi	r24, 0xBC	; 188
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	24 ec       	ldi	r18, 0xC4	; 196
    1058:	fc 01       	movw	r30, r24
    105a:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)));
    105c:	00 00       	nop
    105e:	8c eb       	ldi	r24, 0xBC	; 188
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	fc 01       	movw	r30, r24
    1064:	80 81       	ld	r24, Z
    1066:	88 23       	and	r24, r24
    1068:	d4 f7       	brge	.-12     	; 0x105e <getBMPpressure+0x374>
	
	if ( (TWSR & 0xf8) != MR_SLA_ACK)			// Look for slave ACK
    106a:	89 eb       	ldi	r24, 0xB9	; 185
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	fc 01       	movw	r30, r24
    1070:	80 81       	ld	r24, Z
    1072:	88 2f       	mov	r24, r24
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	88 7f       	andi	r24, 0xF8	; 248
    1078:	99 27       	eor	r25, r25
    107a:	80 34       	cpi	r24, 0x40	; 64
    107c:	91 05       	cpc	r25, r1
    107e:	19 f0       	breq	.+6      	; 0x1086 <getBMPpressure+0x39c>
	twiError(8);
    1080:	88 e0       	ldi	r24, 0x08	; 8
    1082:	0e 94 f6 01 	call	0x3ec	; 0x3ec <twiError>

	TWCR = (0<<TWSTA) | (0<<TWSTO) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);   // Send a RESTART and an ACK after MSB is received
    1086:	8c eb       	ldi	r24, 0xBC	; 188
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	24 ec       	ldi	r18, 0xC4	; 196
    108c:	fc 01       	movw	r30, r24
    108e:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)));
    1090:	00 00       	nop
    1092:	8c eb       	ldi	r24, 0xBC	; 188
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	fc 01       	movw	r30, r24
    1098:	80 81       	ld	r24, Z
    109a:	88 23       	and	r24, r24
    109c:	d4 f7       	brge	.-12     	; 0x1092 <getBMPpressure+0x3a8>
	
	MSB2 = TWDR;
    109e:	8b eb       	ldi	r24, 0xBB	; 187
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	fc 01       	movw	r30, r24
    10a4:	80 81       	ld	r24, Z
    10a6:	88 2f       	mov	r24, r24
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	a0 e0       	ldi	r26, 0x00	; 0
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	8d 83       	std	Y+5, r24	; 0x05
    10b0:	9e 83       	std	Y+6, r25	; 0x06
    10b2:	af 83       	std	Y+7, r26	; 0x07
    10b4:	b8 87       	std	Y+8, r27	; 0x08
	
	TWCR = (0<<TWSTA) | (0<<TWSTO) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);   // Send a RESTART and an ACK after LSB is received
    10b6:	8c eb       	ldi	r24, 0xBC	; 188
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	24 ec       	ldi	r18, 0xC4	; 196
    10bc:	fc 01       	movw	r30, r24
    10be:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)));
    10c0:	00 00       	nop
    10c2:	8c eb       	ldi	r24, 0xBC	; 188
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	fc 01       	movw	r30, r24
    10c8:	80 81       	ld	r24, Z
    10ca:	88 23       	and	r24, r24
    10cc:	d4 f7       	brge	.-12     	; 0x10c2 <getBMPpressure+0x3d8>
	
	LSB2 = TWDR;
    10ce:	8b eb       	ldi	r24, 0xBB	; 187
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	fc 01       	movw	r30, r24
    10d4:	80 81       	ld	r24, Z
    10d6:	88 2f       	mov	r24, r24
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	a0 e0       	ldi	r26, 0x00	; 0
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	89 87       	std	Y+9, r24	; 0x09
    10e0:	9a 87       	std	Y+10, r25	; 0x0a
    10e2:	ab 87       	std	Y+11, r26	; 0x0b
    10e4:	bc 87       	std	Y+12, r27	; 0x0c
	
	TWCR = (0<<TWSTA) | (0<<TWSTO) | (1<<TWINT) | (0<<TWEA) | (1<<TWEN);   // Send a RESTART and a NACK after LSB2 is received
    10e6:	8c eb       	ldi	r24, 0xBC	; 188
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	24 e8       	ldi	r18, 0x84	; 132
    10ec:	fc 01       	movw	r30, r24
    10ee:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)));
    10f0:	00 00       	nop
    10f2:	8c eb       	ldi	r24, 0xBC	; 188
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	fc 01       	movw	r30, r24
    10f8:	80 81       	ld	r24, Z
    10fa:	88 23       	and	r24, r24
    10fc:	d4 f7       	brge	.-12     	; 0x10f2 <getBMPpressure+0x408>

	XLSB = TWDR;
    10fe:	8b eb       	ldi	r24, 0xBB	; 187
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	fc 01       	movw	r30, r24
    1104:	80 81       	ld	r24, Z
    1106:	88 2f       	mov	r24, r24
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	a0 e0       	ldi	r26, 0x00	; 0
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	8d 87       	std	Y+13, r24	; 0x0d
    1110:	9e 87       	std	Y+14, r25	; 0x0e
    1112:	af 87       	std	Y+15, r26	; 0x0f
    1114:	b8 8b       	std	Y+16, r27	; 0x10
//	LSB2 = TWDR;
	
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);  // Send a Stop
    1116:	8c eb       	ldi	r24, 0xBC	; 188
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	24 e9       	ldi	r18, 0x94	; 148
    111c:	fc 01       	movw	r30, r24
    111e:	20 83       	st	Z, r18
	
//	rawPressureData = ( (MSB2 << 8) & 0xff00) | LSB2;
	rawPressureData = (((MSB2 << 16) & 0xFF0000) + ((LSB2 << 8) & 0xFF00) + (XLSB & 0xFF)) >> (8 - oss);
    1120:	8d 81       	ldd	r24, Y+5	; 0x05
    1122:	9e 81       	ldd	r25, Y+6	; 0x06
    1124:	af 81       	ldd	r26, Y+7	; 0x07
    1126:	b8 85       	ldd	r27, Y+8	; 0x08
    1128:	dc 01       	movw	r26, r24
    112a:	99 27       	eor	r25, r25
    112c:	88 27       	eor	r24, r24
    112e:	9c 01       	movw	r18, r24
    1130:	ad 01       	movw	r20, r26
    1132:	22 27       	eor	r18, r18
    1134:	33 27       	eor	r19, r19
    1136:	55 27       	eor	r21, r21
    1138:	89 85       	ldd	r24, Y+9	; 0x09
    113a:	9a 85       	ldd	r25, Y+10	; 0x0a
    113c:	ab 85       	ldd	r26, Y+11	; 0x0b
    113e:	bc 85       	ldd	r27, Y+12	; 0x0c
    1140:	ba 2f       	mov	r27, r26
    1142:	a9 2f       	mov	r26, r25
    1144:	98 2f       	mov	r25, r24
    1146:	88 27       	eor	r24, r24
    1148:	aa 27       	eor	r26, r26
    114a:	bb 27       	eor	r27, r27
    114c:	28 0f       	add	r18, r24
    114e:	39 1f       	adc	r19, r25
    1150:	4a 1f       	adc	r20, r26
    1152:	5b 1f       	adc	r21, r27
    1154:	8d 85       	ldd	r24, Y+13	; 0x0d
    1156:	9e 85       	ldd	r25, Y+14	; 0x0e
    1158:	af 85       	ldd	r26, Y+15	; 0x0f
    115a:	b8 89       	ldd	r27, Y+16	; 0x10
    115c:	99 27       	eor	r25, r25
    115e:	aa 27       	eor	r26, r26
    1160:	bb 27       	eor	r27, r27
    1162:	82 0f       	add	r24, r18
    1164:	93 1f       	adc	r25, r19
    1166:	a4 1f       	adc	r26, r20
    1168:	b5 1f       	adc	r27, r21
    116a:	20 91 00 02 	lds	r18, 0x0200
    116e:	22 2f       	mov	r18, r18
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	48 e0       	ldi	r20, 0x08	; 8
    1174:	50 e0       	ldi	r21, 0x00	; 0
    1176:	ba 01       	movw	r22, r20
    1178:	62 1b       	sub	r22, r18
    117a:	73 0b       	sbc	r23, r19
    117c:	9b 01       	movw	r18, r22
    117e:	04 c0       	rjmp	.+8      	; 0x1188 <getBMPpressure+0x49e>
    1180:	b6 95       	lsr	r27
    1182:	a7 95       	ror	r26
    1184:	97 95       	ror	r25
    1186:	87 95       	ror	r24
    1188:	2a 95       	dec	r18
    118a:	d2 f7       	brpl	.-12     	; 0x1180 <getBMPpressure+0x496>
    118c:	89 8b       	std	Y+17, r24	; 0x11
    118e:	9a 8b       	std	Y+18, r25	; 0x12
    1190:	ab 8b       	std	Y+19, r26	; 0x13
    1192:	bc 8b       	std	Y+20, r27	; 0x14


// Calculate the absolute pressure 
	b6 = b5_2 - 4000;
    1194:	80 91 d1 03 	lds	r24, 0x03D1
    1198:	90 91 d2 03 	lds	r25, 0x03D2
    119c:	a0 91 d3 03 	lds	r26, 0x03D3
    11a0:	b0 91 d4 03 	lds	r27, 0x03D4
    11a4:	80 5a       	subi	r24, 0xA0	; 160
    11a6:	9f 40       	sbci	r25, 0x0F	; 15
    11a8:	a1 09       	sbc	r26, r1
    11aa:	b1 09       	sbc	r27, r1
    11ac:	8d 8b       	std	Y+21, r24	; 0x15
    11ae:	9e 8b       	std	Y+22, r25	; 0x16
    11b0:	af 8b       	std	Y+23, r26	; 0x17
    11b2:	b8 8f       	std	Y+24, r27	; 0x18
	x1 = (bmp.b2 * (b6 * (b6/pow(2,12)) ) ) / pow(2, 11);
    11b4:	80 91 72 05 	lds	r24, 0x0572
    11b8:	90 91 73 05 	lds	r25, 0x0573
    11bc:	aa 27       	eor	r26, r26
    11be:	97 fd       	sbrc	r25, 7
    11c0:	a0 95       	com	r26
    11c2:	ba 2f       	mov	r27, r26
    11c4:	bc 01       	movw	r22, r24
    11c6:	cd 01       	movw	r24, r26
    11c8:	0e 94 99 1c 	call	0x3932	; 0x3932 <__floatsisf>
    11cc:	6b 01       	movw	r12, r22
    11ce:	7c 01       	movw	r14, r24
    11d0:	6d 89       	ldd	r22, Y+21	; 0x15
    11d2:	7e 89       	ldd	r23, Y+22	; 0x16
    11d4:	8f 89       	ldd	r24, Y+23	; 0x17
    11d6:	98 8d       	ldd	r25, Y+24	; 0x18
    11d8:	0e 94 99 1c 	call	0x3932	; 0x3932 <__floatsisf>
    11dc:	4b 01       	movw	r8, r22
    11de:	5c 01       	movw	r10, r24
    11e0:	6d 89       	ldd	r22, Y+21	; 0x15
    11e2:	7e 89       	ldd	r23, Y+22	; 0x16
    11e4:	8f 89       	ldd	r24, Y+23	; 0x17
    11e6:	98 8d       	ldd	r25, Y+24	; 0x18
    11e8:	0e 94 99 1c 	call	0x3932	; 0x3932 <__floatsisf>
    11ec:	dc 01       	movw	r26, r24
    11ee:	cb 01       	movw	r24, r22
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	40 e8       	ldi	r20, 0x80	; 128
    11f6:	55 e4       	ldi	r21, 0x45	; 69
    11f8:	bc 01       	movw	r22, r24
    11fa:	cd 01       	movw	r24, r26
    11fc:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__divsf3>
    1200:	dc 01       	movw	r26, r24
    1202:	cb 01       	movw	r24, r22
    1204:	9c 01       	movw	r18, r24
    1206:	ad 01       	movw	r20, r26
    1208:	c5 01       	movw	r24, r10
    120a:	b4 01       	movw	r22, r8
    120c:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	9c 01       	movw	r18, r24
    1216:	ad 01       	movw	r20, r26
    1218:	c7 01       	movw	r24, r14
    121a:	b6 01       	movw	r22, r12
    121c:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    1220:	dc 01       	movw	r26, r24
    1222:	cb 01       	movw	r24, r22
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	40 e0       	ldi	r20, 0x00	; 0
    122a:	55 e4       	ldi	r21, 0x45	; 69
    122c:	bc 01       	movw	r22, r24
    122e:	cd 01       	movw	r24, r26
    1230:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__divsf3>
    1234:	dc 01       	movw	r26, r24
    1236:	cb 01       	movw	r24, r22
    1238:	bc 01       	movw	r22, r24
    123a:	cd 01       	movw	r24, r26
    123c:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__fixsfsi>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	89 8f       	std	Y+25, r24	; 0x19
    1246:	9a 8f       	std	Y+26, r25	; 0x1a
    1248:	ab 8f       	std	Y+27, r26	; 0x1b
    124a:	bc 8f       	std	Y+28, r27	; 0x1c
	x2 = bmp.ac2 * (b6 / pow(2, 11));
    124c:	80 91 66 05 	lds	r24, 0x0566
    1250:	90 91 67 05 	lds	r25, 0x0567
    1254:	aa 27       	eor	r26, r26
    1256:	97 fd       	sbrc	r25, 7
    1258:	a0 95       	com	r26
    125a:	ba 2f       	mov	r27, r26
    125c:	bc 01       	movw	r22, r24
    125e:	cd 01       	movw	r24, r26
    1260:	0e 94 99 1c 	call	0x3932	; 0x3932 <__floatsisf>
    1264:	6b 01       	movw	r12, r22
    1266:	7c 01       	movw	r14, r24
    1268:	6d 89       	ldd	r22, Y+21	; 0x15
    126a:	7e 89       	ldd	r23, Y+22	; 0x16
    126c:	8f 89       	ldd	r24, Y+23	; 0x17
    126e:	98 8d       	ldd	r25, Y+24	; 0x18
    1270:	0e 94 99 1c 	call	0x3932	; 0x3932 <__floatsisf>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	40 e0       	ldi	r20, 0x00	; 0
    127e:	55 e4       	ldi	r21, 0x45	; 69
    1280:	bc 01       	movw	r22, r24
    1282:	cd 01       	movw	r24, r26
    1284:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__divsf3>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	9c 01       	movw	r18, r24
    128e:	ad 01       	movw	r20, r26
    1290:	c7 01       	movw	r24, r14
    1292:	b6 01       	movw	r22, r12
    1294:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	bc 01       	movw	r22, r24
    129e:	cd 01       	movw	r24, r26
    12a0:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__fixsfsi>
    12a4:	dc 01       	movw	r26, r24
    12a6:	cb 01       	movw	r24, r22
    12a8:	8d 8f       	std	Y+29, r24	; 0x1d
    12aa:	9e 8f       	std	Y+30, r25	; 0x1e
    12ac:	af 8f       	std	Y+31, r26	; 0x1f
    12ae:	b8 a3       	std	Y+32, r27	; 0x20
	x3 = x1 + x2;
    12b0:	29 8d       	ldd	r18, Y+25	; 0x19
    12b2:	3a 8d       	ldd	r19, Y+26	; 0x1a
    12b4:	4b 8d       	ldd	r20, Y+27	; 0x1b
    12b6:	5c 8d       	ldd	r21, Y+28	; 0x1c
    12b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12bc:	af 8d       	ldd	r26, Y+31	; 0x1f
    12be:	b8 a1       	ldd	r27, Y+32	; 0x20
    12c0:	82 0f       	add	r24, r18
    12c2:	93 1f       	adc	r25, r19
    12c4:	a4 1f       	adc	r26, r20
    12c6:	b5 1f       	adc	r27, r21
    12c8:	89 a3       	std	Y+33, r24	; 0x21
    12ca:	9a a3       	std	Y+34, r25	; 0x22
    12cc:	ab a3       	std	Y+35, r26	; 0x23
    12ce:	bc a3       	std	Y+36, r27	; 0x24
	b3 = ( ( (bmp.ac1 * 4 + x3) << oss) + 2) / 4;
    12d0:	80 91 64 05 	lds	r24, 0x0564
    12d4:	90 91 65 05 	lds	r25, 0x0565
    12d8:	88 0f       	add	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	9c 01       	movw	r18, r24
    12e2:	44 27       	eor	r20, r20
    12e4:	37 fd       	sbrc	r19, 7
    12e6:	40 95       	com	r20
    12e8:	54 2f       	mov	r21, r20
    12ea:	89 a1       	ldd	r24, Y+33	; 0x21
    12ec:	9a a1       	ldd	r25, Y+34	; 0x22
    12ee:	ab a1       	ldd	r26, Y+35	; 0x23
    12f0:	bc a1       	ldd	r27, Y+36	; 0x24
    12f2:	82 0f       	add	r24, r18
    12f4:	93 1f       	adc	r25, r19
    12f6:	a4 1f       	adc	r26, r20
    12f8:	b5 1f       	adc	r27, r21
    12fa:	20 91 00 02 	lds	r18, 0x0200
    12fe:	22 2f       	mov	r18, r18
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	02 2e       	mov	r0, r18
    1304:	04 c0       	rjmp	.+8      	; 0x130e <getBMPpressure+0x624>
    1306:	88 0f       	add	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	aa 1f       	adc	r26, r26
    130c:	bb 1f       	adc	r27, r27
    130e:	0a 94       	dec	r0
    1310:	d2 f7       	brpl	.-12     	; 0x1306 <getBMPpressure+0x61c>
    1312:	02 96       	adiw	r24, 0x02	; 2
    1314:	a1 1d       	adc	r26, r1
    1316:	b1 1d       	adc	r27, r1
    1318:	bb 23       	and	r27, r27
    131a:	1c f4       	brge	.+6      	; 0x1322 <getBMPpressure+0x638>
    131c:	03 96       	adiw	r24, 0x03	; 3
    131e:	a1 1d       	adc	r26, r1
    1320:	b1 1d       	adc	r27, r1
    1322:	b5 95       	asr	r27
    1324:	a7 95       	ror	r26
    1326:	97 95       	ror	r25
    1328:	87 95       	ror	r24
    132a:	b5 95       	asr	r27
    132c:	a7 95       	ror	r26
    132e:	97 95       	ror	r25
    1330:	87 95       	ror	r24
    1332:	8d a3       	std	Y+37, r24	; 0x25
    1334:	9e a3       	std	Y+38, r25	; 0x26
    1336:	af a3       	std	Y+39, r26	; 0x27
    1338:	b8 a7       	std	Y+40, r27	; 0x28
	x1 = bmp.ac3 * (b6 / pow(2, 13));
    133a:	80 91 68 05 	lds	r24, 0x0568
    133e:	90 91 69 05 	lds	r25, 0x0569
    1342:	aa 27       	eor	r26, r26
    1344:	97 fd       	sbrc	r25, 7
    1346:	a0 95       	com	r26
    1348:	ba 2f       	mov	r27, r26
    134a:	bc 01       	movw	r22, r24
    134c:	cd 01       	movw	r24, r26
    134e:	0e 94 99 1c 	call	0x3932	; 0x3932 <__floatsisf>
    1352:	6b 01       	movw	r12, r22
    1354:	7c 01       	movw	r14, r24
    1356:	6d 89       	ldd	r22, Y+21	; 0x15
    1358:	7e 89       	ldd	r23, Y+22	; 0x16
    135a:	8f 89       	ldd	r24, Y+23	; 0x17
    135c:	98 8d       	ldd	r25, Y+24	; 0x18
    135e:	0e 94 99 1c 	call	0x3932	; 0x3932 <__floatsisf>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	40 e0       	ldi	r20, 0x00	; 0
    136c:	56 e4       	ldi	r21, 0x46	; 70
    136e:	bc 01       	movw	r22, r24
    1370:	cd 01       	movw	r24, r26
    1372:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__divsf3>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	9c 01       	movw	r18, r24
    137c:	ad 01       	movw	r20, r26
    137e:	c7 01       	movw	r24, r14
    1380:	b6 01       	movw	r22, r12
    1382:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    1386:	dc 01       	movw	r26, r24
    1388:	cb 01       	movw	r24, r22
    138a:	bc 01       	movw	r22, r24
    138c:	cd 01       	movw	r24, r26
    138e:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__fixsfsi>
    1392:	dc 01       	movw	r26, r24
    1394:	cb 01       	movw	r24, r22
    1396:	89 8f       	std	Y+25, r24	; 0x19
    1398:	9a 8f       	std	Y+26, r25	; 0x1a
    139a:	ab 8f       	std	Y+27, r26	; 0x1b
    139c:	bc 8f       	std	Y+28, r27	; 0x1c
	x2 = (bmp.b1 * (b6 * (b6 / pow(2, 12)) ) ) / pow(2, 16);
    139e:	80 91 70 05 	lds	r24, 0x0570
    13a2:	90 91 71 05 	lds	r25, 0x0571
    13a6:	aa 27       	eor	r26, r26
    13a8:	97 fd       	sbrc	r25, 7
    13aa:	a0 95       	com	r26
    13ac:	ba 2f       	mov	r27, r26
    13ae:	bc 01       	movw	r22, r24
    13b0:	cd 01       	movw	r24, r26
    13b2:	0e 94 99 1c 	call	0x3932	; 0x3932 <__floatsisf>
    13b6:	6b 01       	movw	r12, r22
    13b8:	7c 01       	movw	r14, r24
    13ba:	6d 89       	ldd	r22, Y+21	; 0x15
    13bc:	7e 89       	ldd	r23, Y+22	; 0x16
    13be:	8f 89       	ldd	r24, Y+23	; 0x17
    13c0:	98 8d       	ldd	r25, Y+24	; 0x18
    13c2:	0e 94 99 1c 	call	0x3932	; 0x3932 <__floatsisf>
    13c6:	4b 01       	movw	r8, r22
    13c8:	5c 01       	movw	r10, r24
    13ca:	6d 89       	ldd	r22, Y+21	; 0x15
    13cc:	7e 89       	ldd	r23, Y+22	; 0x16
    13ce:	8f 89       	ldd	r24, Y+23	; 0x17
    13d0:	98 8d       	ldd	r25, Y+24	; 0x18
    13d2:	0e 94 99 1c 	call	0x3932	; 0x3932 <__floatsisf>
    13d6:	dc 01       	movw	r26, r24
    13d8:	cb 01       	movw	r24, r22
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	40 e8       	ldi	r20, 0x80	; 128
    13e0:	55 e4       	ldi	r21, 0x45	; 69
    13e2:	bc 01       	movw	r22, r24
    13e4:	cd 01       	movw	r24, r26
    13e6:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__divsf3>
    13ea:	dc 01       	movw	r26, r24
    13ec:	cb 01       	movw	r24, r22
    13ee:	9c 01       	movw	r18, r24
    13f0:	ad 01       	movw	r20, r26
    13f2:	c5 01       	movw	r24, r10
    13f4:	b4 01       	movw	r22, r8
    13f6:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    13fa:	dc 01       	movw	r26, r24
    13fc:	cb 01       	movw	r24, r22
    13fe:	9c 01       	movw	r18, r24
    1400:	ad 01       	movw	r20, r26
    1402:	c7 01       	movw	r24, r14
    1404:	b6 01       	movw	r22, r12
    1406:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	20 e0       	ldi	r18, 0x00	; 0
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	40 e8       	ldi	r20, 0x80	; 128
    1414:	57 e4       	ldi	r21, 0x47	; 71
    1416:	bc 01       	movw	r22, r24
    1418:	cd 01       	movw	r24, r26
    141a:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__divsf3>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	bc 01       	movw	r22, r24
    1424:	cd 01       	movw	r24, r26
    1426:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__fixsfsi>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	8d 8f       	std	Y+29, r24	; 0x1d
    1430:	9e 8f       	std	Y+30, r25	; 0x1e
    1432:	af 8f       	std	Y+31, r26	; 0x1f
    1434:	b8 a3       	std	Y+32, r27	; 0x20
	x3 = ( (x1 + x2) + 2) / pow (2,2);
    1436:	29 8d       	ldd	r18, Y+25	; 0x19
    1438:	3a 8d       	ldd	r19, Y+26	; 0x1a
    143a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    143c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    143e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1440:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1442:	af 8d       	ldd	r26, Y+31	; 0x1f
    1444:	b8 a1       	ldd	r27, Y+32	; 0x20
    1446:	82 0f       	add	r24, r18
    1448:	93 1f       	adc	r25, r19
    144a:	a4 1f       	adc	r26, r20
    144c:	b5 1f       	adc	r27, r21
    144e:	02 96       	adiw	r24, 0x02	; 2
    1450:	a1 1d       	adc	r26, r1
    1452:	b1 1d       	adc	r27, r1
    1454:	bc 01       	movw	r22, r24
    1456:	cd 01       	movw	r24, r26
    1458:	0e 94 99 1c 	call	0x3932	; 0x3932 <__floatsisf>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	40 e8       	ldi	r20, 0x80	; 128
    1466:	50 e4       	ldi	r21, 0x40	; 64
    1468:	bc 01       	movw	r22, r24
    146a:	cd 01       	movw	r24, r26
    146c:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__divsf3>
    1470:	dc 01       	movw	r26, r24
    1472:	cb 01       	movw	r24, r22
    1474:	bc 01       	movw	r22, r24
    1476:	cd 01       	movw	r24, r26
    1478:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__fixsfsi>
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	89 a3       	std	Y+33, r24	; 0x21
    1482:	9a a3       	std	Y+34, r25	; 0x22
    1484:	ab a3       	std	Y+35, r26	; 0x23
    1486:	bc a3       	std	Y+36, r27	; 0x24
	b4 = bmp.ac4 * (uint32_t)(x3 + 32768) / pow(2, 15);
    1488:	80 91 6a 05 	lds	r24, 0x056A
    148c:	90 91 6b 05 	lds	r25, 0x056B
    1490:	9c 01       	movw	r18, r24
    1492:	40 e0       	ldi	r20, 0x00	; 0
    1494:	50 e0       	ldi	r21, 0x00	; 0
    1496:	89 a1       	ldd	r24, Y+33	; 0x21
    1498:	9a a1       	ldd	r25, Y+34	; 0x22
    149a:	ab a1       	ldd	r26, Y+35	; 0x23
    149c:	bc a1       	ldd	r27, Y+36	; 0x24
    149e:	90 58       	subi	r25, 0x80	; 128
    14a0:	af 4f       	sbci	r26, 0xFF	; 255
    14a2:	bf 4f       	sbci	r27, 0xFF	; 255
    14a4:	bc 01       	movw	r22, r24
    14a6:	cd 01       	movw	r24, r26
    14a8:	0e 94 3b 1b 	call	0x3676	; 0x3676 <__mulsi3>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	bc 01       	movw	r22, r24
    14b2:	cd 01       	movw	r24, r26
    14b4:	0e 94 97 1c 	call	0x392e	; 0x392e <__floatunsisf>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	40 e0       	ldi	r20, 0x00	; 0
    14c2:	57 e4       	ldi	r21, 0x47	; 71
    14c4:	bc 01       	movw	r22, r24
    14c6:	cd 01       	movw	r24, r26
    14c8:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__divsf3>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	bc 01       	movw	r22, r24
    14d2:	cd 01       	movw	r24, r26
    14d4:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <__fixunssfsi>
    14d8:	dc 01       	movw	r26, r24
    14da:	cb 01       	movw	r24, r22
    14dc:	89 a7       	std	Y+41, r24	; 0x29
    14de:	9a a7       	std	Y+42, r25	; 0x2a
    14e0:	ab a7       	std	Y+43, r26	; 0x2b
    14e2:	bc a7       	std	Y+44, r27	; 0x2c
	b7 = ( (uint32_t)rawPressureData - b3) * (50000 >> oss);
    14e4:	8d a1       	ldd	r24, Y+37	; 0x25
    14e6:	9e a1       	ldd	r25, Y+38	; 0x26
    14e8:	af a1       	ldd	r26, Y+39	; 0x27
    14ea:	b8 a5       	ldd	r27, Y+40	; 0x28
    14ec:	29 89       	ldd	r18, Y+17	; 0x11
    14ee:	3a 89       	ldd	r19, Y+18	; 0x12
    14f0:	4b 89       	ldd	r20, Y+19	; 0x13
    14f2:	5c 89       	ldd	r21, Y+20	; 0x14
    14f4:	28 1b       	sub	r18, r24
    14f6:	39 0b       	sbc	r19, r25
    14f8:	4a 0b       	sbc	r20, r26
    14fa:	5b 0b       	sbc	r21, r27
    14fc:	80 91 00 02 	lds	r24, 0x0200
    1500:	68 2f       	mov	r22, r24
    1502:	70 e0       	ldi	r23, 0x00	; 0
    1504:	80 e5       	ldi	r24, 0x50	; 80
    1506:	93 ec       	ldi	r25, 0xC3	; 195
    1508:	a0 e0       	ldi	r26, 0x00	; 0
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	04 c0       	rjmp	.+8      	; 0x1516 <getBMPpressure+0x82c>
    150e:	b5 95       	asr	r27
    1510:	a7 95       	ror	r26
    1512:	97 95       	ror	r25
    1514:	87 95       	ror	r24
    1516:	6a 95       	dec	r22
    1518:	d2 f7       	brpl	.-12     	; 0x150e <getBMPpressure+0x824>
    151a:	bc 01       	movw	r22, r24
    151c:	cd 01       	movw	r24, r26
    151e:	0e 94 3b 1b 	call	0x3676	; 0x3676 <__mulsi3>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	8d a7       	std	Y+45, r24	; 0x2d
    1528:	9e a7       	std	Y+46, r25	; 0x2e
    152a:	af a7       	std	Y+47, r26	; 0x2f
    152c:	b8 ab       	std	Y+48, r27	; 0x30
	
	if (b7 < 0x80000000) {
    152e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1530:	9e a5       	ldd	r25, Y+46	; 0x2e
    1532:	af a5       	ldd	r26, Y+47	; 0x2f
    1534:	b8 a9       	ldd	r27, Y+48	; 0x30
    1536:	bb 23       	and	r27, r27
    1538:	bc f0       	brlt	.+46     	; 0x1568 <getBMPpressure+0x87e>
		p = (b7 *2) / b4;
    153a:	8d a5       	ldd	r24, Y+45	; 0x2d
    153c:	9e a5       	ldd	r25, Y+46	; 0x2e
    153e:	af a5       	ldd	r26, Y+47	; 0x2f
    1540:	b8 a9       	ldd	r27, Y+48	; 0x30
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	aa 1f       	adc	r26, r26
    1548:	bb 1f       	adc	r27, r27
    154a:	29 a5       	ldd	r18, Y+41	; 0x29
    154c:	3a a5       	ldd	r19, Y+42	; 0x2a
    154e:	4b a5       	ldd	r20, Y+43	; 0x2b
    1550:	5c a5       	ldd	r21, Y+44	; 0x2c
    1552:	bc 01       	movw	r22, r24
    1554:	cd 01       	movw	r24, r26
    1556:	0e 94 4b 1b 	call	0x3696	; 0x3696 <__udivmodsi4>
    155a:	da 01       	movw	r26, r20
    155c:	c9 01       	movw	r24, r18
    155e:	89 83       	std	Y+1, r24	; 0x01
    1560:	9a 83       	std	Y+2, r25	; 0x02
    1562:	ab 83       	std	Y+3, r26	; 0x03
    1564:	bc 83       	std	Y+4, r27	; 0x04
    1566:	16 c0       	rjmp	.+44     	; 0x1594 <getBMPpressure+0x8aa>
		} else {
		p = (b7 / b4) * 2;
    1568:	8d a5       	ldd	r24, Y+45	; 0x2d
    156a:	9e a5       	ldd	r25, Y+46	; 0x2e
    156c:	af a5       	ldd	r26, Y+47	; 0x2f
    156e:	b8 a9       	ldd	r27, Y+48	; 0x30
    1570:	29 a5       	ldd	r18, Y+41	; 0x29
    1572:	3a a5       	ldd	r19, Y+42	; 0x2a
    1574:	4b a5       	ldd	r20, Y+43	; 0x2b
    1576:	5c a5       	ldd	r21, Y+44	; 0x2c
    1578:	bc 01       	movw	r22, r24
    157a:	cd 01       	movw	r24, r26
    157c:	0e 94 4b 1b 	call	0x3696	; 0x3696 <__udivmodsi4>
    1580:	da 01       	movw	r26, r20
    1582:	c9 01       	movw	r24, r18
    1584:	88 0f       	add	r24, r24
    1586:	99 1f       	adc	r25, r25
    1588:	aa 1f       	adc	r26, r26
    158a:	bb 1f       	adc	r27, r27
    158c:	89 83       	std	Y+1, r24	; 0x01
    158e:	9a 83       	std	Y+2, r25	; 0x02
    1590:	ab 83       	std	Y+3, r26	; 0x03
    1592:	bc 83       	std	Y+4, r27	; 0x04
	}
	
	x1 = (p / pow(2,8)) * (p / pow(2,8));
    1594:	69 81       	ldd	r22, Y+1	; 0x01
    1596:	7a 81       	ldd	r23, Y+2	; 0x02
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	9c 81       	ldd	r25, Y+4	; 0x04
    159c:	0e 94 99 1c 	call	0x3932	; 0x3932 <__floatsisf>
    15a0:	dc 01       	movw	r26, r24
    15a2:	cb 01       	movw	r24, r22
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	40 e8       	ldi	r20, 0x80	; 128
    15aa:	53 e4       	ldi	r21, 0x43	; 67
    15ac:	bc 01       	movw	r22, r24
    15ae:	cd 01       	movw	r24, r26
    15b0:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__divsf3>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	6c 01       	movw	r12, r24
    15ba:	7d 01       	movw	r14, r26
    15bc:	69 81       	ldd	r22, Y+1	; 0x01
    15be:	7a 81       	ldd	r23, Y+2	; 0x02
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	9c 81       	ldd	r25, Y+4	; 0x04
    15c4:	0e 94 99 1c 	call	0x3932	; 0x3932 <__floatsisf>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	40 e8       	ldi	r20, 0x80	; 128
    15d2:	53 e4       	ldi	r21, 0x43	; 67
    15d4:	bc 01       	movw	r22, r24
    15d6:	cd 01       	movw	r24, r26
    15d8:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__divsf3>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	9c 01       	movw	r18, r24
    15e2:	ad 01       	movw	r20, r26
    15e4:	c7 01       	movw	r24, r14
    15e6:	b6 01       	movw	r22, r12
    15e8:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    15ec:	dc 01       	movw	r26, r24
    15ee:	cb 01       	movw	r24, r22
    15f0:	bc 01       	movw	r22, r24
    15f2:	cd 01       	movw	r24, r26
    15f4:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__fixsfsi>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	89 8f       	std	Y+25, r24	; 0x19
    15fe:	9a 8f       	std	Y+26, r25	; 0x1a
    1600:	ab 8f       	std	Y+27, r26	; 0x1b
    1602:	bc 8f       	std	Y+28, r27	; 0x1c
	x1 = (x1 * 3038) / pow(2, 16);
    1604:	29 8d       	ldd	r18, Y+25	; 0x19
    1606:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1608:	4b 8d       	ldd	r20, Y+27	; 0x1b
    160a:	5c 8d       	ldd	r21, Y+28	; 0x1c
    160c:	8e ed       	ldi	r24, 0xDE	; 222
    160e:	9b e0       	ldi	r25, 0x0B	; 11
    1610:	dc 01       	movw	r26, r24
    1612:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__muluhisi3>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	bc 01       	movw	r22, r24
    161c:	cd 01       	movw	r24, r26
    161e:	0e 94 99 1c 	call	0x3932	; 0x3932 <__floatsisf>
    1622:	dc 01       	movw	r26, r24
    1624:	cb 01       	movw	r24, r22
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 e8       	ldi	r20, 0x80	; 128
    162c:	57 e4       	ldi	r21, 0x47	; 71
    162e:	bc 01       	movw	r22, r24
    1630:	cd 01       	movw	r24, r26
    1632:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__divsf3>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	bc 01       	movw	r22, r24
    163c:	cd 01       	movw	r24, r26
    163e:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__fixsfsi>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	89 8f       	std	Y+25, r24	; 0x19
    1648:	9a 8f       	std	Y+26, r25	; 0x1a
    164a:	ab 8f       	std	Y+27, r26	; 0x1b
    164c:	bc 8f       	std	Y+28, r27	; 0x1c
	x2 = (-7357 * p) / pow(2, 16);
    164e:	29 81       	ldd	r18, Y+1	; 0x01
    1650:	3a 81       	ldd	r19, Y+2	; 0x02
    1652:	4b 81       	ldd	r20, Y+3	; 0x03
    1654:	5c 81       	ldd	r21, Y+4	; 0x04
    1656:	83 e4       	ldi	r24, 0x43	; 67
    1658:	93 ee       	ldi	r25, 0xE3	; 227
    165a:	dc 01       	movw	r26, r24
    165c:	0e 94 81 1b 	call	0x3702	; 0x3702 <__mulohisi3>
    1660:	dc 01       	movw	r26, r24
    1662:	cb 01       	movw	r24, r22
    1664:	bc 01       	movw	r22, r24
    1666:	cd 01       	movw	r24, r26
    1668:	0e 94 99 1c 	call	0x3932	; 0x3932 <__floatsisf>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	40 e8       	ldi	r20, 0x80	; 128
    1676:	57 e4       	ldi	r21, 0x47	; 71
    1678:	bc 01       	movw	r22, r24
    167a:	cd 01       	movw	r24, r26
    167c:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__divsf3>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	bc 01       	movw	r22, r24
    1686:	cd 01       	movw	r24, r26
    1688:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__fixsfsi>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	8d 8f       	std	Y+29, r24	; 0x1d
    1692:	9e 8f       	std	Y+30, r25	; 0x1e
    1694:	af 8f       	std	Y+31, r26	; 0x1f
    1696:	b8 a3       	std	Y+32, r27	; 0x20
	p = p + (x1 + x2 + 3791) / pow(2, 4);
    1698:	69 81       	ldd	r22, Y+1	; 0x01
    169a:	7a 81       	ldd	r23, Y+2	; 0x02
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	9c 81       	ldd	r25, Y+4	; 0x04
    16a0:	0e 94 99 1c 	call	0x3932	; 0x3932 <__floatsisf>
    16a4:	6b 01       	movw	r12, r22
    16a6:	7c 01       	movw	r14, r24
    16a8:	29 8d       	ldd	r18, Y+25	; 0x19
    16aa:	3a 8d       	ldd	r19, Y+26	; 0x1a
    16ac:	4b 8d       	ldd	r20, Y+27	; 0x1b
    16ae:	5c 8d       	ldd	r21, Y+28	; 0x1c
    16b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16b4:	af 8d       	ldd	r26, Y+31	; 0x1f
    16b6:	b8 a1       	ldd	r27, Y+32	; 0x20
    16b8:	82 0f       	add	r24, r18
    16ba:	93 1f       	adc	r25, r19
    16bc:	a4 1f       	adc	r26, r20
    16be:	b5 1f       	adc	r27, r21
    16c0:	81 53       	subi	r24, 0x31	; 49
    16c2:	91 4f       	sbci	r25, 0xF1	; 241
    16c4:	af 4f       	sbci	r26, 0xFF	; 255
    16c6:	bf 4f       	sbci	r27, 0xFF	; 255
    16c8:	bc 01       	movw	r22, r24
    16ca:	cd 01       	movw	r24, r26
    16cc:	0e 94 99 1c 	call	0x3932	; 0x3932 <__floatsisf>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	40 e8       	ldi	r20, 0x80	; 128
    16da:	51 e4       	ldi	r21, 0x41	; 65
    16dc:	bc 01       	movw	r22, r24
    16de:	cd 01       	movw	r24, r26
    16e0:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__divsf3>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	9c 01       	movw	r18, r24
    16ea:	ad 01       	movw	r20, r26
    16ec:	c7 01       	movw	r24, r14
    16ee:	b6 01       	movw	r22, r12
    16f0:	0e 94 96 1b 	call	0x372c	; 0x372c <__addsf3>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	bc 01       	movw	r22, r24
    16fa:	cd 01       	movw	r24, r26
    16fc:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__fixsfsi>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	89 83       	std	Y+1, r24	; 0x01
    1706:	9a 83       	std	Y+2, r25	; 0x02
    1708:	ab 83       	std	Y+3, r26	; 0x03
    170a:	bc 83       	std	Y+4, r27	; 0x04


// Calculate pressure @ sea level & return this
	a = 1 - (double)height/44330;
    170c:	ce 01       	movw	r24, r28
    170e:	85 5b       	subi	r24, 0xB5	; 181
    1710:	9f 4f       	sbci	r25, 0xFF	; 255
    1712:	fc 01       	movw	r30, r24
    1714:	80 81       	ld	r24, Z
    1716:	91 81       	ldd	r25, Z+1	; 0x01
    1718:	cc 01       	movw	r24, r24
    171a:	a0 e0       	ldi	r26, 0x00	; 0
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	bc 01       	movw	r22, r24
    1720:	cd 01       	movw	r24, r26
    1722:	0e 94 97 1c 	call	0x392e	; 0x392e <__floatunsisf>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	3a e2       	ldi	r19, 0x2A	; 42
    172e:	4d e2       	ldi	r20, 0x2D	; 45
    1730:	57 e4       	ldi	r21, 0x47	; 71
    1732:	bc 01       	movw	r22, r24
    1734:	cd 01       	movw	r24, r26
    1736:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__divsf3>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	9c 01       	movw	r18, r24
    1740:	ad 01       	movw	r20, r26
    1742:	60 e0       	ldi	r22, 0x00	; 0
    1744:	70 e0       	ldi	r23, 0x00	; 0
    1746:	80 e8       	ldi	r24, 0x80	; 128
    1748:	9f e3       	ldi	r25, 0x3F	; 63
    174a:	0e 94 95 1b 	call	0x372a	; 0x372a <__subsf3>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	89 ab       	std	Y+49, r24	; 0x31
    1754:	9a ab       	std	Y+50, r25	; 0x32
    1756:	ab ab       	std	Y+51, r26	; 0x33
    1758:	bc ab       	std	Y+52, r27	; 0x34
	a = pow(a, 5.255);
    175a:	89 a9       	ldd	r24, Y+49	; 0x31
    175c:	9a a9       	ldd	r25, Y+50	; 0x32
    175e:	ab a9       	ldd	r26, Y+51	; 0x33
    1760:	bc a9       	ldd	r27, Y+52	; 0x34
    1762:	26 ef       	ldi	r18, 0xF6	; 246
    1764:	38 e2       	ldi	r19, 0x28	; 40
    1766:	48 ea       	ldi	r20, 0xA8	; 168
    1768:	50 e4       	ldi	r21, 0x40	; 64
    176a:	bc 01       	movw	r22, r24
    176c:	cd 01       	movw	r24, r26
    176e:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <pow>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	89 ab       	std	Y+49, r24	; 0x31
    1778:	9a ab       	std	Y+50, r25	; 0x32
    177a:	ab ab       	std	Y+51, r26	; 0x33
    177c:	bc ab       	std	Y+52, r27	; 0x34
		
	pressure = p / a;
    177e:	69 81       	ldd	r22, Y+1	; 0x01
    1780:	7a 81       	ldd	r23, Y+2	; 0x02
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	9c 81       	ldd	r25, Y+4	; 0x04
    1786:	0e 94 99 1c 	call	0x3932	; 0x3932 <__floatsisf>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	29 a9       	ldd	r18, Y+49	; 0x31
    1790:	3a a9       	ldd	r19, Y+50	; 0x32
    1792:	4b a9       	ldd	r20, Y+51	; 0x33
    1794:	5c a9       	ldd	r21, Y+52	; 0x34
    1796:	bc 01       	movw	r22, r24
    1798:	cd 01       	movw	r24, r26
    179a:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__divsf3>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	8d ab       	std	Y+53, r24	; 0x35
    17a4:	9e ab       	std	Y+54, r25	; 0x36
    17a6:	af ab       	std	Y+55, r26	; 0x37
    17a8:	b8 af       	std	Y+56, r27	; 0x38
	inHg = pressure * 0.0002953; // 1 inHg = 0.0002953 Pa
    17aa:	2f e7       	ldi	r18, 0x7F	; 127
    17ac:	32 ed       	ldi	r19, 0xD2	; 210
    17ae:	4a e9       	ldi	r20, 0x9A	; 154
    17b0:	59 e3       	ldi	r21, 0x39	; 57
    17b2:	6d a9       	ldd	r22, Y+53	; 0x35
    17b4:	7e a9       	ldd	r23, Y+54	; 0x36
    17b6:	8f a9       	ldd	r24, Y+55	; 0x37
    17b8:	98 ad       	ldd	r25, Y+56	; 0x38
    17ba:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	89 af       	std	Y+57, r24	; 0x39
    17c4:	9a af       	std	Y+58, r25	; 0x3a
    17c6:	ab af       	std	Y+59, r26	; 0x3b
    17c8:	bc af       	std	Y+60, r27	; 0x3c
	
	return inHg;	
    17ca:	89 ad       	ldd	r24, Y+57	; 0x39
    17cc:	9a ad       	ldd	r25, Y+58	; 0x3a
    17ce:	ab ad       	ldd	r26, Y+59	; 0x3b
    17d0:	bc ad       	ldd	r27, Y+60	; 0x3c
}
    17d2:	bc 01       	movw	r22, r24
    17d4:	cd 01       	movw	r24, r26
    17d6:	cc 5a       	subi	r28, 0xAC	; 172
    17d8:	df 4f       	sbci	r29, 0xFF	; 255
    17da:	0f b6       	in	r0, 0x3f	; 63
    17dc:	f8 94       	cli
    17de:	de bf       	out	0x3e, r29	; 62
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	cd bf       	out	0x3d, r28	; 61
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	1f 91       	pop	r17
    17ea:	0f 91       	pop	r16
    17ec:	ff 90       	pop	r15
    17ee:	ef 90       	pop	r14
    17f0:	df 90       	pop	r13
    17f2:	cf 90       	pop	r12
    17f4:	bf 90       	pop	r11
    17f6:	af 90       	pop	r10
    17f8:	9f 90       	pop	r9
    17fa:	8f 90       	pop	r8
    17fc:	08 95       	ret

000017fe <SI_readI2Cbyte>:
uint8_t SI_readI2Cbyte(uint8_t whichReg);
uint8_t SI_writeI2Cbyte(uint8_t whichReg, uint8_t data);
uint16_t SI_readI2Cword(uint8_t whichReg);


uint8_t SI_readI2Cbyte(uint8_t whichReg) {
    17fe:	cf 93       	push	r28
    1800:	df 93       	push	r29
    1802:	1f 92       	push	r1
    1804:	1f 92       	push	r1
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
    180a:	8a 83       	std	Y+2, r24	; 0x02
	
	uint8_t retValue;
		
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);	// send Start
    180c:	8c eb       	ldi	r24, 0xBC	; 188
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	24 ea       	ldi	r18, 0xA4	; 164
    1812:	fc 01       	movw	r30, r24
    1814:	20 83       	st	Z, r18
	while ( !(TWCR & (1<<TWINT) ) );		// Wait for Start to be transmitted
    1816:	00 00       	nop
    1818:	8c eb       	ldi	r24, 0xBC	; 188
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	fc 01       	movw	r30, r24
    181e:	80 81       	ld	r24, Z
    1820:	88 23       	and	r24, r24
    1822:	d4 f7       	brge	.-12     	; 0x1818 <SI_readI2Cbyte+0x1a>
		
	if ( (TWSR & 0xf8) != START) {
    1824:	89 eb       	ldi	r24, 0xB9	; 185
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	fc 01       	movw	r30, r24
    182a:	80 81       	ld	r24, Z
    182c:	88 2f       	mov	r24, r24
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	88 7f       	andi	r24, 0xF8	; 248
    1832:	99 27       	eor	r25, r25
    1834:	88 30       	cpi	r24, 0x08	; 8
    1836:	91 05       	cpc	r25, r1
    1838:	39 f0       	breq	.+14     	; 0x1848 <SI_readI2Cbyte+0x4a>
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);  // Send a Stop
    183a:	8c eb       	ldi	r24, 0xBC	; 188
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	24 e9       	ldi	r18, 0x94	; 148
    1840:	fc 01       	movw	r30, r24
    1842:	20 83       	st	Z, r18
		return 0xaa;
    1844:	8a ea       	ldi	r24, 0xAA	; 170
    1846:	8c c0       	rjmp	.+280    	; 0x1960 <SI_readI2Cbyte+0x162>
	}
		
	TWDR = SI_SLA_W;						// Send the slave module address + write bit
    1848:	8b eb       	ldi	r24, 0xBB	; 187
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	20 ec       	ldi	r18, 0xC0	; 192
    184e:	fc 01       	movw	r30, r24
    1850:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);			// Transmit the address and wait
    1852:	8c eb       	ldi	r24, 0xBC	; 188
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	24 e8       	ldi	r18, 0x84	; 132
    1858:	fc 01       	movw	r30, r24
    185a:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)));
    185c:	00 00       	nop
    185e:	8c eb       	ldi	r24, 0xBC	; 188
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	fc 01       	movw	r30, r24
    1864:	80 81       	ld	r24, Z
    1866:	88 23       	and	r24, r24
    1868:	d4 f7       	brge	.-12     	; 0x185e <SI_readI2Cbyte+0x60>
		
	if ( (TWSR & 0xf8) != SL_ACK) {		// Look for slave ACK
    186a:	89 eb       	ldi	r24, 0xB9	; 185
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	fc 01       	movw	r30, r24
    1870:	80 81       	ld	r24, Z
    1872:	88 2f       	mov	r24, r24
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	88 7f       	andi	r24, 0xF8	; 248
    1878:	99 27       	eor	r25, r25
    187a:	88 31       	cpi	r24, 0x18	; 24
    187c:	91 05       	cpc	r25, r1
    187e:	39 f0       	breq	.+14     	; 0x188e <SI_readI2Cbyte+0x90>
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);  // Send a Stop
    1880:	8c eb       	ldi	r24, 0xBC	; 188
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	24 e9       	ldi	r18, 0x94	; 148
    1886:	fc 01       	movw	r30, r24
    1888:	20 83       	st	Z, r18
		return 0xab;
    188a:	8b ea       	ldi	r24, 0xAB	; 171
    188c:	69 c0       	rjmp	.+210    	; 0x1960 <SI_readI2Cbyte+0x162>
	}
		
	TWDR = whichReg;							// Load and send address of SI ID register 0x0 which should contain teh PART_ID
    188e:	8b eb       	ldi	r24, 0xBB	; 187
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	2a 81       	ldd	r18, Y+2	; 0x02
    1894:	fc 01       	movw	r30, r24
    1896:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN );
    1898:	8c eb       	ldi	r24, 0xBC	; 188
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	24 e8       	ldi	r18, 0x84	; 132
    189e:	fc 01       	movw	r30, r24
    18a0:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)));
    18a2:	00 00       	nop
    18a4:	8c eb       	ldi	r24, 0xBC	; 188
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	fc 01       	movw	r30, r24
    18aa:	80 81       	ld	r24, Z
    18ac:	88 23       	and	r24, r24
    18ae:	d4 f7       	brge	.-12     	; 0x18a4 <SI_readI2Cbyte+0xa6>
		
	if ( (TWSR & 0xf8) != MT_DATA_ACK)	{	// Look for slave ACK
    18b0:	89 eb       	ldi	r24, 0xB9	; 185
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	fc 01       	movw	r30, r24
    18b6:	80 81       	ld	r24, Z
    18b8:	88 2f       	mov	r24, r24
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	88 7f       	andi	r24, 0xF8	; 248
    18be:	99 27       	eor	r25, r25
    18c0:	88 32       	cpi	r24, 0x28	; 40
    18c2:	91 05       	cpc	r25, r1
    18c4:	39 f0       	breq	.+14     	; 0x18d4 <SI_readI2Cbyte+0xd6>
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);  // Send a Stop
    18c6:	8c eb       	ldi	r24, 0xBC	; 188
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	24 e9       	ldi	r18, 0x94	; 148
    18cc:	fc 01       	movw	r30, r24
    18ce:	20 83       	st	Z, r18
		return 0xac;
    18d0:	8c ea       	ldi	r24, 0xAC	; 172
    18d2:	46 c0       	rjmp	.+140    	; 0x1960 <SI_readI2Cbyte+0x162>
	}

	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);		// send Repeated Start and wait...
    18d4:	8c eb       	ldi	r24, 0xBC	; 188
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	24 ea       	ldi	r18, 0xA4	; 164
    18da:	fc 01       	movw	r30, r24
    18dc:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)));
    18de:	00 00       	nop
    18e0:	8c eb       	ldi	r24, 0xBC	; 188
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	fc 01       	movw	r30, r24
    18e6:	80 81       	ld	r24, Z
    18e8:	88 23       	and	r24, r24
    18ea:	d4 f7       	brge	.-12     	; 0x18e0 <SI_readI2Cbyte+0xe2>
		
	TWDR = SI_SLA_R;							// Send the slave module address + read bit and wait
    18ec:	8b eb       	ldi	r24, 0xBB	; 187
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	21 ec       	ldi	r18, 0xC1	; 193
    18f2:	fc 01       	movw	r30, r24
    18f4:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (0<<TWSTA) | (0<<TWSTO) | (1<<TWEA) | (1<<TWEN);
    18f6:	8c eb       	ldi	r24, 0xBC	; 188
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	24 ec       	ldi	r18, 0xC4	; 196
    18fc:	fc 01       	movw	r30, r24
    18fe:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)));
    1900:	00 00       	nop
    1902:	8c eb       	ldi	r24, 0xBC	; 188
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	fc 01       	movw	r30, r24
    1908:	80 81       	ld	r24, Z
    190a:	88 23       	and	r24, r24
    190c:	d4 f7       	brge	.-12     	; 0x1902 <SI_readI2Cbyte+0x104>
		
	if ( (TWSR & 0xf8) != MR_SLA_ACK)	{		 // Look for slave ACK
    190e:	89 eb       	ldi	r24, 0xB9	; 185
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	fc 01       	movw	r30, r24
    1914:	80 81       	ld	r24, Z
    1916:	88 2f       	mov	r24, r24
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	88 7f       	andi	r24, 0xF8	; 248
    191c:	99 27       	eor	r25, r25
    191e:	80 34       	cpi	r24, 0x40	; 64
    1920:	91 05       	cpc	r25, r1
    1922:	39 f0       	breq	.+14     	; 0x1932 <SI_readI2Cbyte+0x134>
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);  // Send a Stop
    1924:	8c eb       	ldi	r24, 0xBC	; 188
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	24 e9       	ldi	r18, 0x94	; 148
    192a:	fc 01       	movw	r30, r24
    192c:	20 83       	st	Z, r18
		return 0xae;
    192e:	8e ea       	ldi	r24, 0xAE	; 174
    1930:	17 c0       	rjmp	.+46     	; 0x1960 <SI_readI2Cbyte+0x162>
	}
		
	TWCR = (0<<TWSTA) | (0<<TWSTO) | (1<<TWINT) | (0<<TWEA) | (1<<TWEN);		// send a RESTART and return a NACK
    1932:	8c eb       	ldi	r24, 0xBC	; 188
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	24 e8       	ldi	r18, 0x84	; 132
    1938:	fc 01       	movw	r30, r24
    193a:	20 83       	st	Z, r18
		
	while (!(TWCR & (1<<TWINT))); // Wait for slave to return a byte
    193c:	00 00       	nop
    193e:	8c eb       	ldi	r24, 0xBC	; 188
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	fc 01       	movw	r30, r24
    1944:	80 81       	ld	r24, Z
    1946:	88 23       	and	r24, r24
    1948:	d4 f7       	brge	.-12     	; 0x193e <SI_readI2Cbyte+0x140>

	retValue = TWDR;
    194a:	8b eb       	ldi	r24, 0xBB	; 187
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	fc 01       	movw	r30, r24
    1950:	80 81       	ld	r24, Z
    1952:	89 83       	std	Y+1, r24	; 0x01
		
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);  // Send a Stop
    1954:	8c eb       	ldi	r24, 0xBC	; 188
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	24 e9       	ldi	r18, 0x94	; 148
    195a:	fc 01       	movw	r30, r24
    195c:	20 83       	st	Z, r18
		
	return retValue;	
    195e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1960:	0f 90       	pop	r0
    1962:	0f 90       	pop	r0
    1964:	df 91       	pop	r29
    1966:	cf 91       	pop	r28
    1968:	08 95       	ret

0000196a <SI_writeI2Cbyte>:


uint8_t SI_writeI2Cbyte(uint8_t whichReg, uint8_t data) {
    196a:	cf 93       	push	r28
    196c:	df 93       	push	r29
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
    1972:	61 97       	sbiw	r28, 0x11	; 17
    1974:	0f b6       	in	r0, 0x3f	; 63
    1976:	f8 94       	cli
    1978:	de bf       	out	0x3e, r29	; 62
    197a:	0f be       	out	0x3f, r0	; 63
    197c:	cd bf       	out	0x3d, r28	; 61
    197e:	88 8b       	std	Y+16, r24	; 0x10
    1980:	69 8b       	std	Y+17, r22	; 0x11
	
		uint8_t retValue;
		
		TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);	// send Start
    1982:	8c eb       	ldi	r24, 0xBC	; 188
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	24 ea       	ldi	r18, 0xA4	; 164
    1988:	fc 01       	movw	r30, r24
    198a:	20 83       	st	Z, r18
		while ( !(TWCR & (1<<TWINT) ) );		// Wait for Start to be transmitted
    198c:	00 00       	nop
    198e:	8c eb       	ldi	r24, 0xBC	; 188
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	fc 01       	movw	r30, r24
    1994:	80 81       	ld	r24, Z
    1996:	88 23       	and	r24, r24
    1998:	d4 f7       	brge	.-12     	; 0x198e <SI_writeI2Cbyte+0x24>
		
		if ( (TWSR & 0xf8) != START) {
    199a:	89 eb       	ldi	r24, 0xB9	; 185
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	fc 01       	movw	r30, r24
    19a0:	80 81       	ld	r24, Z
    19a2:	88 2f       	mov	r24, r24
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	88 7f       	andi	r24, 0xF8	; 248
    19a8:	99 27       	eor	r25, r25
    19aa:	88 30       	cpi	r24, 0x08	; 8
    19ac:	91 05       	cpc	r25, r1
    19ae:	39 f0       	breq	.+14     	; 0x19be <SI_writeI2Cbyte+0x54>
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);  // Send a Stop
    19b0:	8c eb       	ldi	r24, 0xBC	; 188
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	24 e9       	ldi	r18, 0x94	; 148
    19b6:	fc 01       	movw	r30, r24
    19b8:	20 83       	st	Z, r18
			return 0xaa;
    19ba:	8a ea       	ldi	r24, 0xAA	; 170
    19bc:	8a c1       	rjmp	.+788    	; 0x1cd2 <SI_writeI2Cbyte+0x368>
		}
		
		TWDR = SI_SLA_W;						// Send the slave module address + write bit
    19be:	8b eb       	ldi	r24, 0xBB	; 187
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	20 ec       	ldi	r18, 0xC0	; 192
    19c4:	fc 01       	movw	r30, r24
    19c6:	20 83       	st	Z, r18
		TWCR = (1<<TWINT) | (1<<TWEN);			// Transmit the address and wait
    19c8:	8c eb       	ldi	r24, 0xBC	; 188
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	24 e8       	ldi	r18, 0x84	; 132
    19ce:	fc 01       	movw	r30, r24
    19d0:	20 83       	st	Z, r18
		while (!(TWCR & (1<<TWINT)));
    19d2:	00 00       	nop
    19d4:	8c eb       	ldi	r24, 0xBC	; 188
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	fc 01       	movw	r30, r24
    19da:	80 81       	ld	r24, Z
    19dc:	88 23       	and	r24, r24
    19de:	d4 f7       	brge	.-12     	; 0x19d4 <SI_writeI2Cbyte+0x6a>
		
		if ( (TWSR & 0xf8) != SL_ACK) {		// Look for slave ACK
    19e0:	89 eb       	ldi	r24, 0xB9	; 185
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	fc 01       	movw	r30, r24
    19e6:	80 81       	ld	r24, Z
    19e8:	88 2f       	mov	r24, r24
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	88 7f       	andi	r24, 0xF8	; 248
    19ee:	99 27       	eor	r25, r25
    19f0:	88 31       	cpi	r24, 0x18	; 24
    19f2:	91 05       	cpc	r25, r1
    19f4:	39 f0       	breq	.+14     	; 0x1a04 <SI_writeI2Cbyte+0x9a>
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);  // Send a Stop
    19f6:	8c eb       	ldi	r24, 0xBC	; 188
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	24 e9       	ldi	r18, 0x94	; 148
    19fc:	fc 01       	movw	r30, r24
    19fe:	20 83       	st	Z, r18
			return 0xab;
    1a00:	8b ea       	ldi	r24, 0xAB	; 171
    1a02:	67 c1       	rjmp	.+718    	; 0x1cd2 <SI_writeI2Cbyte+0x368>
		}
		
		TWDR = whichReg;							// Load and send address of SI ID register 0x0 which should contain teh PART_ID
    1a04:	8b eb       	ldi	r24, 0xBB	; 187
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	28 89       	ldd	r18, Y+16	; 0x10
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	20 83       	st	Z, r18
		TWCR = (1<<TWINT) | (1<<TWEN );
    1a0e:	8c eb       	ldi	r24, 0xBC	; 188
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	24 e8       	ldi	r18, 0x84	; 132
    1a14:	fc 01       	movw	r30, r24
    1a16:	20 83       	st	Z, r18
		while (!(TWCR & (1<<TWINT)));
    1a18:	00 00       	nop
    1a1a:	8c eb       	ldi	r24, 0xBC	; 188
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	fc 01       	movw	r30, r24
    1a20:	80 81       	ld	r24, Z
    1a22:	88 23       	and	r24, r24
    1a24:	d4 f7       	brge	.-12     	; 0x1a1a <SI_writeI2Cbyte+0xb0>
		
		if ( (TWSR & 0xf8) != MT_DATA_ACK)	{	// Look for slave ACK
    1a26:	89 eb       	ldi	r24, 0xB9	; 185
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	80 81       	ld	r24, Z
    1a2e:	88 2f       	mov	r24, r24
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	88 7f       	andi	r24, 0xF8	; 248
    1a34:	99 27       	eor	r25, r25
    1a36:	88 32       	cpi	r24, 0x28	; 40
    1a38:	91 05       	cpc	r25, r1
    1a3a:	39 f0       	breq	.+14     	; 0x1a4a <SI_writeI2Cbyte+0xe0>
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);  // Send a Stop
    1a3c:	8c eb       	ldi	r24, 0xBC	; 188
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	24 e9       	ldi	r18, 0x94	; 148
    1a42:	fc 01       	movw	r30, r24
    1a44:	20 83       	st	Z, r18
			return 0xac;
    1a46:	8c ea       	ldi	r24, 0xAC	; 172
    1a48:	44 c1       	rjmp	.+648    	; 0x1cd2 <SI_writeI2Cbyte+0x368>
		}
		
		TWDR = data;							// Load and send address of SI ID register 0x0 which should contain teh PART_ID
    1a4a:	8b eb       	ldi	r24, 0xBB	; 187
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	29 89       	ldd	r18, Y+17	; 0x11
    1a50:	fc 01       	movw	r30, r24
    1a52:	20 83       	st	Z, r18
		TWCR = (1<<TWINT) | (1<<TWEN );
    1a54:	8c eb       	ldi	r24, 0xBC	; 188
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	24 e8       	ldi	r18, 0x84	; 132
    1a5a:	fc 01       	movw	r30, r24
    1a5c:	20 83       	st	Z, r18
		while (!(TWCR & (1<<TWINT)));
    1a5e:	00 00       	nop
    1a60:	8c eb       	ldi	r24, 0xBC	; 188
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	fc 01       	movw	r30, r24
    1a66:	80 81       	ld	r24, Z
    1a68:	88 23       	and	r24, r24
    1a6a:	d4 f7       	brge	.-12     	; 0x1a60 <SI_writeI2Cbyte+0xf6>
		
		if ( (TWSR & 0xf8) != MT_DATA_ACK)	{	// Look for slave ACK
    1a6c:	89 eb       	ldi	r24, 0xB9	; 185
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	fc 01       	movw	r30, r24
    1a72:	80 81       	ld	r24, Z
    1a74:	88 2f       	mov	r24, r24
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	88 7f       	andi	r24, 0xF8	; 248
    1a7a:	99 27       	eor	r25, r25
    1a7c:	88 32       	cpi	r24, 0x28	; 40
    1a7e:	91 05       	cpc	r25, r1
    1a80:	39 f0       	breq	.+14     	; 0x1a90 <SI_writeI2Cbyte+0x126>
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);  // Send a Stop
    1a82:	8c eb       	ldi	r24, 0xBC	; 188
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	24 e9       	ldi	r18, 0x94	; 148
    1a88:	fc 01       	movw	r30, r24
    1a8a:	20 83       	st	Z, r18
			return 0xad;
    1a8c:	8d ea       	ldi	r24, 0xAD	; 173
    1a8e:	21 c1       	rjmp	.+578    	; 0x1cd2 <SI_writeI2Cbyte+0x368>
		}
		
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);  // Send a Stop
    1a90:	8c eb       	ldi	r24, 0xBC	; 188
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	24 e9       	ldi	r18, 0x94	; 148
    1a96:	fc 01       	movw	r30, r24
    1a98:	20 83       	st	Z, r18
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	a0 ef       	ldi	r26, 0xF0	; 240
    1aa0:	b1 e4       	ldi	r27, 0x41	; 65
    1aa2:	8a 83       	std	Y+2, r24	; 0x02
    1aa4:	9b 83       	std	Y+3, r25	; 0x03
    1aa6:	ac 83       	std	Y+4, r26	; 0x04
    1aa8:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	4a e7       	ldi	r20, 0x7A	; 122
    1ab0:	55 e4       	ldi	r21, 0x45	; 69
    1ab2:	6a 81       	ldd	r22, Y+2	; 0x02
    1ab4:	7b 81       	ldd	r23, Y+3	; 0x03
    1ab6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab8:	9d 81       	ldd	r25, Y+5	; 0x05
    1aba:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	8e 83       	std	Y+6, r24	; 0x06
    1ac4:	9f 83       	std	Y+7, r25	; 0x07
    1ac6:	a8 87       	std	Y+8, r26	; 0x08
    1ac8:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	40 e8       	ldi	r20, 0x80	; 128
    1ad0:	5f e3       	ldi	r21, 0x3F	; 63
    1ad2:	6e 81       	ldd	r22, Y+6	; 0x06
    1ad4:	7f 81       	ldd	r23, Y+7	; 0x07
    1ad6:	88 85       	ldd	r24, Y+8	; 0x08
    1ad8:	99 85       	ldd	r25, Y+9	; 0x09
    1ada:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__cmpsf2>
    1ade:	88 23       	and	r24, r24
    1ae0:	2c f4       	brge	.+10     	; 0x1aec <SI_writeI2Cbyte+0x182>
		__ticks = 1;
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	9b 87       	std	Y+11, r25	; 0x0b
    1ae8:	8a 87       	std	Y+10, r24	; 0x0a
    1aea:	3f c0       	rjmp	.+126    	; 0x1b6a <SI_writeI2Cbyte+0x200>
	else if (__tmp > 65535)
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	3f ef       	ldi	r19, 0xFF	; 255
    1af0:	4f e7       	ldi	r20, 0x7F	; 127
    1af2:	57 e4       	ldi	r21, 0x47	; 71
    1af4:	6e 81       	ldd	r22, Y+6	; 0x06
    1af6:	7f 81       	ldd	r23, Y+7	; 0x07
    1af8:	88 85       	ldd	r24, Y+8	; 0x08
    1afa:	99 85       	ldd	r25, Y+9	; 0x09
    1afc:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <__gesf2>
    1b00:	18 16       	cp	r1, r24
    1b02:	4c f5       	brge	.+82     	; 0x1b56 <SI_writeI2Cbyte+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	40 e2       	ldi	r20, 0x20	; 32
    1b0a:	51 e4       	ldi	r21, 0x41	; 65
    1b0c:	6a 81       	ldd	r22, Y+2	; 0x02
    1b0e:	7b 81       	ldd	r23, Y+3	; 0x03
    1b10:	8c 81       	ldd	r24, Y+4	; 0x04
    1b12:	9d 81       	ldd	r25, Y+5	; 0x05
    1b14:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	bc 01       	movw	r22, r24
    1b1e:	cd 01       	movw	r24, r26
    1b20:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <__fixunssfsi>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	9b 87       	std	Y+11, r25	; 0x0b
    1b2a:	8a 87       	std	Y+10, r24	; 0x0a
    1b2c:	0f c0       	rjmp	.+30     	; 0x1b4c <SI_writeI2Cbyte+0x1e2>
    1b2e:	80 e9       	ldi	r24, 0x90	; 144
    1b30:	91 e0       	ldi	r25, 0x01	; 1
    1b32:	9d 87       	std	Y+13, r25	; 0x0d
    1b34:	8c 87       	std	Y+12, r24	; 0x0c
    1b36:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b38:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
    1b3c:	f1 f7       	brne	.-4      	; 0x1b3a <SI_writeI2Cbyte+0x1d0>
    1b3e:	9d 87       	std	Y+13, r25	; 0x0d
    1b40:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b42:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b44:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	9b 87       	std	Y+11, r25	; 0x0b
    1b4a:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b4e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b50:	00 97       	sbiw	r24, 0x00	; 0
    1b52:	69 f7       	brne	.-38     	; 0x1b2e <SI_writeI2Cbyte+0x1c4>
    1b54:	14 c0       	rjmp	.+40     	; 0x1b7e <SI_writeI2Cbyte+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b56:	6e 81       	ldd	r22, Y+6	; 0x06
    1b58:	7f 81       	ldd	r23, Y+7	; 0x07
    1b5a:	88 85       	ldd	r24, Y+8	; 0x08
    1b5c:	99 85       	ldd	r25, Y+9	; 0x09
    1b5e:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <__fixunssfsi>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	9b 87       	std	Y+11, r25	; 0x0b
    1b68:	8a 87       	std	Y+10, r24	; 0x0a
    1b6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b6c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b6e:	9f 87       	std	Y+15, r25	; 0x0f
    1b70:	8e 87       	std	Y+14, r24	; 0x0e
    1b72:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b74:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	f1 f7       	brne	.-4      	; 0x1b76 <SI_writeI2Cbyte+0x20c>
    1b7a:	9f 87       	std	Y+15, r25	; 0x0f
    1b7c:	8e 87       	std	Y+14, r24	; 0x0e
		
		_delay_ms(30);
		
		// Verify that the data got written
		TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);	// send Start
    1b7e:	8c eb       	ldi	r24, 0xBC	; 188
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	24 ea       	ldi	r18, 0xA4	; 164
    1b84:	fc 01       	movw	r30, r24
    1b86:	20 83       	st	Z, r18
		while ( !(TWCR & (1<<TWINT) ) );		// Wait for Start to be transmitted
    1b88:	00 00       	nop
    1b8a:	8c eb       	ldi	r24, 0xBC	; 188
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	fc 01       	movw	r30, r24
    1b90:	80 81       	ld	r24, Z
    1b92:	88 23       	and	r24, r24
    1b94:	d4 f7       	brge	.-12     	; 0x1b8a <SI_writeI2Cbyte+0x220>
		
		if ( (TWSR & 0xf8) != START) {
    1b96:	89 eb       	ldi	r24, 0xB9	; 185
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	fc 01       	movw	r30, r24
    1b9c:	80 81       	ld	r24, Z
    1b9e:	88 2f       	mov	r24, r24
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	88 7f       	andi	r24, 0xF8	; 248
    1ba4:	99 27       	eor	r25, r25
    1ba6:	88 30       	cpi	r24, 0x08	; 8
    1ba8:	91 05       	cpc	r25, r1
    1baa:	39 f0       	breq	.+14     	; 0x1bba <SI_writeI2Cbyte+0x250>
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);  // Send a Stop
    1bac:	8c eb       	ldi	r24, 0xBC	; 188
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	24 e9       	ldi	r18, 0x94	; 148
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	20 83       	st	Z, r18
			return 0xaa;
    1bb6:	8a ea       	ldi	r24, 0xAA	; 170
    1bb8:	8c c0       	rjmp	.+280    	; 0x1cd2 <SI_writeI2Cbyte+0x368>
		}
		
		TWDR = SI_SLA_W;							// Send the slave module address + read bit and wait
    1bba:	8b eb       	ldi	r24, 0xBB	; 187
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	20 ec       	ldi	r18, 0xC0	; 192
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	20 83       	st	Z, r18
		TWCR = (1<<TWINT) | (0<<TWSTA) | (0<<TWSTO) | (1<<TWEA) | (1<<TWEN);
    1bc4:	8c eb       	ldi	r24, 0xBC	; 188
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	24 ec       	ldi	r18, 0xC4	; 196
    1bca:	fc 01       	movw	r30, r24
    1bcc:	20 83       	st	Z, r18
		while (!(TWCR & (1<<TWINT)));
    1bce:	00 00       	nop
    1bd0:	8c eb       	ldi	r24, 0xBC	; 188
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	fc 01       	movw	r30, r24
    1bd6:	80 81       	ld	r24, Z
    1bd8:	88 23       	and	r24, r24
    1bda:	d4 f7       	brge	.-12     	; 0x1bd0 <SI_writeI2Cbyte+0x266>
		
		if ( (TWSR & 0xf8) != SL_ACK) {		 // Look for slave ACK
    1bdc:	89 eb       	ldi	r24, 0xB9	; 185
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	fc 01       	movw	r30, r24
    1be2:	80 81       	ld	r24, Z
    1be4:	88 2f       	mov	r24, r24
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	88 7f       	andi	r24, 0xF8	; 248
    1bea:	99 27       	eor	r25, r25
    1bec:	88 31       	cpi	r24, 0x18	; 24
    1bee:	91 05       	cpc	r25, r1
    1bf0:	39 f0       	breq	.+14     	; 0x1c00 <SI_writeI2Cbyte+0x296>
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);  // Send a Stop
    1bf2:	8c eb       	ldi	r24, 0xBC	; 188
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	24 e9       	ldi	r18, 0x94	; 148
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	20 83       	st	Z, r18
			return 0xaf;
    1bfc:	8f ea       	ldi	r24, 0xAF	; 175
    1bfe:	69 c0       	rjmp	.+210    	; 0x1cd2 <SI_writeI2Cbyte+0x368>
		}
		
		TWDR = whichReg;							// Load and send address of SI ID register 0x0 which should contain teh PART_ID
    1c00:	8b eb       	ldi	r24, 0xBB	; 187
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	28 89       	ldd	r18, Y+16	; 0x10
    1c06:	fc 01       	movw	r30, r24
    1c08:	20 83       	st	Z, r18
		TWCR = (1<<TWINT) | (1<<TWEN );
    1c0a:	8c eb       	ldi	r24, 0xBC	; 188
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	24 e8       	ldi	r18, 0x84	; 132
    1c10:	fc 01       	movw	r30, r24
    1c12:	20 83       	st	Z, r18
		while (!(TWCR & (1<<TWINT)));
    1c14:	00 00       	nop
    1c16:	8c eb       	ldi	r24, 0xBC	; 188
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	80 81       	ld	r24, Z
    1c1e:	88 23       	and	r24, r24
    1c20:	d4 f7       	brge	.-12     	; 0x1c16 <SI_writeI2Cbyte+0x2ac>
		
		if ( (TWSR & 0xf8) != MT_DATA_ACK)	{	// Look for slave ACK
    1c22:	89 eb       	ldi	r24, 0xB9	; 185
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	fc 01       	movw	r30, r24
    1c28:	80 81       	ld	r24, Z
    1c2a:	88 2f       	mov	r24, r24
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	88 7f       	andi	r24, 0xF8	; 248
    1c30:	99 27       	eor	r25, r25
    1c32:	88 32       	cpi	r24, 0x28	; 40
    1c34:	91 05       	cpc	r25, r1
    1c36:	39 f0       	breq	.+14     	; 0x1c46 <SI_writeI2Cbyte+0x2dc>
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);  // Send a Stop
    1c38:	8c eb       	ldi	r24, 0xBC	; 188
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	24 e9       	ldi	r18, 0x94	; 148
    1c3e:	fc 01       	movw	r30, r24
    1c40:	20 83       	st	Z, r18
			return 0xaf;
    1c42:	8f ea       	ldi	r24, 0xAF	; 175
    1c44:	46 c0       	rjmp	.+140    	; 0x1cd2 <SI_writeI2Cbyte+0x368>
		}
		
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);		// send Repeated Start and wait...
    1c46:	8c eb       	ldi	r24, 0xBC	; 188
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	24 ea       	ldi	r18, 0xA4	; 164
    1c4c:	fc 01       	movw	r30, r24
    1c4e:	20 83       	st	Z, r18
		while (!(TWCR & (1<<TWINT)));
    1c50:	00 00       	nop
    1c52:	8c eb       	ldi	r24, 0xBC	; 188
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	fc 01       	movw	r30, r24
    1c58:	80 81       	ld	r24, Z
    1c5a:	88 23       	and	r24, r24
    1c5c:	d4 f7       	brge	.-12     	; 0x1c52 <SI_writeI2Cbyte+0x2e8>
		
		TWDR = SI_SLA_R;						// Send the slave module address + write bit
    1c5e:	8b eb       	ldi	r24, 0xBB	; 187
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	21 ec       	ldi	r18, 0xC1	; 193
    1c64:	fc 01       	movw	r30, r24
    1c66:	20 83       	st	Z, r18
		TWCR = (1<<TWINT) | (1<<TWEN);			// Transmit the address and wait
    1c68:	8c eb       	ldi	r24, 0xBC	; 188
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	24 e8       	ldi	r18, 0x84	; 132
    1c6e:	fc 01       	movw	r30, r24
    1c70:	20 83       	st	Z, r18
		while (!(TWCR & (1<<TWINT)));
    1c72:	00 00       	nop
    1c74:	8c eb       	ldi	r24, 0xBC	; 188
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	fc 01       	movw	r30, r24
    1c7a:	80 81       	ld	r24, Z
    1c7c:	88 23       	and	r24, r24
    1c7e:	d4 f7       	brge	.-12     	; 0x1c74 <SI_writeI2Cbyte+0x30a>
		
		if ( (TWSR & 0xf8) != MR_SLA_ACK) {		// Look for slave ACK
    1c80:	89 eb       	ldi	r24, 0xB9	; 185
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	fc 01       	movw	r30, r24
    1c86:	80 81       	ld	r24, Z
    1c88:	88 2f       	mov	r24, r24
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	88 7f       	andi	r24, 0xF8	; 248
    1c8e:	99 27       	eor	r25, r25
    1c90:	80 34       	cpi	r24, 0x40	; 64
    1c92:	91 05       	cpc	r25, r1
    1c94:	39 f0       	breq	.+14     	; 0x1ca4 <SI_writeI2Cbyte+0x33a>
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);  // Send a Stop
    1c96:	8c eb       	ldi	r24, 0xBC	; 188
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	24 e9       	ldi	r18, 0x94	; 148
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	20 83       	st	Z, r18
			return 0xac;
    1ca0:	8c ea       	ldi	r24, 0xAC	; 172
    1ca2:	17 c0       	rjmp	.+46     	; 0x1cd2 <SI_writeI2Cbyte+0x368>
		}
		
		TWCR = (0<<TWSTA) | (0<<TWSTO) | (1<<TWINT) | (0<<TWEA) | (1<<TWEN);		// send a RESTART and return a NACK
    1ca4:	8c eb       	ldi	r24, 0xBC	; 188
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	24 e8       	ldi	r18, 0x84	; 132
    1caa:	fc 01       	movw	r30, r24
    1cac:	20 83       	st	Z, r18
		
		while (!(TWCR & (1<<TWINT))); // Wait for slave to return a byte
    1cae:	00 00       	nop
    1cb0:	8c eb       	ldi	r24, 0xBC	; 188
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	fc 01       	movw	r30, r24
    1cb6:	80 81       	ld	r24, Z
    1cb8:	88 23       	and	r24, r24
    1cba:	d4 f7       	brge	.-12     	; 0x1cb0 <SI_writeI2Cbyte+0x346>

		retValue = TWDR;
    1cbc:	8b eb       	ldi	r24, 0xBB	; 187
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	fc 01       	movw	r30, r24
    1cc2:	80 81       	ld	r24, Z
    1cc4:	89 83       	std	Y+1, r24	; 0x01
		
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);  // Send a Stop
    1cc6:	8c eb       	ldi	r24, 0xBC	; 188
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	24 e9       	ldi	r18, 0x94	; 148
    1ccc:	fc 01       	movw	r30, r24
    1cce:	20 83       	st	Z, r18
		
		return retValue;
    1cd0:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    1cd2:	61 96       	adiw	r28, 0x11	; 17
    1cd4:	0f b6       	in	r0, 0x3f	; 63
    1cd6:	f8 94       	cli
    1cd8:	de bf       	out	0x3e, r29	; 62
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	cd bf       	out	0x3d, r28	; 61
    1cde:	df 91       	pop	r29
    1ce0:	cf 91       	pop	r28
    1ce2:	08 95       	ret

00001ce4 <SI_readI2Cword>:

uint16_t SI_readI2Cword(uint8_t whichReg) {
    1ce4:	cf 93       	push	r28
    1ce6:	df 93       	push	r29
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
    1cec:	27 97       	sbiw	r28, 0x07	; 7
    1cee:	0f b6       	in	r0, 0x3f	; 63
    1cf0:	f8 94       	cli
    1cf2:	de bf       	out	0x3e, r29	; 62
    1cf4:	0f be       	out	0x3f, r0	; 63
    1cf6:	cd bf       	out	0x3d, r28	; 61
    1cf8:	8f 83       	std	Y+7, r24	; 0x07
	
	uint16_t retWord, MSB, LSB;

	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);		// send Start
    1cfa:	8c eb       	ldi	r24, 0xBC	; 188
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	24 ea       	ldi	r18, 0xA4	; 164
    1d00:	fc 01       	movw	r30, r24
    1d02:	20 83       	st	Z, r18
	while ( !(TWCR & (1<<TWINT) ) );			// Wait for Start to be transmitted
    1d04:	00 00       	nop
    1d06:	8c eb       	ldi	r24, 0xBC	; 188
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	80 81       	ld	r24, Z
    1d0e:	88 23       	and	r24, r24
    1d10:	d4 f7       	brge	.-12     	; 0x1d06 <SI_readI2Cword+0x22>
	
	TWDR = SI_SLA_W;							// Send the slave module address + write bit
    1d12:	8b eb       	ldi	r24, 0xBB	; 187
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	20 ec       	ldi	r18, 0xC0	; 192
    1d18:	fc 01       	movw	r30, r24
    1d1a:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);				// Transmit the address
    1d1c:	8c eb       	ldi	r24, 0xBC	; 188
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	24 e8       	ldi	r18, 0x84	; 132
    1d22:	fc 01       	movw	r30, r24
    1d24:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)));
    1d26:	00 00       	nop
    1d28:	8c eb       	ldi	r24, 0xBC	; 188
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	fc 01       	movw	r30, r24
    1d2e:	80 81       	ld	r24, Z
    1d30:	88 23       	and	r24, r24
    1d32:	d4 f7       	brge	.-12     	; 0x1d28 <SI_readI2Cword+0x44>
	
	if ( (TWSR & 0xf8) != SL_ACK) {				// Look for slave ACK
    1d34:	89 eb       	ldi	r24, 0xB9	; 185
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	fc 01       	movw	r30, r24
    1d3a:	80 81       	ld	r24, Z
    1d3c:	88 2f       	mov	r24, r24
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	88 7f       	andi	r24, 0xF8	; 248
    1d42:	99 27       	eor	r25, r25
    1d44:	88 31       	cpi	r24, 0x18	; 24
    1d46:	91 05       	cpc	r25, r1
    1d48:	41 f0       	breq	.+16     	; 0x1d5a <SI_readI2Cword+0x76>
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);  // Send a Stop
    1d4a:	8c eb       	ldi	r24, 0xBC	; 188
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	24 e9       	ldi	r18, 0x94	; 148
    1d50:	fc 01       	movw	r30, r24
    1d52:	20 83       	st	Z, r18
		return 0xaa;
    1d54:	8a ea       	ldi	r24, 0xAA	; 170
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	8d c0       	rjmp	.+282    	; 0x1e74 <SI_readI2Cword+0x190>
	}			
	
	TWDR = whichReg;								// Send the address of the AD MSB
    1d5a:	8b eb       	ldi	r24, 0xBB	; 187
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	2f 81       	ldd	r18, Y+7	; 0x07
    1d60:	fc 01       	movw	r30, r24
    1d62:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN );
    1d64:	8c eb       	ldi	r24, 0xBC	; 188
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	24 e8       	ldi	r18, 0x84	; 132
    1d6a:	fc 01       	movw	r30, r24
    1d6c:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)));
    1d6e:	00 00       	nop
    1d70:	8c eb       	ldi	r24, 0xBC	; 188
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	fc 01       	movw	r30, r24
    1d76:	80 81       	ld	r24, Z
    1d78:	88 23       	and	r24, r24
    1d7a:	d4 f7       	brge	.-12     	; 0x1d70 <SI_readI2Cword+0x8c>
	
	if ( (TWSR & 0xf8) != MT_DATA_ACK) {			// Look for slave ACK
    1d7c:	89 eb       	ldi	r24, 0xB9	; 185
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	fc 01       	movw	r30, r24
    1d82:	80 81       	ld	r24, Z
    1d84:	88 2f       	mov	r24, r24
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	88 7f       	andi	r24, 0xF8	; 248
    1d8a:	99 27       	eor	r25, r25
    1d8c:	88 32       	cpi	r24, 0x28	; 40
    1d8e:	91 05       	cpc	r25, r1
    1d90:	41 f0       	breq	.+16     	; 0x1da2 <SI_readI2Cword+0xbe>
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);  // Send a Stop
    1d92:	8c eb       	ldi	r24, 0xBC	; 188
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	24 e9       	ldi	r18, 0x94	; 148
    1d98:	fc 01       	movw	r30, r24
    1d9a:	20 83       	st	Z, r18
		return 0xab;
    1d9c:	8b ea       	ldi	r24, 0xAB	; 171
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	69 c0       	rjmp	.+210    	; 0x1e74 <SI_readI2Cword+0x190>
	}
	
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); // send Repeated Start and wait...
    1da2:	8c eb       	ldi	r24, 0xBC	; 188
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	24 ea       	ldi	r18, 0xA4	; 164
    1da8:	fc 01       	movw	r30, r24
    1daa:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)));
    1dac:	00 00       	nop
    1dae:	8c eb       	ldi	r24, 0xBC	; 188
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	fc 01       	movw	r30, r24
    1db4:	80 81       	ld	r24, Z
    1db6:	88 23       	and	r24, r24
    1db8:	d4 f7       	brge	.-12     	; 0x1dae <SI_readI2Cword+0xca>
	
	TWDR = SI_SLA_R;							// Send the slave module address + read bit
    1dba:	8b eb       	ldi	r24, 0xBB	; 187
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	21 ec       	ldi	r18, 0xC1	; 193
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (0<<TWSTA) | (0<<TWSTO) | (1<<TWEA) | (1<<TWEN);
    1dc4:	8c eb       	ldi	r24, 0xBC	; 188
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	24 ec       	ldi	r18, 0xC4	; 196
    1dca:	fc 01       	movw	r30, r24
    1dcc:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)));
    1dce:	00 00       	nop
    1dd0:	8c eb       	ldi	r24, 0xBC	; 188
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	fc 01       	movw	r30, r24
    1dd6:	80 81       	ld	r24, Z
    1dd8:	88 23       	and	r24, r24
    1dda:	d4 f7       	brge	.-12     	; 0x1dd0 <SI_readI2Cword+0xec>
	
	if ( (TWSR & 0xf8) != MR_SLA_ACK) {			// Look for slave ACK
    1ddc:	89 eb       	ldi	r24, 0xB9	; 185
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	fc 01       	movw	r30, r24
    1de2:	80 81       	ld	r24, Z
    1de4:	88 2f       	mov	r24, r24
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	88 7f       	andi	r24, 0xF8	; 248
    1dea:	99 27       	eor	r25, r25
    1dec:	80 34       	cpi	r24, 0x40	; 64
    1dee:	91 05       	cpc	r25, r1
    1df0:	41 f0       	breq	.+16     	; 0x1e02 <SI_readI2Cword+0x11e>
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);  // Send a Stop
    1df2:	8c eb       	ldi	r24, 0xBC	; 188
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	24 e9       	ldi	r18, 0x94	; 148
    1df8:	fc 01       	movw	r30, r24
    1dfa:	20 83       	st	Z, r18
		return 0xac;
    1dfc:	8c ea       	ldi	r24, 0xAC	; 172
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	39 c0       	rjmp	.+114    	; 0x1e74 <SI_readI2Cword+0x190>
	}

	TWCR = (0<<TWSTA) | (0<<TWSTO) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);   // Send a RESTART and an ACK after MSB is received
    1e02:	8c eb       	ldi	r24, 0xBC	; 188
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	24 ec       	ldi	r18, 0xC4	; 196
    1e08:	fc 01       	movw	r30, r24
    1e0a:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)));
    1e0c:	00 00       	nop
    1e0e:	8c eb       	ldi	r24, 0xBC	; 188
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	fc 01       	movw	r30, r24
    1e14:	80 81       	ld	r24, Z
    1e16:	88 23       	and	r24, r24
    1e18:	d4 f7       	brge	.-12     	; 0x1e0e <SI_readI2Cword+0x12a>
	
	LSB = TWDR;
    1e1a:	8b eb       	ldi	r24, 0xBB	; 187
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	fc 01       	movw	r30, r24
    1e20:	80 81       	ld	r24, Z
    1e22:	88 2f       	mov	r24, r24
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	9a 83       	std	Y+2, r25	; 0x02
    1e28:	89 83       	std	Y+1, r24	; 0x01
	
	TWCR = (0<<TWSTA) | (0<<TWSTO) | (1<<TWINT) | (0<<TWEA) | (1<<TWEN);   // Send a RESTART and a NACK after LSB is received
    1e2a:	8c eb       	ldi	r24, 0xBC	; 188
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	24 e8       	ldi	r18, 0x84	; 132
    1e30:	fc 01       	movw	r30, r24
    1e32:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)));
    1e34:	00 00       	nop
    1e36:	8c eb       	ldi	r24, 0xBC	; 188
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	80 81       	ld	r24, Z
    1e3e:	88 23       	and	r24, r24
    1e40:	d4 f7       	brge	.-12     	; 0x1e36 <SI_readI2Cword+0x152>

	MSB = TWDR;
    1e42:	8b eb       	ldi	r24, 0xBB	; 187
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	fc 01       	movw	r30, r24
    1e48:	80 81       	ld	r24, Z
    1e4a:	88 2f       	mov	r24, r24
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	9c 83       	std	Y+4, r25	; 0x04
    1e50:	8b 83       	std	Y+3, r24	; 0x03
	
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);  // Send a Stop
    1e52:	8c eb       	ldi	r24, 0xBC	; 188
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	24 e9       	ldi	r18, 0x94	; 148
    1e58:	fc 01       	movw	r30, r24
    1e5a:	20 83       	st	Z, r18
	
	retWord = (MSB << 8) | LSB;
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e60:	38 2f       	mov	r19, r24
    1e62:	22 27       	eor	r18, r18
    1e64:	89 81       	ldd	r24, Y+1	; 0x01
    1e66:	9a 81       	ldd	r25, Y+2	; 0x02
    1e68:	82 2b       	or	r24, r18
    1e6a:	93 2b       	or	r25, r19
    1e6c:	9e 83       	std	Y+6, r25	; 0x06
    1e6e:	8d 83       	std	Y+5, r24	; 0x05
	
	return retWord;
    1e70:	8d 81       	ldd	r24, Y+5	; 0x05
    1e72:	9e 81       	ldd	r25, Y+6	; 0x06
}
    1e74:	27 96       	adiw	r28, 0x07	; 7
    1e76:	0f b6       	in	r0, 0x3f	; 63
    1e78:	f8 94       	cli
    1e7a:	de bf       	out	0x3e, r29	; 62
    1e7c:	0f be       	out	0x3f, r0	; 63
    1e7e:	cd bf       	out	0x3d, r28	; 61
    1e80:	df 91       	pop	r29
    1e82:	cf 91       	pop	r28
    1e84:	08 95       	ret

00001e86 <init_USART0>:
		PORTB |= 0x40;
		_delay_ms(200);
	}
	
	PORTB &= 0x40;
}
    1e86:	cf 93       	push	r28
    1e88:	df 93       	push	r29
    1e8a:	1f 92       	push	r1
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
    1e90:	89 83       	std	Y+1, r24	; 0x01
    1e92:	85 ec       	ldi	r24, 0xC5	; 197
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	29 81       	ldd	r18, Y+1	; 0x01
    1e98:	22 2f       	mov	r18, r18
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	23 2f       	mov	r18, r19
    1e9e:	33 0f       	add	r19, r19
    1ea0:	33 0b       	sbc	r19, r19
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	20 83       	st	Z, r18
    1ea6:	84 ec       	ldi	r24, 0xC4	; 196
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	29 81       	ldd	r18, Y+1	; 0x01
    1eac:	fc 01       	movw	r30, r24
    1eae:	20 83       	st	Z, r18
    1eb0:	81 ec       	ldi	r24, 0xC1	; 193
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	28 e9       	ldi	r18, 0x98	; 152
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	20 83       	st	Z, r18
    1eba:	82 ec       	ldi	r24, 0xC2	; 194
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	26 e0       	ldi	r18, 0x06	; 6
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	20 83       	st	Z, r18
    1ec4:	0f 90       	pop	r0
    1ec6:	df 91       	pop	r29
    1ec8:	cf 91       	pop	r28
    1eca:	08 95       	ret

00001ecc <sendUART0data>:
    1ecc:	cf 93       	push	r28
    1ece:	df 93       	push	r29
    1ed0:	00 d0       	rcall	.+0      	; 0x1ed2 <sendUART0data+0x6>
    1ed2:	1f 92       	push	r1
    1ed4:	1f 92       	push	r1
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
    1eda:	9c 83       	std	Y+4, r25	; 0x04
    1edc:	8b 83       	std	Y+3, r24	; 0x03
    1ede:	6d 83       	std	Y+5, r22	; 0x05
    1ee0:	1a 82       	std	Y+2, r1	; 0x02
    1ee2:	19 82       	std	Y+1, r1	; 0x01
    1ee4:	1c c0       	rjmp	.+56     	; 0x1f1e <sendUART0data+0x52>
    1ee6:	00 00       	nop
    1ee8:	80 ec       	ldi	r24, 0xC0	; 192
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	fc 01       	movw	r30, r24
    1eee:	80 81       	ld	r24, Z
    1ef0:	88 2f       	mov	r24, r24
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	80 72       	andi	r24, 0x20	; 32
    1ef6:	99 27       	eor	r25, r25
    1ef8:	00 97       	sbiw	r24, 0x00	; 0
    1efa:	b1 f3       	breq	.-20     	; 0x1ee8 <sendUART0data+0x1c>
    1efc:	86 ec       	ldi	r24, 0xC6	; 198
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	29 81       	ldd	r18, Y+1	; 0x01
    1f02:	3a 81       	ldd	r19, Y+2	; 0x02
    1f04:	4b 81       	ldd	r20, Y+3	; 0x03
    1f06:	5c 81       	ldd	r21, Y+4	; 0x04
    1f08:	24 0f       	add	r18, r20
    1f0a:	35 1f       	adc	r19, r21
    1f0c:	f9 01       	movw	r30, r18
    1f0e:	20 81       	ld	r18, Z
    1f10:	fc 01       	movw	r30, r24
    1f12:	20 83       	st	Z, r18
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	9a 81       	ldd	r25, Y+2	; 0x02
    1f18:	01 96       	adiw	r24, 0x01	; 1
    1f1a:	9a 83       	std	Y+2, r25	; 0x02
    1f1c:	89 83       	std	Y+1, r24	; 0x01
    1f1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f20:	28 2f       	mov	r18, r24
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	89 81       	ldd	r24, Y+1	; 0x01
    1f26:	9a 81       	ldd	r25, Y+2	; 0x02
    1f28:	82 17       	cp	r24, r18
    1f2a:	93 07       	cpc	r25, r19
    1f2c:	e4 f2       	brlt	.-72     	; 0x1ee6 <sendUART0data+0x1a>
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	df 91       	pop	r29
    1f3a:	cf 91       	pop	r28
    1f3c:	08 95       	ret

00001f3e <toggleLED>:
    1f3e:	cf 93       	push	r28
    1f40:	df 93       	push	r29
    1f42:	cd b7       	in	r28, 0x3d	; 61
    1f44:	de b7       	in	r29, 0x3e	; 62
    1f46:	80 91 d5 03 	lds	r24, 0x03D5
    1f4a:	88 23       	and	r24, r24
    1f4c:	61 f0       	breq	.+24     	; 0x1f66 <toggleLED+0x28>
    1f4e:	10 92 d5 03 	sts	0x03D5, r1
    1f52:	85 e2       	ldi	r24, 0x25	; 37
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	25 e2       	ldi	r18, 0x25	; 37
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	f9 01       	movw	r30, r18
    1f5c:	20 81       	ld	r18, Z
    1f5e:	20 68       	ori	r18, 0x80	; 128
    1f60:	fc 01       	movw	r30, r24
    1f62:	20 83       	st	Z, r18
    1f64:	0c c0       	rjmp	.+24     	; 0x1f7e <toggleLED+0x40>
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	80 93 d5 03 	sts	0x03D5, r24
    1f6c:	85 e2       	ldi	r24, 0x25	; 37
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	25 e2       	ldi	r18, 0x25	; 37
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	f9 01       	movw	r30, r18
    1f76:	20 81       	ld	r18, Z
    1f78:	2f 77       	andi	r18, 0x7F	; 127
    1f7a:	fc 01       	movw	r30, r24
    1f7c:	20 83       	st	Z, r18
    1f7e:	df 91       	pop	r29
    1f80:	cf 91       	pop	r28
    1f82:	08 95       	ret

00001f84 <getTimePacket>:


void getTimePacket(uint8_t byteCount) {
    1f84:	cf 93       	push	r28
    1f86:	df 93       	push	r29
    1f88:	1f 92       	push	r1
    1f8a:	1f 92       	push	r1
    1f8c:	cd b7       	in	r28, 0x3d	; 61
    1f8e:	de b7       	in	r29, 0x3e	; 62
    1f90:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t crc;
	
	byteDelayCount = 0;
    1f92:	10 92 92 05 	sts	0x0592, r1
	
	while( (byteDelayCount < 2) && (rxByteCount < byteCount-1) );
    1f96:	00 00       	nop
    1f98:	80 91 92 05 	lds	r24, 0x0592
    1f9c:	82 30       	cpi	r24, 0x02	; 2
    1f9e:	58 f4       	brcc	.+22     	; 0x1fb6 <getTimePacket+0x32>
    1fa0:	80 91 7a 05 	lds	r24, 0x057A
    1fa4:	28 2f       	mov	r18, r24
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1faa:	88 2f       	mov	r24, r24
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	28 17       	cp	r18, r24
    1fb2:	39 07       	cpc	r19, r25
    1fb4:	8c f3       	brlt	.-30     	; 0x1f98 <getTimePacket+0x14>
//	while(rxByteCount < byteCount-1);
	
	rxByteCount = 0;
    1fb6:	10 92 7a 05 	sts	0x057A, r1
				
	if (byteDelayCount >= 2) {
    1fba:	80 91 92 05 	lds	r24, 0x0592
    1fbe:	82 30       	cpi	r24, 0x02	; 2
    1fc0:	78 f0       	brcs	.+30     	; 0x1fe0 <getTimePacket+0x5c>
		sprintf(data, "Timeout!\r\n");
    1fc2:	8b e0       	ldi	r24, 0x0B	; 11
    1fc4:	e3 e0       	ldi	r30, 0x03	; 3
    1fc6:	f2 e0       	ldi	r31, 0x02	; 2
    1fc8:	a8 ed       	ldi	r26, 0xD8	; 216
    1fca:	b3 e0       	ldi	r27, 0x03	; 3
    1fcc:	01 90       	ld	r0, Z+
    1fce:	0d 92       	st	X+, r0
    1fd0:	8a 95       	dec	r24
    1fd2:	e1 f7       	brne	.-8      	; 0x1fcc <getTimePacket+0x48>
		sendUART0data(data, 10);
    1fd4:	6a e0       	ldi	r22, 0x0A	; 10
    1fd6:	88 ed       	ldi	r24, 0xD8	; 216
    1fd8:	93 e0       	ldi	r25, 0x03	; 3
    1fda:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <sendUART0data>
    1fde:	6e c0       	rjmp	.+220    	; 0x20bc <getTimePacket+0x138>
	} else {	
		crc = crc8(rxPacket, byteCount-1);
    1fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe2:	81 50       	subi	r24, 0x01	; 1
    1fe4:	68 2f       	mov	r22, r24
    1fe6:	8b e7       	ldi	r24, 0x7B	; 123
    1fe8:	95 e0       	ldi	r25, 0x05	; 5
    1fea:	0e 94 c1 01 	call	0x382	; 0x382 <crc8>
    1fee:	89 83       	std	Y+1, r24	; 0x01
		
		if (crc != rxPacket[4]) {
    1ff0:	90 91 7f 05 	lds	r25, 0x057F
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
    1ff6:	98 17       	cp	r25, r24
    1ff8:	59 f1       	breq	.+86     	; 0x2050 <getTimePacket+0xcc>
			sprintf(data, "Packet CRC: %x	Calc CRC: %x\r\n", rxPacket[4], crc);
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	28 2f       	mov	r18, r24
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	80 91 7f 05 	lds	r24, 0x057F
    2004:	88 2f       	mov	r24, r24
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	43 2f       	mov	r20, r19
    200a:	4f 93       	push	r20
    200c:	2f 93       	push	r18
    200e:	29 2f       	mov	r18, r25
    2010:	2f 93       	push	r18
    2012:	8f 93       	push	r24
    2014:	8e e0       	ldi	r24, 0x0E	; 14
    2016:	92 e0       	ldi	r25, 0x02	; 2
    2018:	89 2f       	mov	r24, r25
    201a:	8f 93       	push	r24
    201c:	8e e0       	ldi	r24, 0x0E	; 14
    201e:	92 e0       	ldi	r25, 0x02	; 2
    2020:	8f 93       	push	r24
    2022:	88 ed       	ldi	r24, 0xD8	; 216
    2024:	93 e0       	ldi	r25, 0x03	; 3
    2026:	89 2f       	mov	r24, r25
    2028:	8f 93       	push	r24
    202a:	88 ed       	ldi	r24, 0xD8	; 216
    202c:	93 e0       	ldi	r25, 0x03	; 3
    202e:	8f 93       	push	r24
    2030:	0e 94 3c 20 	call	0x4078	; 0x4078 <sprintf>
    2034:	8d b7       	in	r24, 0x3d	; 61
    2036:	9e b7       	in	r25, 0x3e	; 62
    2038:	08 96       	adiw	r24, 0x08	; 8
    203a:	0f b6       	in	r0, 0x3f	; 63
    203c:	f8 94       	cli
    203e:	de bf       	out	0x3e, r29	; 62
    2040:	0f be       	out	0x3f, r0	; 63
    2042:	cd bf       	out	0x3d, r28	; 61
			sendUART0data(data, 32);
    2044:	60 e2       	ldi	r22, 0x20	; 32
    2046:	88 ed       	ldi	r24, 0xD8	; 216
    2048:	93 e0       	ldi	r25, 0x03	; 3
    204a:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <sendUART0data>
    204e:	36 c0       	rjmp	.+108    	; 0x20bc <getTimePacket+0x138>
		} else {
			sprintf(data, "Packet CRC: %x	Calc CRC: %x\r\n", rxPacket[4], crc);
    2050:	89 81       	ldd	r24, Y+1	; 0x01
    2052:	28 2f       	mov	r18, r24
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	80 91 7f 05 	lds	r24, 0x057F
    205a:	88 2f       	mov	r24, r24
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	43 2f       	mov	r20, r19
    2060:	4f 93       	push	r20
    2062:	2f 93       	push	r18
    2064:	29 2f       	mov	r18, r25
    2066:	2f 93       	push	r18
    2068:	8f 93       	push	r24
    206a:	8e e0       	ldi	r24, 0x0E	; 14
    206c:	92 e0       	ldi	r25, 0x02	; 2
    206e:	89 2f       	mov	r24, r25
    2070:	8f 93       	push	r24
    2072:	8e e0       	ldi	r24, 0x0E	; 14
    2074:	92 e0       	ldi	r25, 0x02	; 2
    2076:	8f 93       	push	r24
    2078:	88 ed       	ldi	r24, 0xD8	; 216
    207a:	93 e0       	ldi	r25, 0x03	; 3
    207c:	89 2f       	mov	r24, r25
    207e:	8f 93       	push	r24
    2080:	88 ed       	ldi	r24, 0xD8	; 216
    2082:	93 e0       	ldi	r25, 0x03	; 3
    2084:	8f 93       	push	r24
    2086:	0e 94 3c 20 	call	0x4078	; 0x4078 <sprintf>
    208a:	8d b7       	in	r24, 0x3d	; 61
    208c:	9e b7       	in	r25, 0x3e	; 62
    208e:	08 96       	adiw	r24, 0x08	; 8
    2090:	0f b6       	in	r0, 0x3f	; 63
    2092:	f8 94       	cli
    2094:	de bf       	out	0x3e, r29	; 62
    2096:	0f be       	out	0x3f, r0	; 63
    2098:	cd bf       	out	0x3d, r28	; 61
			sendUART0data(data, 32);
    209a:	60 e2       	ldi	r22, 0x20	; 32
    209c:	88 ed       	ldi	r24, 0xD8	; 216
    209e:	93 e0       	ldi	r25, 0x03	; 3
    20a0:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <sendUART0data>
			
			datetime.hours = rxPacket[1];
    20a4:	80 91 7c 05 	lds	r24, 0x057C
    20a8:	80 93 8d 05 	sts	0x058D, r24
			datetime.minutes = rxPacket[2];
    20ac:	80 91 7d 05 	lds	r24, 0x057D
    20b0:	80 93 8c 05 	sts	0x058C, r24
			datetime.seconds = rxPacket[3];
    20b4:	80 91 7e 05 	lds	r24, 0x057E
    20b8:	80 93 8b 05 	sts	0x058B, r24
			
		}
	}		
}
    20bc:	0f 90       	pop	r0
    20be:	0f 90       	pop	r0
    20c0:	df 91       	pop	r29
    20c2:	cf 91       	pop	r28
    20c4:	08 95       	ret

000020c6 <getElevationPacket>:

void getElevationPacket(uint8_t byteCount) {
    20c6:	cf 93       	push	r28
    20c8:	df 93       	push	r29
    20ca:	1f 92       	push	r1
    20cc:	1f 92       	push	r1
    20ce:	cd b7       	in	r28, 0x3d	; 61
    20d0:	de b7       	in	r29, 0x3e	; 62
    20d2:	8a 83       	std	Y+2, r24	; 0x02
	
	uint8_t crc;
	
	byteDelayCount = 0;
    20d4:	10 92 92 05 	sts	0x0592, r1
	
	while( (byteDelayCount < 2) && (rxByteCount < byteCount-1) );
    20d8:	00 00       	nop
    20da:	80 91 92 05 	lds	r24, 0x0592
    20de:	82 30       	cpi	r24, 0x02	; 2
    20e0:	58 f4       	brcc	.+22     	; 0x20f8 <getElevationPacket+0x32>
    20e2:	80 91 7a 05 	lds	r24, 0x057A
    20e6:	28 2f       	mov	r18, r24
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	8a 81       	ldd	r24, Y+2	; 0x02
    20ec:	88 2f       	mov	r24, r24
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	01 97       	sbiw	r24, 0x01	; 1
    20f2:	28 17       	cp	r18, r24
    20f4:	39 07       	cpc	r19, r25
    20f6:	8c f3       	brlt	.-30     	; 0x20da <getElevationPacket+0x14>
	//	while(rxByteCount < byteCount-1);
	
	rxByteCount = 0;
    20f8:	10 92 7a 05 	sts	0x057A, r1
	
	if (byteDelayCount >= 2) {
    20fc:	80 91 92 05 	lds	r24, 0x0592
    2100:	82 30       	cpi	r24, 0x02	; 2
    2102:	78 f0       	brcs	.+30     	; 0x2122 <getElevationPacket+0x5c>
		sprintf(data, "Timeout!\r\n");
    2104:	8b e0       	ldi	r24, 0x0B	; 11
    2106:	e3 e0       	ldi	r30, 0x03	; 3
    2108:	f2 e0       	ldi	r31, 0x02	; 2
    210a:	a8 ed       	ldi	r26, 0xD8	; 216
    210c:	b3 e0       	ldi	r27, 0x03	; 3
    210e:	01 90       	ld	r0, Z+
    2110:	0d 92       	st	X+, r0
    2112:	8a 95       	dec	r24
    2114:	e1 f7       	brne	.-8      	; 0x210e <getElevationPacket+0x48>
		sendUART0data(data, 10);
    2116:	6a e0       	ldi	r22, 0x0A	; 10
    2118:	88 ed       	ldi	r24, 0xD8	; 216
    211a:	93 e0       	ldi	r25, 0x03	; 3
    211c:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <sendUART0data>
    2120:	72 c0       	rjmp	.+228    	; 0x2206 <__stack+0x7>
		} else {
		crc = crc8(rxPacket, byteCount-1);
    2122:	8a 81       	ldd	r24, Y+2	; 0x02
    2124:	81 50       	subi	r24, 0x01	; 1
    2126:	68 2f       	mov	r22, r24
    2128:	8b e7       	ldi	r24, 0x7B	; 123
    212a:	95 e0       	ldi	r25, 0x05	; 5
    212c:	0e 94 c1 01 	call	0x382	; 0x382 <crc8>
    2130:	89 83       	std	Y+1, r24	; 0x01
		
		if (crc != rxPacket[3]) {
    2132:	90 91 7e 05 	lds	r25, 0x057E
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	98 17       	cp	r25, r24
    213a:	59 f1       	breq	.+86     	; 0x2192 <getElevationPacket+0xcc>
			sprintf(data, "Elevation Packet CRC: %x	Calc CRC: %x\r\n", rxPacket[3], crc);
    213c:	89 81       	ldd	r24, Y+1	; 0x01
    213e:	28 2f       	mov	r18, r24
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	80 91 7e 05 	lds	r24, 0x057E
    2146:	88 2f       	mov	r24, r24
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	43 2f       	mov	r20, r19
    214c:	4f 93       	push	r20
    214e:	2f 93       	push	r18
    2150:	29 2f       	mov	r18, r25
    2152:	2f 93       	push	r18
    2154:	8f 93       	push	r24
    2156:	8c e2       	ldi	r24, 0x2C	; 44
    2158:	92 e0       	ldi	r25, 0x02	; 2
    215a:	89 2f       	mov	r24, r25
    215c:	8f 93       	push	r24
    215e:	8c e2       	ldi	r24, 0x2C	; 44
    2160:	92 e0       	ldi	r25, 0x02	; 2
    2162:	8f 93       	push	r24
    2164:	88 ed       	ldi	r24, 0xD8	; 216
    2166:	93 e0       	ldi	r25, 0x03	; 3
    2168:	89 2f       	mov	r24, r25
    216a:	8f 93       	push	r24
    216c:	88 ed       	ldi	r24, 0xD8	; 216
    216e:	93 e0       	ldi	r25, 0x03	; 3
    2170:	8f 93       	push	r24
    2172:	0e 94 3c 20 	call	0x4078	; 0x4078 <sprintf>
    2176:	8d b7       	in	r24, 0x3d	; 61
    2178:	9e b7       	in	r25, 0x3e	; 62
    217a:	08 96       	adiw	r24, 0x08	; 8
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	f8 94       	cli
    2180:	de bf       	out	0x3e, r29	; 62
    2182:	0f be       	out	0x3f, r0	; 63
    2184:	cd bf       	out	0x3d, r28	; 61
			sendUART0data(data, 32);
    2186:	60 e2       	ldi	r22, 0x20	; 32
    2188:	88 ed       	ldi	r24, 0xD8	; 216
    218a:	93 e0       	ldi	r25, 0x03	; 3
    218c:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <sendUART0data>
    2190:	3a c0       	rjmp	.+116    	; 0x2206 <__stack+0x7>
			} else {
			sprintf(data, "Elevation Packet CRC: %x	Calc CRC: %x\r\n", rxPacket[3], crc);
    2192:	89 81       	ldd	r24, Y+1	; 0x01
    2194:	28 2f       	mov	r18, r24
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	80 91 7e 05 	lds	r24, 0x057E
    219c:	88 2f       	mov	r24, r24
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	43 2f       	mov	r20, r19
    21a2:	4f 93       	push	r20
    21a4:	2f 93       	push	r18
    21a6:	29 2f       	mov	r18, r25
    21a8:	2f 93       	push	r18
    21aa:	8f 93       	push	r24
    21ac:	8c e2       	ldi	r24, 0x2C	; 44
    21ae:	92 e0       	ldi	r25, 0x02	; 2
    21b0:	89 2f       	mov	r24, r25
    21b2:	8f 93       	push	r24
    21b4:	8c e2       	ldi	r24, 0x2C	; 44
    21b6:	92 e0       	ldi	r25, 0x02	; 2
    21b8:	8f 93       	push	r24
    21ba:	88 ed       	ldi	r24, 0xD8	; 216
    21bc:	93 e0       	ldi	r25, 0x03	; 3
    21be:	89 2f       	mov	r24, r25
    21c0:	8f 93       	push	r24
    21c2:	88 ed       	ldi	r24, 0xD8	; 216
    21c4:	93 e0       	ldi	r25, 0x03	; 3
    21c6:	8f 93       	push	r24
    21c8:	0e 94 3c 20 	call	0x4078	; 0x4078 <sprintf>
    21cc:	8d b7       	in	r24, 0x3d	; 61
    21ce:	9e b7       	in	r25, 0x3e	; 62
    21d0:	08 96       	adiw	r24, 0x08	; 8
    21d2:	0f b6       	in	r0, 0x3f	; 63
    21d4:	f8 94       	cli
    21d6:	de bf       	out	0x3e, r29	; 62
    21d8:	0f be       	out	0x3f, r0	; 63
    21da:	cd bf       	out	0x3d, r28	; 61
			sendUART0data(data, 32);
    21dc:	60 e2       	ldi	r22, 0x20	; 32
    21de:	88 ed       	ldi	r24, 0xD8	; 216
    21e0:	93 e0       	ldi	r25, 0x03	; 3
    21e2:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <sendUART0data>
			
			elevation = (rxPacket[1] << 8) + rxPacket[2];
    21e6:	80 91 7c 05 	lds	r24, 0x057C
    21ea:	88 2f       	mov	r24, r24
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	38 2f       	mov	r19, r24
    21f0:	22 27       	eor	r18, r18
    21f2:	80 91 7d 05 	lds	r24, 0x057D
    21f6:	88 2f       	mov	r24, r24
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	82 0f       	add	r24, r18
    21fc:	93 1f       	adc	r25, r19
    21fe:	90 93 02 02 	sts	0x0202, r25
    2202:	80 93 01 02 	sts	0x0201, r24
			
		}
	}	
}
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	df 91       	pop	r29
    220c:	cf 91       	pop	r28
    220e:	08 95       	ret

00002210 <getADCRangeSetPacket>:

void getADCRangeSetPacket(uint8_t byteCount) {
    2210:	cf 93       	push	r28
    2212:	df 93       	push	r29
    2214:	cd b7       	in	r28, 0x3d	; 61
    2216:	de b7       	in	r29, 0x3e	; 62
    2218:	ac 97       	sbiw	r28, 0x2c	; 44
    221a:	0f b6       	in	r0, 0x3f	; 63
    221c:	f8 94       	cli
    221e:	de bf       	out	0x3e, r29	; 62
    2220:	0f be       	out	0x3f, r0	; 63
    2222:	cd bf       	out	0x3d, r28	; 61
    2224:	8c a7       	std	Y+44, r24	; 0x2c
	
	uint8_t crc;
	
	byteDelayCount = 0;
    2226:	10 92 92 05 	sts	0x0592, r1
	
	while( (byteDelayCount < 2) && (rxByteCount < byteCount-1) );
    222a:	00 00       	nop
    222c:	80 91 92 05 	lds	r24, 0x0592
    2230:	82 30       	cpi	r24, 0x02	; 2
    2232:	58 f4       	brcc	.+22     	; 0x224a <getADCRangeSetPacket+0x3a>
    2234:	80 91 7a 05 	lds	r24, 0x057A
    2238:	28 2f       	mov	r18, r24
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	8c a5       	ldd	r24, Y+44	; 0x2c
    223e:	88 2f       	mov	r24, r24
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	28 17       	cp	r18, r24
    2246:	39 07       	cpc	r19, r25
    2248:	8c f3       	brlt	.-30     	; 0x222c <getADCRangeSetPacket+0x1c>
	//	while(rxByteCount < byteCount-1);
	
	rxByteCount = 0;
    224a:	10 92 7a 05 	sts	0x057A, r1
	
	if (byteDelayCount >= 2) {
    224e:	80 91 92 05 	lds	r24, 0x0592
    2252:	82 30       	cpi	r24, 0x02	; 2
    2254:	78 f0       	brcs	.+30     	; 0x2274 <getADCRangeSetPacket+0x64>
		sprintf(data, "Timeout!\r\n");
    2256:	8b e0       	ldi	r24, 0x0B	; 11
    2258:	e3 e0       	ldi	r30, 0x03	; 3
    225a:	f2 e0       	ldi	r31, 0x02	; 2
    225c:	a8 ed       	ldi	r26, 0xD8	; 216
    225e:	b3 e0       	ldi	r27, 0x03	; 3
    2260:	01 90       	ld	r0, Z+
    2262:	0d 92       	st	X+, r0
    2264:	8a 95       	dec	r24
    2266:	e1 f7       	brne	.-8      	; 0x2260 <getADCRangeSetPacket+0x50>
		sendUART0data(data, 10);
    2268:	6a e0       	ldi	r22, 0x0A	; 10
    226a:	88 ed       	ldi	r24, 0xD8	; 216
    226c:	93 e0       	ldi	r25, 0x03	; 3
    226e:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <sendUART0data>
    2272:	d1 c1       	rjmp	.+930    	; 0x2616 <getADCRangeSetPacket+0x406>
		} else {
		crc = crc8(rxPacket, byteCount-1);
    2274:	8c a5       	ldd	r24, Y+44	; 0x2c
    2276:	81 50       	subi	r24, 0x01	; 1
    2278:	68 2f       	mov	r22, r24
    227a:	8b e7       	ldi	r24, 0x7B	; 123
    227c:	95 e0       	ldi	r25, 0x05	; 5
    227e:	0e 94 c1 01 	call	0x382	; 0x382 <crc8>
    2282:	89 83       	std	Y+1, r24	; 0x01
		
		if (crc != rxPacket[2]) {
    2284:	90 91 7d 05 	lds	r25, 0x057D
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	98 17       	cp	r25, r24
    228c:	59 f1       	breq	.+86     	; 0x22e4 <getADCRangeSetPacket+0xd4>
			sprintf(data, "ADCRange Packet CRC: %x	Calc CRC: %x\r\n", rxPacket[2], crc);
    228e:	89 81       	ldd	r24, Y+1	; 0x01
    2290:	28 2f       	mov	r18, r24
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	80 91 7d 05 	lds	r24, 0x057D
    2298:	88 2f       	mov	r24, r24
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	43 2f       	mov	r20, r19
    229e:	4f 93       	push	r20
    22a0:	2f 93       	push	r18
    22a2:	29 2f       	mov	r18, r25
    22a4:	2f 93       	push	r18
    22a6:	8f 93       	push	r24
    22a8:	84 e5       	ldi	r24, 0x54	; 84
    22aa:	92 e0       	ldi	r25, 0x02	; 2
    22ac:	89 2f       	mov	r24, r25
    22ae:	8f 93       	push	r24
    22b0:	84 e5       	ldi	r24, 0x54	; 84
    22b2:	92 e0       	ldi	r25, 0x02	; 2
    22b4:	8f 93       	push	r24
    22b6:	88 ed       	ldi	r24, 0xD8	; 216
    22b8:	93 e0       	ldi	r25, 0x03	; 3
    22ba:	89 2f       	mov	r24, r25
    22bc:	8f 93       	push	r24
    22be:	88 ed       	ldi	r24, 0xD8	; 216
    22c0:	93 e0       	ldi	r25, 0x03	; 3
    22c2:	8f 93       	push	r24
    22c4:	0e 94 3c 20 	call	0x4078	; 0x4078 <sprintf>
    22c8:	8d b7       	in	r24, 0x3d	; 61
    22ca:	9e b7       	in	r25, 0x3e	; 62
    22cc:	08 96       	adiw	r24, 0x08	; 8
    22ce:	0f b6       	in	r0, 0x3f	; 63
    22d0:	f8 94       	cli
    22d2:	de bf       	out	0x3e, r29	; 62
    22d4:	0f be       	out	0x3f, r0	; 63
    22d6:	cd bf       	out	0x3d, r28	; 61
			sendUART0data(data, 32);
    22d8:	60 e2       	ldi	r22, 0x20	; 32
    22da:	88 ed       	ldi	r24, 0xD8	; 216
    22dc:	93 e0       	ldi	r25, 0x03	; 3
    22de:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <sendUART0data>
    22e2:	99 c1       	rjmp	.+818    	; 0x2616 <getADCRangeSetPacket+0x406>
			} else {
			sprintf(data, "ADCrange Packet CRC: %x	Calc CRC: %x\r\n", rxPacket[2], crc);
    22e4:	89 81       	ldd	r24, Y+1	; 0x01
    22e6:	28 2f       	mov	r18, r24
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	80 91 7d 05 	lds	r24, 0x057D
    22ee:	88 2f       	mov	r24, r24
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	43 2f       	mov	r20, r19
    22f4:	4f 93       	push	r20
    22f6:	2f 93       	push	r18
    22f8:	29 2f       	mov	r18, r25
    22fa:	2f 93       	push	r18
    22fc:	8f 93       	push	r24
    22fe:	8b e7       	ldi	r24, 0x7B	; 123
    2300:	92 e0       	ldi	r25, 0x02	; 2
    2302:	89 2f       	mov	r24, r25
    2304:	8f 93       	push	r24
    2306:	8b e7       	ldi	r24, 0x7B	; 123
    2308:	92 e0       	ldi	r25, 0x02	; 2
    230a:	8f 93       	push	r24
    230c:	88 ed       	ldi	r24, 0xD8	; 216
    230e:	93 e0       	ldi	r25, 0x03	; 3
    2310:	89 2f       	mov	r24, r25
    2312:	8f 93       	push	r24
    2314:	88 ed       	ldi	r24, 0xD8	; 216
    2316:	93 e0       	ldi	r25, 0x03	; 3
    2318:	8f 93       	push	r24
    231a:	0e 94 3c 20 	call	0x4078	; 0x4078 <sprintf>
    231e:	8d b7       	in	r24, 0x3d	; 61
    2320:	9e b7       	in	r25, 0x3e	; 62
    2322:	08 96       	adiw	r24, 0x08	; 8
    2324:	0f b6       	in	r0, 0x3f	; 63
    2326:	f8 94       	cli
    2328:	de bf       	out	0x3e, r29	; 62
    232a:	0f be       	out	0x3f, r0	; 63
    232c:	cd bf       	out	0x3d, r28	; 61
			sendUART0data(data, 32);
    232e:	60 e2       	ldi	r22, 0x20	; 32
    2330:	88 ed       	ldi	r24, 0xD8	; 216
    2332:	93 e0       	ldi	r25, 0x03	; 3
    2334:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <sendUART0data>
			
			SI_writeI2Cbyte(REG_COMMAND, ALS_PAUSE);
    2338:	6a e0       	ldi	r22, 0x0A	; 10
    233a:	88 e1       	ldi	r24, 0x18	; 24
    233c:	0e 94 b5 0c 	call	0x196a	; 0x196a <SI_writeI2Cbyte>
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	a0 e2       	ldi	r26, 0x20	; 32
    2346:	b1 e4       	ldi	r27, 0x41	; 65
    2348:	8a 83       	std	Y+2, r24	; 0x02
    234a:	9b 83       	std	Y+3, r25	; 0x03
    234c:	ac 83       	std	Y+4, r26	; 0x04
    234e:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	4a e7       	ldi	r20, 0x7A	; 122
    2356:	55 e4       	ldi	r21, 0x45	; 69
    2358:	6a 81       	ldd	r22, Y+2	; 0x02
    235a:	7b 81       	ldd	r23, Y+3	; 0x03
    235c:	8c 81       	ldd	r24, Y+4	; 0x04
    235e:	9d 81       	ldd	r25, Y+5	; 0x05
    2360:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	8e 83       	std	Y+6, r24	; 0x06
    236a:	9f 83       	std	Y+7, r25	; 0x07
    236c:	a8 87       	std	Y+8, r26	; 0x08
    236e:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	40 e8       	ldi	r20, 0x80	; 128
    2376:	5f e3       	ldi	r21, 0x3F	; 63
    2378:	6e 81       	ldd	r22, Y+6	; 0x06
    237a:	7f 81       	ldd	r23, Y+7	; 0x07
    237c:	88 85       	ldd	r24, Y+8	; 0x08
    237e:	99 85       	ldd	r25, Y+9	; 0x09
    2380:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__cmpsf2>
    2384:	88 23       	and	r24, r24
    2386:	2c f4       	brge	.+10     	; 0x2392 <getADCRangeSetPacket+0x182>
		__ticks = 1;
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	9b 87       	std	Y+11, r25	; 0x0b
    238e:	8a 87       	std	Y+10, r24	; 0x0a
    2390:	3f c0       	rjmp	.+126    	; 0x2410 <getADCRangeSetPacket+0x200>
	else if (__tmp > 65535)
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	3f ef       	ldi	r19, 0xFF	; 255
    2396:	4f e7       	ldi	r20, 0x7F	; 127
    2398:	57 e4       	ldi	r21, 0x47	; 71
    239a:	6e 81       	ldd	r22, Y+6	; 0x06
    239c:	7f 81       	ldd	r23, Y+7	; 0x07
    239e:	88 85       	ldd	r24, Y+8	; 0x08
    23a0:	99 85       	ldd	r25, Y+9	; 0x09
    23a2:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <__gesf2>
    23a6:	18 16       	cp	r1, r24
    23a8:	4c f5       	brge	.+82     	; 0x23fc <getADCRangeSetPacket+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	40 e2       	ldi	r20, 0x20	; 32
    23b0:	51 e4       	ldi	r21, 0x41	; 65
    23b2:	6a 81       	ldd	r22, Y+2	; 0x02
    23b4:	7b 81       	ldd	r23, Y+3	; 0x03
    23b6:	8c 81       	ldd	r24, Y+4	; 0x04
    23b8:	9d 81       	ldd	r25, Y+5	; 0x05
    23ba:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	bc 01       	movw	r22, r24
    23c4:	cd 01       	movw	r24, r26
    23c6:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <__fixunssfsi>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	9b 87       	std	Y+11, r25	; 0x0b
    23d0:	8a 87       	std	Y+10, r24	; 0x0a
    23d2:	0f c0       	rjmp	.+30     	; 0x23f2 <getADCRangeSetPacket+0x1e2>
    23d4:	80 e9       	ldi	r24, 0x90	; 144
    23d6:	91 e0       	ldi	r25, 0x01	; 1
    23d8:	9d 87       	std	Y+13, r25	; 0x0d
    23da:	8c 87       	std	Y+12, r24	; 0x0c
    23dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    23de:	9d 85       	ldd	r25, Y+13	; 0x0d
    23e0:	01 97       	sbiw	r24, 0x01	; 1
    23e2:	f1 f7       	brne	.-4      	; 0x23e0 <getADCRangeSetPacket+0x1d0>
    23e4:	9d 87       	std	Y+13, r25	; 0x0d
    23e6:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    23ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    23ec:	01 97       	sbiw	r24, 0x01	; 1
    23ee:	9b 87       	std	Y+11, r25	; 0x0b
    23f0:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    23f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    23f6:	00 97       	sbiw	r24, 0x00	; 0
    23f8:	69 f7       	brne	.-38     	; 0x23d4 <getADCRangeSetPacket+0x1c4>
    23fa:	14 c0       	rjmp	.+40     	; 0x2424 <getADCRangeSetPacket+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23fc:	6e 81       	ldd	r22, Y+6	; 0x06
    23fe:	7f 81       	ldd	r23, Y+7	; 0x07
    2400:	88 85       	ldd	r24, Y+8	; 0x08
    2402:	99 85       	ldd	r25, Y+9	; 0x09
    2404:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <__fixunssfsi>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	9b 87       	std	Y+11, r25	; 0x0b
    240e:	8a 87       	std	Y+10, r24	; 0x0a
    2410:	8a 85       	ldd	r24, Y+10	; 0x0a
    2412:	9b 85       	ldd	r25, Y+11	; 0x0b
    2414:	9f 87       	std	Y+15, r25	; 0x0f
    2416:	8e 87       	std	Y+14, r24	; 0x0e
    2418:	8e 85       	ldd	r24, Y+14	; 0x0e
    241a:	9f 85       	ldd	r25, Y+15	; 0x0f
    241c:	01 97       	sbiw	r24, 0x01	; 1
    241e:	f1 f7       	brne	.-4      	; 0x241c <getADCRangeSetPacket+0x20c>
    2420:	9f 87       	std	Y+15, r25	; 0x0f
    2422:	8e 87       	std	Y+14, r24	; 0x0e
			_delay_ms(10);
			
			if (rxPacket[1] == 1)
    2424:	80 91 7c 05 	lds	r24, 0x057C
    2428:	81 30       	cpi	r24, 0x01	; 1
    242a:	29 f4       	brne	.+10     	; 0x2436 <getADCRangeSetPacket+0x226>
				SI_writeI2Cbyte(REG_PARAM_WR, VIS_RANGE_HI);
    242c:	60 e2       	ldi	r22, 0x20	; 32
    242e:	87 e1       	ldi	r24, 0x17	; 23
    2430:	0e 94 b5 0c 	call	0x196a	; 0x196a <SI_writeI2Cbyte>
    2434:	04 c0       	rjmp	.+8      	; 0x243e <getADCRangeSetPacket+0x22e>
			else
				SI_writeI2Cbyte(REG_PARAM_WR, VIS_RANGE_NORMAL);
    2436:	60 e0       	ldi	r22, 0x00	; 0
    2438:	87 e1       	ldi	r24, 0x17	; 23
    243a:	0e 94 b5 0c 	call	0x196a	; 0x196a <SI_writeI2Cbyte>
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	a0 e2       	ldi	r26, 0x20	; 32
    2444:	b1 e4       	ldi	r27, 0x41	; 65
    2446:	88 8b       	std	Y+16, r24	; 0x10
    2448:	99 8b       	std	Y+17, r25	; 0x11
    244a:	aa 8b       	std	Y+18, r26	; 0x12
    244c:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	4a e7       	ldi	r20, 0x7A	; 122
    2454:	55 e4       	ldi	r21, 0x45	; 69
    2456:	68 89       	ldd	r22, Y+16	; 0x10
    2458:	79 89       	ldd	r23, Y+17	; 0x11
    245a:	8a 89       	ldd	r24, Y+18	; 0x12
    245c:	9b 89       	ldd	r25, Y+19	; 0x13
    245e:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	8c 8b       	std	Y+20, r24	; 0x14
    2468:	9d 8b       	std	Y+21, r25	; 0x15
    246a:	ae 8b       	std	Y+22, r26	; 0x16
    246c:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e8       	ldi	r20, 0x80	; 128
    2474:	5f e3       	ldi	r21, 0x3F	; 63
    2476:	6c 89       	ldd	r22, Y+20	; 0x14
    2478:	7d 89       	ldd	r23, Y+21	; 0x15
    247a:	8e 89       	ldd	r24, Y+22	; 0x16
    247c:	9f 89       	ldd	r25, Y+23	; 0x17
    247e:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__cmpsf2>
    2482:	88 23       	and	r24, r24
    2484:	2c f4       	brge	.+10     	; 0x2490 <getADCRangeSetPacket+0x280>
		__ticks = 1;
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	99 8f       	std	Y+25, r25	; 0x19
    248c:	88 8f       	std	Y+24, r24	; 0x18
    248e:	3f c0       	rjmp	.+126    	; 0x250e <getADCRangeSetPacket+0x2fe>
	else if (__tmp > 65535)
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	3f ef       	ldi	r19, 0xFF	; 255
    2494:	4f e7       	ldi	r20, 0x7F	; 127
    2496:	57 e4       	ldi	r21, 0x47	; 71
    2498:	6c 89       	ldd	r22, Y+20	; 0x14
    249a:	7d 89       	ldd	r23, Y+21	; 0x15
    249c:	8e 89       	ldd	r24, Y+22	; 0x16
    249e:	9f 89       	ldd	r25, Y+23	; 0x17
    24a0:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <__gesf2>
    24a4:	18 16       	cp	r1, r24
    24a6:	4c f5       	brge	.+82     	; 0x24fa <getADCRangeSetPacket+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	40 e2       	ldi	r20, 0x20	; 32
    24ae:	51 e4       	ldi	r21, 0x41	; 65
    24b0:	68 89       	ldd	r22, Y+16	; 0x10
    24b2:	79 89       	ldd	r23, Y+17	; 0x11
    24b4:	8a 89       	ldd	r24, Y+18	; 0x12
    24b6:	9b 89       	ldd	r25, Y+19	; 0x13
    24b8:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	bc 01       	movw	r22, r24
    24c2:	cd 01       	movw	r24, r26
    24c4:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <__fixunssfsi>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	99 8f       	std	Y+25, r25	; 0x19
    24ce:	88 8f       	std	Y+24, r24	; 0x18
    24d0:	0f c0       	rjmp	.+30     	; 0x24f0 <getADCRangeSetPacket+0x2e0>
    24d2:	80 e9       	ldi	r24, 0x90	; 144
    24d4:	91 e0       	ldi	r25, 0x01	; 1
    24d6:	9b 8f       	std	Y+27, r25	; 0x1b
    24d8:	8a 8f       	std	Y+26, r24	; 0x1a
    24da:	8a 8d       	ldd	r24, Y+26	; 0x1a
    24dc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	f1 f7       	brne	.-4      	; 0x24de <getADCRangeSetPacket+0x2ce>
    24e2:	9b 8f       	std	Y+27, r25	; 0x1b
    24e4:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e6:	88 8d       	ldd	r24, Y+24	; 0x18
    24e8:	99 8d       	ldd	r25, Y+25	; 0x19
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	99 8f       	std	Y+25, r25	; 0x19
    24ee:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f0:	88 8d       	ldd	r24, Y+24	; 0x18
    24f2:	99 8d       	ldd	r25, Y+25	; 0x19
    24f4:	00 97       	sbiw	r24, 0x00	; 0
    24f6:	69 f7       	brne	.-38     	; 0x24d2 <getADCRangeSetPacket+0x2c2>
    24f8:	14 c0       	rjmp	.+40     	; 0x2522 <getADCRangeSetPacket+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24fa:	6c 89       	ldd	r22, Y+20	; 0x14
    24fc:	7d 89       	ldd	r23, Y+21	; 0x15
    24fe:	8e 89       	ldd	r24, Y+22	; 0x16
    2500:	9f 89       	ldd	r25, Y+23	; 0x17
    2502:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <__fixunssfsi>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	99 8f       	std	Y+25, r25	; 0x19
    250c:	88 8f       	std	Y+24, r24	; 0x18
    250e:	88 8d       	ldd	r24, Y+24	; 0x18
    2510:	99 8d       	ldd	r25, Y+25	; 0x19
    2512:	9d 8f       	std	Y+29, r25	; 0x1d
    2514:	8c 8f       	std	Y+28, r24	; 0x1c
    2516:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2518:	9d 8d       	ldd	r25, Y+29	; 0x1d
    251a:	01 97       	sbiw	r24, 0x01	; 1
    251c:	f1 f7       	brne	.-4      	; 0x251a <getADCRangeSetPacket+0x30a>
    251e:	9d 8f       	std	Y+29, r25	; 0x1d
    2520:	8c 8f       	std	Y+28, r24	; 0x1c
				
			_delay_ms(10);
			SI_writeI2Cbyte(REG_COMMAND, (PARAM_SET | ALS_VIS_ADC_MISC));
    2522:	62 eb       	ldi	r22, 0xB2	; 178
    2524:	88 e1       	ldi	r24, 0x18	; 24
    2526:	0e 94 b5 0c 	call	0x196a	; 0x196a <SI_writeI2Cbyte>
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	a0 e2       	ldi	r26, 0x20	; 32
    2530:	b1 e4       	ldi	r27, 0x41	; 65
    2532:	8e 8f       	std	Y+30, r24	; 0x1e
    2534:	9f 8f       	std	Y+31, r25	; 0x1f
    2536:	a8 a3       	std	Y+32, r26	; 0x20
    2538:	b9 a3       	std	Y+33, r27	; 0x21

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	4a e7       	ldi	r20, 0x7A	; 122
    2540:	55 e4       	ldi	r21, 0x45	; 69
    2542:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2544:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2546:	88 a1       	ldd	r24, Y+32	; 0x20
    2548:	99 a1       	ldd	r25, Y+33	; 0x21
    254a:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	8a a3       	std	Y+34, r24	; 0x22
    2554:	9b a3       	std	Y+35, r25	; 0x23
    2556:	ac a3       	std	Y+36, r26	; 0x24
    2558:	bd a3       	std	Y+37, r27	; 0x25
	if (__tmp < 1.0)
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	40 e8       	ldi	r20, 0x80	; 128
    2560:	5f e3       	ldi	r21, 0x3F	; 63
    2562:	6a a1       	ldd	r22, Y+34	; 0x22
    2564:	7b a1       	ldd	r23, Y+35	; 0x23
    2566:	8c a1       	ldd	r24, Y+36	; 0x24
    2568:	9d a1       	ldd	r25, Y+37	; 0x25
    256a:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__cmpsf2>
    256e:	88 23       	and	r24, r24
    2570:	2c f4       	brge	.+10     	; 0x257c <getADCRangeSetPacket+0x36c>
		__ticks = 1;
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	9f a3       	std	Y+39, r25	; 0x27
    2578:	8e a3       	std	Y+38, r24	; 0x26
    257a:	3f c0       	rjmp	.+126    	; 0x25fa <getADCRangeSetPacket+0x3ea>
	else if (__tmp > 65535)
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	3f ef       	ldi	r19, 0xFF	; 255
    2580:	4f e7       	ldi	r20, 0x7F	; 127
    2582:	57 e4       	ldi	r21, 0x47	; 71
    2584:	6a a1       	ldd	r22, Y+34	; 0x22
    2586:	7b a1       	ldd	r23, Y+35	; 0x23
    2588:	8c a1       	ldd	r24, Y+36	; 0x24
    258a:	9d a1       	ldd	r25, Y+37	; 0x25
    258c:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <__gesf2>
    2590:	18 16       	cp	r1, r24
    2592:	4c f5       	brge	.+82     	; 0x25e6 <getADCRangeSetPacket+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	40 e2       	ldi	r20, 0x20	; 32
    259a:	51 e4       	ldi	r21, 0x41	; 65
    259c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    259e:	7f 8d       	ldd	r23, Y+31	; 0x1f
    25a0:	88 a1       	ldd	r24, Y+32	; 0x20
    25a2:	99 a1       	ldd	r25, Y+33	; 0x21
    25a4:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	bc 01       	movw	r22, r24
    25ae:	cd 01       	movw	r24, r26
    25b0:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <__fixunssfsi>
    25b4:	dc 01       	movw	r26, r24
    25b6:	cb 01       	movw	r24, r22
    25b8:	9f a3       	std	Y+39, r25	; 0x27
    25ba:	8e a3       	std	Y+38, r24	; 0x26
    25bc:	0f c0       	rjmp	.+30     	; 0x25dc <getADCRangeSetPacket+0x3cc>
    25be:	80 e9       	ldi	r24, 0x90	; 144
    25c0:	91 e0       	ldi	r25, 0x01	; 1
    25c2:	99 a7       	std	Y+41, r25	; 0x29
    25c4:	88 a7       	std	Y+40, r24	; 0x28
    25c6:	88 a5       	ldd	r24, Y+40	; 0x28
    25c8:	99 a5       	ldd	r25, Y+41	; 0x29
    25ca:	01 97       	sbiw	r24, 0x01	; 1
    25cc:	f1 f7       	brne	.-4      	; 0x25ca <getADCRangeSetPacket+0x3ba>
    25ce:	99 a7       	std	Y+41, r25	; 0x29
    25d0:	88 a7       	std	Y+40, r24	; 0x28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d2:	8e a1       	ldd	r24, Y+38	; 0x26
    25d4:	9f a1       	ldd	r25, Y+39	; 0x27
    25d6:	01 97       	sbiw	r24, 0x01	; 1
    25d8:	9f a3       	std	Y+39, r25	; 0x27
    25da:	8e a3       	std	Y+38, r24	; 0x26
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25dc:	8e a1       	ldd	r24, Y+38	; 0x26
    25de:	9f a1       	ldd	r25, Y+39	; 0x27
    25e0:	00 97       	sbiw	r24, 0x00	; 0
    25e2:	69 f7       	brne	.-38     	; 0x25be <getADCRangeSetPacket+0x3ae>
    25e4:	14 c0       	rjmp	.+40     	; 0x260e <getADCRangeSetPacket+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e6:	6a a1       	ldd	r22, Y+34	; 0x22
    25e8:	7b a1       	ldd	r23, Y+35	; 0x23
    25ea:	8c a1       	ldd	r24, Y+36	; 0x24
    25ec:	9d a1       	ldd	r25, Y+37	; 0x25
    25ee:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <__fixunssfsi>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	9f a3       	std	Y+39, r25	; 0x27
    25f8:	8e a3       	std	Y+38, r24	; 0x26
    25fa:	8e a1       	ldd	r24, Y+38	; 0x26
    25fc:	9f a1       	ldd	r25, Y+39	; 0x27
    25fe:	9b a7       	std	Y+43, r25	; 0x2b
    2600:	8a a7       	std	Y+42, r24	; 0x2a
    2602:	8a a5       	ldd	r24, Y+42	; 0x2a
    2604:	9b a5       	ldd	r25, Y+43	; 0x2b
    2606:	01 97       	sbiw	r24, 0x01	; 1
    2608:	f1 f7       	brne	.-4      	; 0x2606 <getADCRangeSetPacket+0x3f6>
    260a:	9b a7       	std	Y+43, r25	; 0x2b
    260c:	8a a7       	std	Y+42, r24	; 0x2a
				
			_delay_ms(10);
			//		Restart autonomous ALS loop
			SI_writeI2Cbyte(REG_COMMAND, ALS_AUTO);		
    260e:	6e e0       	ldi	r22, 0x0E	; 14
    2610:	88 e1       	ldi	r24, 0x18	; 24
    2612:	0e 94 b5 0c 	call	0x196a	; 0x196a <SI_writeI2Cbyte>
		}
	}	
}
    2616:	ac 96       	adiw	r28, 0x2c	; 44
    2618:	0f b6       	in	r0, 0x3f	; 63
    261a:	f8 94       	cli
    261c:	de bf       	out	0x3e, r29	; 62
    261e:	0f be       	out	0x3f, r0	; 63
    2620:	cd bf       	out	0x3d, r28	; 61
    2622:	df 91       	pop	r29
    2624:	cf 91       	pop	r28
    2626:	08 95       	ret

00002628 <__vector_3>:

// Will eventually handle the rain gauge
ISR(INT2_vect) {
    2628:	1f 92       	push	r1
    262a:	0f 92       	push	r0
    262c:	00 90 5f 00 	lds	r0, 0x005F
    2630:	0f 92       	push	r0
    2632:	11 24       	eor	r1, r1
    2634:	00 90 5b 00 	lds	r0, 0x005B
    2638:	0f 92       	push	r0
    263a:	2f 93       	push	r18
    263c:	3f 93       	push	r19
    263e:	4f 93       	push	r20
    2640:	5f 93       	push	r21
    2642:	6f 93       	push	r22
    2644:	7f 93       	push	r23
    2646:	8f 93       	push	r24
    2648:	9f 93       	push	r25
    264a:	af 93       	push	r26
    264c:	bf 93       	push	r27
    264e:	ef 93       	push	r30
    2650:	ff 93       	push	r31
    2652:	cf 93       	push	r28
    2654:	df 93       	push	r29
    2656:	cd b7       	in	r28, 0x3d	; 61
    2658:	de b7       	in	r29, 0x3e	; 62
	toggleLED();
    265a:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <toggleLED>
}
    265e:	df 91       	pop	r29
    2660:	cf 91       	pop	r28
    2662:	ff 91       	pop	r31
    2664:	ef 91       	pop	r30
    2666:	bf 91       	pop	r27
    2668:	af 91       	pop	r26
    266a:	9f 91       	pop	r25
    266c:	8f 91       	pop	r24
    266e:	7f 91       	pop	r23
    2670:	6f 91       	pop	r22
    2672:	5f 91       	pop	r21
    2674:	4f 91       	pop	r20
    2676:	3f 91       	pop	r19
    2678:	2f 91       	pop	r18
    267a:	0f 90       	pop	r0
    267c:	00 92 5b 00 	sts	0x005B, r0
    2680:	0f 90       	pop	r0
    2682:	00 92 5f 00 	sts	0x005F, r0
    2686:	0f 90       	pop	r0
    2688:	1f 90       	pop	r1
    268a:	18 95       	reti

0000268c <__vector_4>:

// Will eventually handle the anemometer magnetic reed switch
ISR(INT3_vect) {
    268c:	1f 92       	push	r1
    268e:	0f 92       	push	r0
    2690:	00 90 5f 00 	lds	r0, 0x005F
    2694:	0f 92       	push	r0
    2696:	11 24       	eor	r1, r1
    2698:	cf 93       	push	r28
    269a:	df 93       	push	r29
    269c:	cd b7       	in	r28, 0x3d	; 61
    269e:	de b7       	in	r29, 0x3e	; 62
	
}
    26a0:	df 91       	pop	r29
    26a2:	cf 91       	pop	r28
    26a4:	0f 90       	pop	r0
    26a6:	00 92 5f 00 	sts	0x005F, r0
    26aa:	0f 90       	pop	r0
    26ac:	1f 90       	pop	r1
    26ae:	18 95       	reti

000026b0 <__vector_5>:

// Will eventually handle the AS3935
ISR(INT4_vect) {
    26b0:	1f 92       	push	r1
    26b2:	0f 92       	push	r0
    26b4:	00 90 5f 00 	lds	r0, 0x005F
    26b8:	0f 92       	push	r0
    26ba:	11 24       	eor	r1, r1
    26bc:	cf 93       	push	r28
    26be:	df 93       	push	r29
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
	
}
    26c4:	df 91       	pop	r29
    26c6:	cf 91       	pop	r28
    26c8:	0f 90       	pop	r0
    26ca:	00 92 5f 00 	sts	0x005F, r0
    26ce:	0f 90       	pop	r0
    26d0:	1f 90       	pop	r1
    26d2:	18 95       	reti

000026d4 <__vector_6>:

// Will eventually handle the si1145 UV Sensor
ISR(INT5_vect) {
    26d4:	1f 92       	push	r1
    26d6:	0f 92       	push	r0
    26d8:	00 90 5f 00 	lds	r0, 0x005F
    26dc:	0f 92       	push	r0
    26de:	11 24       	eor	r1, r1
    26e0:	00 90 5b 00 	lds	r0, 0x005B
    26e4:	0f 92       	push	r0
    26e6:	2f 93       	push	r18
    26e8:	3f 93       	push	r19
    26ea:	4f 93       	push	r20
    26ec:	5f 93       	push	r21
    26ee:	6f 93       	push	r22
    26f0:	7f 93       	push	r23
    26f2:	8f 93       	push	r24
    26f4:	9f 93       	push	r25
    26f6:	af 93       	push	r26
    26f8:	bf 93       	push	r27
    26fa:	ef 93       	push	r30
    26fc:	ff 93       	push	r31
    26fe:	cf 93       	push	r28
    2700:	df 93       	push	r29
    2702:	cd b7       	in	r28, 0x3d	; 61
    2704:	de b7       	in	r29, 0x3e	; 62
	toggleLED();
    2706:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <toggleLED>
	SI_writeI2Cbyte(REG_IRQ_STATUS, 0x03);
    270a:	63 e0       	ldi	r22, 0x03	; 3
    270c:	81 e2       	ldi	r24, 0x21	; 33
    270e:	0e 94 b5 0c 	call	0x196a	; 0x196a <SI_writeI2Cbyte>
	
	rawLightData = SI_readI2Cword(REG_ALS_VIS_DATA0);
    2712:	82 e2       	ldi	r24, 0x22	; 34
    2714:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <SI_readI2Cword>
    2718:	90 93 61 04 	sts	0x0461, r25
    271c:	80 93 60 04 	sts	0x0460, r24
	uvIndex = SI_readI2Cword(REG_AUXDAT0_UVI0);
    2720:	8c e2       	ldi	r24, 0x2C	; 44
    2722:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <SI_readI2Cword>
    2726:	90 93 63 04 	sts	0x0463, r25
    272a:	80 93 62 04 	sts	0x0462, r24
}
    272e:	df 91       	pop	r29
    2730:	cf 91       	pop	r28
    2732:	ff 91       	pop	r31
    2734:	ef 91       	pop	r30
    2736:	bf 91       	pop	r27
    2738:	af 91       	pop	r26
    273a:	9f 91       	pop	r25
    273c:	8f 91       	pop	r24
    273e:	7f 91       	pop	r23
    2740:	6f 91       	pop	r22
    2742:	5f 91       	pop	r21
    2744:	4f 91       	pop	r20
    2746:	3f 91       	pop	r19
    2748:	2f 91       	pop	r18
    274a:	0f 90       	pop	r0
    274c:	00 92 5b 00 	sts	0x005B, r0
    2750:	0f 90       	pop	r0
    2752:	00 92 5f 00 	sts	0x005F, r0
    2756:	0f 90       	pop	r0
    2758:	1f 90       	pop	r1
    275a:	18 95       	reti

0000275c <__vector_21>:

// Compare ISR for 8 bit Timer 0
ISR(TIMER0_COMPA_vect) {
    275c:	1f 92       	push	r1
    275e:	0f 92       	push	r0
    2760:	00 90 5f 00 	lds	r0, 0x005F
    2764:	0f 92       	push	r0
    2766:	11 24       	eor	r1, r1
    2768:	cf 93       	push	r28
    276a:	df 93       	push	r29
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
	
}
    2770:	df 91       	pop	r29
    2772:	cf 91       	pop	r28
    2774:	0f 90       	pop	r0
    2776:	00 92 5f 00 	sts	0x005F, r0
    277a:	0f 90       	pop	r0
    277c:	1f 90       	pop	r1
    277e:	18 95       	reti

00002780 <__vector_17>:

// Compare ISR for 16 bit Timer 1
// Will be used as an accurate seconds counter for timestamping and reading sensor data 
ISR(TIMER1_COMPA_vect) {
    2780:	1f 92       	push	r1
    2782:	0f 92       	push	r0
    2784:	00 90 5f 00 	lds	r0, 0x005F
    2788:	0f 92       	push	r0
    278a:	11 24       	eor	r1, r1
    278c:	00 90 5b 00 	lds	r0, 0x005B
    2790:	0f 92       	push	r0
    2792:	ff 92       	push	r15
    2794:	0f 93       	push	r16
    2796:	1f 93       	push	r17
    2798:	2f 93       	push	r18
    279a:	3f 93       	push	r19
    279c:	4f 93       	push	r20
    279e:	5f 93       	push	r21
    27a0:	6f 93       	push	r22
    27a2:	7f 93       	push	r23
    27a4:	8f 93       	push	r24
    27a6:	9f 93       	push	r25
    27a8:	af 93       	push	r26
    27aa:	bf 93       	push	r27
    27ac:	ef 93       	push	r30
    27ae:	ff 93       	push	r31
    27b0:	cf 93       	push	r28
    27b2:	df 93       	push	r29
    27b4:	cd b7       	in	r28, 0x3d	; 61
    27b6:	de b7       	in	r29, 0x3e	; 62
	
//	toggleLED();
	
	datetime.seconds++;
    27b8:	80 91 8b 05 	lds	r24, 0x058B
    27bc:	8f 5f       	subi	r24, 0xFF	; 255
    27be:	80 93 8b 05 	sts	0x058B, r24
	
	if (datetime.seconds > 59) {
    27c2:	80 91 8b 05 	lds	r24, 0x058B
    27c6:	8c 33       	cpi	r24, 0x3C	; 60
    27c8:	f0 f0       	brcs	.+60     	; 0x2806 <__vector_17+0x86>
		datetime.seconds = 0;
    27ca:	10 92 8b 05 	sts	0x058B, r1
		datetime.minutes++;
    27ce:	80 91 8c 05 	lds	r24, 0x058C
    27d2:	8f 5f       	subi	r24, 0xFF	; 255
    27d4:	80 93 8c 05 	sts	0x058C, r24
	
		if (datetime.minutes > 59) {
    27d8:	80 91 8c 05 	lds	r24, 0x058C
    27dc:	8c 33       	cpi	r24, 0x3C	; 60
    27de:	98 f0       	brcs	.+38     	; 0x2806 <__vector_17+0x86>
			datetime.seconds = 0;
    27e0:	10 92 8b 05 	sts	0x058B, r1
			datetime.minutes = 0;
    27e4:	10 92 8c 05 	sts	0x058C, r1
			datetime.hours++;
    27e8:	80 91 8d 05 	lds	r24, 0x058D
    27ec:	8f 5f       	subi	r24, 0xFF	; 255
    27ee:	80 93 8d 05 	sts	0x058D, r24
			
			if (datetime.hours > 23) {
    27f2:	80 91 8d 05 	lds	r24, 0x058D
    27f6:	88 31       	cpi	r24, 0x18	; 24
    27f8:	30 f0       	brcs	.+12     	; 0x2806 <__vector_17+0x86>
				datetime.seconds = 0;
    27fa:	10 92 8b 05 	sts	0x058B, r1
				datetime.minutes = 0;
    27fe:	10 92 8c 05 	sts	0x058C, r1
				datetime.hours = 0;
    2802:	10 92 8d 05 	sts	0x058D, r1
			}	
		}
	}
	
	byteDelayCount ++;
    2806:	80 91 92 05 	lds	r24, 0x0592
    280a:	8f 5f       	subi	r24, 0xFF	; 255
    280c:	80 93 92 05 	sts	0x0592, r24
//	count++;
	
//	if (count >= 900) { //Every 15 minutes
//	if (count >= 10) { //Every 10 seconds
	
		if (isPressureSensorPresent) {
    2810:	80 91 d6 03 	lds	r24, 0x03D6
    2814:	88 23       	and	r24, r24
    2816:	09 f4       	brne	.+2      	; 0x281a <__vector_17+0x9a>
    2818:	77 c0       	rjmp	.+238    	; 0x2908 <__vector_17+0x188>
			temperature = getBMPtemp();
    281a:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <getBMPtemp>
    281e:	dc 01       	movw	r26, r24
    2820:	cb 01       	movw	r24, r22
    2822:	80 93 58 04 	sts	0x0458, r24
    2826:	90 93 59 04 	sts	0x0459, r25
    282a:	a0 93 5a 04 	sts	0x045A, r26
    282e:	b0 93 5b 04 	sts	0x045B, r27
			pressure = getBMPpressure(elevation);
    2832:	80 91 01 02 	lds	r24, 0x0201
    2836:	90 91 02 02 	lds	r25, 0x0202
    283a:	0e 94 75 06 	call	0xcea	; 0xcea <getBMPpressure>
    283e:	dc 01       	movw	r26, r24
    2840:	cb 01       	movw	r24, r22
    2842:	80 93 5c 04 	sts	0x045C, r24
    2846:	90 93 5d 04 	sts	0x045D, r25
    284a:	a0 93 5e 04 	sts	0x045E, r26
    284e:	b0 93 5f 04 	sts	0x045F, r27
			memset(data, 0, 128);
    2852:	40 e8       	ldi	r20, 0x80	; 128
    2854:	50 e0       	ldi	r21, 0x00	; 0
    2856:	60 e0       	ldi	r22, 0x00	; 0
    2858:	70 e0       	ldi	r23, 0x00	; 0
    285a:	88 ed       	ldi	r24, 0xD8	; 216
    285c:	93 e0       	ldi	r25, 0x03	; 3
    285e:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <memset>
			sprintf(data, "\r\nTemperature AND Pressure @time: %d:%d:%d	%.1f	%.2f\r\n", datetime.hours, datetime.minutes, datetime.seconds, temperature, pressure);
    2862:	20 91 5c 04 	lds	r18, 0x045C
    2866:	30 91 5d 04 	lds	r19, 0x045D
    286a:	40 91 5e 04 	lds	r20, 0x045E
    286e:	50 91 5f 04 	lds	r21, 0x045F
    2872:	80 91 58 04 	lds	r24, 0x0458
    2876:	90 91 59 04 	lds	r25, 0x0459
    287a:	a0 91 5a 04 	lds	r26, 0x045A
    287e:	b0 91 5b 04 	lds	r27, 0x045B
    2882:	60 91 8b 05 	lds	r22, 0x058B
    2886:	06 2f       	mov	r16, r22
    2888:	10 e0       	ldi	r17, 0x00	; 0
    288a:	60 91 8c 05 	lds	r22, 0x058C
    288e:	e6 2f       	mov	r30, r22
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	60 91 8d 05 	lds	r22, 0x058D
    2896:	66 2f       	mov	r22, r22
    2898:	70 e0       	ldi	r23, 0x00	; 0
    289a:	f5 2e       	mov	r15, r21
    289c:	ff 92       	push	r15
    289e:	f4 2e       	mov	r15, r20
    28a0:	ff 92       	push	r15
    28a2:	f3 2e       	mov	r15, r19
    28a4:	ff 92       	push	r15
    28a6:	2f 93       	push	r18
    28a8:	2b 2f       	mov	r18, r27
    28aa:	2f 93       	push	r18
    28ac:	2a 2f       	mov	r18, r26
    28ae:	2f 93       	push	r18
    28b0:	29 2f       	mov	r18, r25
    28b2:	2f 93       	push	r18
    28b4:	8f 93       	push	r24
    28b6:	81 2f       	mov	r24, r17
    28b8:	8f 93       	push	r24
    28ba:	80 2f       	mov	r24, r16
    28bc:	8f 93       	push	r24
    28be:	8f 2f       	mov	r24, r31
    28c0:	8f 93       	push	r24
    28c2:	8e 2f       	mov	r24, r30
    28c4:	8f 93       	push	r24
    28c6:	87 2f       	mov	r24, r23
    28c8:	8f 93       	push	r24
    28ca:	86 2f       	mov	r24, r22
    28cc:	8f 93       	push	r24
    28ce:	82 ea       	ldi	r24, 0xA2	; 162
    28d0:	92 e0       	ldi	r25, 0x02	; 2
    28d2:	89 2f       	mov	r24, r25
    28d4:	8f 93       	push	r24
    28d6:	82 ea       	ldi	r24, 0xA2	; 162
    28d8:	92 e0       	ldi	r25, 0x02	; 2
    28da:	8f 93       	push	r24
    28dc:	88 ed       	ldi	r24, 0xD8	; 216
    28de:	93 e0       	ldi	r25, 0x03	; 3
    28e0:	89 2f       	mov	r24, r25
    28e2:	8f 93       	push	r24
    28e4:	88 ed       	ldi	r24, 0xD8	; 216
    28e6:	93 e0       	ldi	r25, 0x03	; 3
    28e8:	8f 93       	push	r24
    28ea:	0e 94 3c 20 	call	0x4078	; 0x4078 <sprintf>
    28ee:	8d b7       	in	r24, 0x3d	; 61
    28f0:	9e b7       	in	r25, 0x3e	; 62
    28f2:	42 96       	adiw	r24, 0x12	; 18
    28f4:	0f b6       	in	r0, 0x3f	; 63
    28f6:	f8 94       	cli
    28f8:	de bf       	out	0x3e, r29	; 62
    28fa:	0f be       	out	0x3f, r0	; 63
    28fc:	cd bf       	out	0x3d, r28	; 61
			sendUART0data(data, sizeof(data));
    28fe:	60 e8       	ldi	r22, 0x80	; 128
    2900:	88 ed       	ldi	r24, 0xD8	; 216
    2902:	93 e0       	ldi	r25, 0x03	; 3
    2904:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <sendUART0data>
		}
		
		if (isLightSensorPresent) {
    2908:	80 91 d7 03 	lds	r24, 0x03D7
    290c:	88 23       	and	r24, r24
    290e:	09 f4       	brne	.+2      	; 0x2912 <__vector_17+0x192>
    2910:	48 c0       	rjmp	.+144    	; 0x29a2 <__vector_17+0x222>
			memset(data, 0, 128);
    2912:	40 e8       	ldi	r20, 0x80	; 128
    2914:	50 e0       	ldi	r21, 0x00	; 0
    2916:	60 e0       	ldi	r22, 0x00	; 0
    2918:	70 e0       	ldi	r23, 0x00	; 0
    291a:	88 ed       	ldi	r24, 0xD8	; 216
    291c:	93 e0       	ldi	r25, 0x03	; 3
    291e:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <memset>
			sprintf(data, "Ambient Light Level and Sensor Vdd @time: %d:%d:%d	%4x		%4x \r\n", datetime.hours, datetime.minutes, datetime.seconds, rawLightData, uvIndex);
    2922:	e0 91 62 04 	lds	r30, 0x0462
    2926:	f0 91 63 04 	lds	r31, 0x0463
    292a:	60 91 60 04 	lds	r22, 0x0460
    292e:	70 91 61 04 	lds	r23, 0x0461
    2932:	80 91 8b 05 	lds	r24, 0x058B
    2936:	48 2f       	mov	r20, r24
    2938:	50 e0       	ldi	r21, 0x00	; 0
    293a:	80 91 8c 05 	lds	r24, 0x058C
    293e:	28 2f       	mov	r18, r24
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	80 91 8d 05 	lds	r24, 0x058D
    2946:	88 2f       	mov	r24, r24
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	af 2f       	mov	r26, r31
    294c:	af 93       	push	r26
    294e:	ef 93       	push	r30
    2950:	e7 2f       	mov	r30, r23
    2952:	ef 93       	push	r30
    2954:	6f 93       	push	r22
    2956:	65 2f       	mov	r22, r21
    2958:	6f 93       	push	r22
    295a:	4f 93       	push	r20
    295c:	43 2f       	mov	r20, r19
    295e:	4f 93       	push	r20
    2960:	2f 93       	push	r18
    2962:	29 2f       	mov	r18, r25
    2964:	2f 93       	push	r18
    2966:	8f 93       	push	r24
    2968:	89 ed       	ldi	r24, 0xD9	; 217
    296a:	92 e0       	ldi	r25, 0x02	; 2
    296c:	89 2f       	mov	r24, r25
    296e:	8f 93       	push	r24
    2970:	89 ed       	ldi	r24, 0xD9	; 217
    2972:	92 e0       	ldi	r25, 0x02	; 2
    2974:	8f 93       	push	r24
    2976:	88 ed       	ldi	r24, 0xD8	; 216
    2978:	93 e0       	ldi	r25, 0x03	; 3
    297a:	89 2f       	mov	r24, r25
    297c:	8f 93       	push	r24
    297e:	88 ed       	ldi	r24, 0xD8	; 216
    2980:	93 e0       	ldi	r25, 0x03	; 3
    2982:	8f 93       	push	r24
    2984:	0e 94 3c 20 	call	0x4078	; 0x4078 <sprintf>
    2988:	8d b7       	in	r24, 0x3d	; 61
    298a:	9e b7       	in	r25, 0x3e	; 62
    298c:	0e 96       	adiw	r24, 0x0e	; 14
    298e:	0f b6       	in	r0, 0x3f	; 63
    2990:	f8 94       	cli
    2992:	de bf       	out	0x3e, r29	; 62
    2994:	0f be       	out	0x3f, r0	; 63
    2996:	cd bf       	out	0x3d, r28	; 61
			sendUART0data(data, sizeof(data));
    2998:	60 e8       	ldi	r22, 0x80	; 128
    299a:	88 ed       	ldi	r24, 0xD8	; 216
    299c:	93 e0       	ldi	r25, 0x03	; 3
    299e:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <sendUART0data>
		}
	
//		count = 0;
//	}	

}
    29a2:	df 91       	pop	r29
    29a4:	cf 91       	pop	r28
    29a6:	ff 91       	pop	r31
    29a8:	ef 91       	pop	r30
    29aa:	bf 91       	pop	r27
    29ac:	af 91       	pop	r26
    29ae:	9f 91       	pop	r25
    29b0:	8f 91       	pop	r24
    29b2:	7f 91       	pop	r23
    29b4:	6f 91       	pop	r22
    29b6:	5f 91       	pop	r21
    29b8:	4f 91       	pop	r20
    29ba:	3f 91       	pop	r19
    29bc:	2f 91       	pop	r18
    29be:	1f 91       	pop	r17
    29c0:	0f 91       	pop	r16
    29c2:	ff 90       	pop	r15
    29c4:	0f 90       	pop	r0
    29c6:	00 92 5b 00 	sts	0x005B, r0
    29ca:	0f 90       	pop	r0
    29cc:	00 92 5f 00 	sts	0x005F, r0
    29d0:	0f 90       	pop	r0
    29d2:	1f 90       	pop	r1
    29d4:	18 95       	reti

000029d6 <__vector_25>:


ISR(USART0_RX_vect) {
    29d6:	1f 92       	push	r1
    29d8:	0f 92       	push	r0
    29da:	00 90 5f 00 	lds	r0, 0x005F
    29de:	0f 92       	push	r0
    29e0:	11 24       	eor	r1, r1
    29e2:	00 90 5b 00 	lds	r0, 0x005B
    29e6:	0f 92       	push	r0
    29e8:	2f 93       	push	r18
    29ea:	3f 93       	push	r19
    29ec:	8f 93       	push	r24
    29ee:	9f 93       	push	r25
    29f0:	ef 93       	push	r30
    29f2:	ff 93       	push	r31
    29f4:	cf 93       	push	r28
    29f6:	df 93       	push	r29
    29f8:	cd b7       	in	r28, 0x3d	; 61
    29fa:	de b7       	in	r29, 0x3e	; 62
	
	rxPacket[rxByteCount] = UDR0;	
    29fc:	80 91 7a 05 	lds	r24, 0x057A
    2a00:	88 2f       	mov	r24, r24
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	26 ec       	ldi	r18, 0xC6	; 198
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	f9 01       	movw	r30, r18
    2a0a:	20 81       	ld	r18, Z
    2a0c:	85 58       	subi	r24, 0x85	; 133
    2a0e:	9a 4f       	sbci	r25, 0xFA	; 250
    2a10:	fc 01       	movw	r30, r24
    2a12:	20 83       	st	Z, r18
//	sprintf(data, "RXpacket %d:	%x\r\n", rxByteCount, rxPacket[rxByteCount]);
//	sprintf(data, "UCSR0A: %x\r\n", UCSR0A);
//	sendUART0data(data, 20);
	rxByteCount++;
    2a14:	80 91 7a 05 	lds	r24, 0x057A
    2a18:	8f 5f       	subi	r24, 0xFF	; 255
    2a1a:	80 93 7a 05 	sts	0x057A, r24
}
    2a1e:	df 91       	pop	r29
    2a20:	cf 91       	pop	r28
    2a22:	ff 91       	pop	r31
    2a24:	ef 91       	pop	r30
    2a26:	9f 91       	pop	r25
    2a28:	8f 91       	pop	r24
    2a2a:	3f 91       	pop	r19
    2a2c:	2f 91       	pop	r18
    2a2e:	0f 90       	pop	r0
    2a30:	00 92 5b 00 	sts	0x005B, r0
    2a34:	0f 90       	pop	r0
    2a36:	00 92 5f 00 	sts	0x005F, r0
    2a3a:	0f 90       	pop	r0
    2a3c:	1f 90       	pop	r1
    2a3e:	18 95       	reti

00002a40 <main>:



int main (void)
{
    2a40:	cf 93       	push	r28
    2a42:	df 93       	push	r29
    2a44:	cd b7       	in	r28, 0x3d	; 61
    2a46:	de b7       	in	r29, 0x3e	; 62
    2a48:	62 97       	sbiw	r28, 0x12	; 18
    2a4a:	0f b6       	in	r0, 0x3f	; 63
    2a4c:	f8 94       	cli
    2a4e:	de bf       	out	0x3e, r29	; 62
    2a50:	0f be       	out	0x3f, r0	; 63
    2a52:	cd bf       	out	0x3d, r28	; 61
// Set up clock
//	CLKPR = 0x80;
//	CLKPR = 0x00;

// Set up Port B	
	DDRB = 0xff;	
    2a54:	84 e2       	ldi	r24, 0x24	; 36
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	2f ef       	ldi	r18, 0xFF	; 255
    2a5a:	fc 01       	movw	r30, r24
    2a5c:	20 83       	st	Z, r18
	PORTB &= 0x7f; // Turn off LED
    2a5e:	85 e2       	ldi	r24, 0x25	; 37
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	25 e2       	ldi	r18, 0x25	; 37
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	f9 01       	movw	r30, r18
    2a68:	20 81       	ld	r18, Z
    2a6a:	2f 77       	andi	r18, 0x7F	; 127
    2a6c:	fc 01       	movw	r30, r24
    2a6e:	20 83       	st	Z, r18
	
	cli();
    2a70:	f8 94       	cli
	
//Set up external interrupts

	// INT2 for rain gauge
	// INT3 for anemometer
	EICRA = 0xa0;	// Enable falling edge interrupts on INT3 and INT2	
    2a72:	89 e6       	ldi	r24, 0x69	; 105
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	20 ea       	ldi	r18, 0xA0	; 160
    2a78:	fc 01       	movw	r30, r24
    2a7a:	20 83       	st	Z, r18

	// INT4 for the AS3935
	// INT5 for the UV sensor
	EICRB = 0x0a; // Enable falling edge int on INT5 and INT4
    2a7c:	8a e6       	ldi	r24, 0x6A	; 106
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	2a e0       	ldi	r18, 0x0A	; 10
    2a82:	fc 01       	movw	r30, r24
    2a84:	20 83       	st	Z, r18
	
	// Interrupt mask
	EIMSK = 0x3c;	// Mask the above mentioned interrupts
    2a86:	8d e3       	ldi	r24, 0x3D	; 61
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	2c e3       	ldi	r18, 0x3C	; 60
    2a8c:	fc 01       	movw	r30, r24
    2a8e:	20 83       	st	Z, r18
	
	
// Set up the TWI
	TWSR = (TWPS1 << 0) | (TWPS0 << 0); // TWPS Prescaler Bits = b00
    2a90:	89 eb       	ldi	r24, 0xB9	; 185
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	21 e0       	ldi	r18, 0x01	; 1
    2a96:	fc 01       	movw	r30, r24
    2a98:	20 83       	st	Z, r18
//	TWBR = 0x0b;
	TWBR = 0x01;
    2a9a:	88 eb       	ldi	r24, 0xB8	; 184
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	21 e0       	ldi	r18, 0x01	; 1
    2aa0:	fc 01       	movw	r30, r24
    2aa2:	20 83       	st	Z, r18

// Set up TC0
	TCCR0A = 0x0;
    2aa4:	84 e4       	ldi	r24, 0x44	; 68
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	fc 01       	movw	r30, r24
    2aaa:	10 82       	st	Z, r1
	TCCR0B = 0x0;
    2aac:	85 e4       	ldi	r24, 0x45	; 69
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	fc 01       	movw	r30, r24
    2ab2:	10 82       	st	Z, r1
	TCNT0 = 0x0;
    2ab4:	86 e4       	ldi	r24, 0x46	; 70
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	fc 01       	movw	r30, r24
    2aba:	10 82       	st	Z, r1
	OCR0A = 0x80;
    2abc:	87 e4       	ldi	r24, 0x47	; 71
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	20 e8       	ldi	r18, 0x80	; 128
    2ac2:	fc 01       	movw	r30, r24
    2ac4:	20 83       	st	Z, r18
	OCR0B = 0x0;
    2ac6:	88 e4       	ldi	r24, 0x48	; 72
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	fc 01       	movw	r30, r24
    2acc:	10 82       	st	Z, r1
	TCCR0A |= (WGM01 << 1);
    2ace:	84 e4       	ldi	r24, 0x44	; 68
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	24 e4       	ldi	r18, 0x44	; 68
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	f9 01       	movw	r30, r18
    2ad8:	20 81       	ld	r18, Z
    2ada:	22 60       	ori	r18, 0x02	; 2
    2adc:	fc 01       	movw	r30, r24
    2ade:	20 83       	st	Z, r18
	TCCR0B  = 0x00;	// Set prescaler value to 0 to disable timer
    2ae0:	85 e4       	ldi	r24, 0x45	; 69
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	fc 01       	movw	r30, r24
    2ae6:	10 82       	st	Z, r1
	TIMSK0 |= (OCIE0A << 1);
    2ae8:	8e e6       	ldi	r24, 0x6E	; 110
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	2e e6       	ldi	r18, 0x6E	; 110
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	f9 01       	movw	r30, r18
    2af2:	20 81       	ld	r18, Z
    2af4:	22 60       	ori	r18, 0x02	; 2
    2af6:	fc 01       	movw	r30, r24
    2af8:	20 83       	st	Z, r18
	
// Set up TC1
	TCCR1A = 0x0;
    2afa:	80 e8       	ldi	r24, 0x80	; 128
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	fc 01       	movw	r30, r24
    2b00:	10 82       	st	Z, r1
	TCCR1B = 0x0;
    2b02:	81 e8       	ldi	r24, 0x81	; 129
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	fc 01       	movw	r30, r24
    2b08:	10 82       	st	Z, r1
	TCCR1C = 0x0;
    2b0a:	82 e8       	ldi	r24, 0x82	; 130
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	fc 01       	movw	r30, r24
    2b10:	10 82       	st	Z, r1
	TCNT1 = 0x0;
    2b12:	84 e8       	ldi	r24, 0x84	; 132
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	fc 01       	movw	r30, r24
    2b18:	11 82       	std	Z+1, r1	; 0x01
    2b1a:	10 82       	st	Z, r1
	OCR1A = 0x3d09; // with 16 MKz clk / 1024 prescaler... gives a 1 sec. compare period
    2b1c:	88 e8       	ldi	r24, 0x88	; 136
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	29 e0       	ldi	r18, 0x09	; 9
    2b22:	3d e3       	ldi	r19, 0x3D	; 61
    2b24:	fc 01       	movw	r30, r24
    2b26:	31 83       	std	Z+1, r19	; 0x01
    2b28:	20 83       	st	Z, r18
	TCCR1A = 0x0;
    2b2a:	80 e8       	ldi	r24, 0x80	; 128
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	fc 01       	movw	r30, r24
    2b30:	10 82       	st	Z, r1
	TCCR1B  = 0x0D; // Set prescaler value to 0 to disable timer
    2b32:	81 e8       	ldi	r24, 0x81	; 129
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	2d e0       	ldi	r18, 0x0D	; 13
    2b38:	fc 01       	movw	r30, r24
    2b3a:	20 83       	st	Z, r18
	TCCR1C = 0x80;
    2b3c:	82 e8       	ldi	r24, 0x82	; 130
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	20 e8       	ldi	r18, 0x80	; 128
    2b42:	fc 01       	movw	r30, r24
    2b44:	20 83       	st	Z, r18
	TIMSK1 |= (OCIE1A << 1);
    2b46:	8f e6       	ldi	r24, 0x6F	; 111
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	2f e6       	ldi	r18, 0x6F	; 111
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	f9 01       	movw	r30, r18
    2b50:	20 81       	ld	r18, Z
    2b52:	22 60       	ori	r18, 0x02	; 2
    2b54:	fc 01       	movw	r30, r24
    2b56:	20 83       	st	Z, r18
	
// Set up UART0
	init_USART0(MYUBRR);
    2b58:	87 e6       	ldi	r24, 0x67	; 103
    2b5a:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <init_USART0>

	
	sei(); // May want to move this down later on
    2b5e:	78 94       	sei

	bmpID = getBMP_ID();
    2b60:	0e 94 00 02 	call	0x400	; 0x400 <getBMP_ID>
    2b64:	89 83       	std	Y+1, r24	; 0x01
	
	if ( (bmpID == 0xba) || (bmpID == 0xbb) )  {
    2b66:	89 81       	ldd	r24, Y+1	; 0x01
    2b68:	8a 3b       	cpi	r24, 0xBA	; 186
    2b6a:	19 f0       	breq	.+6      	; 0x2b72 <main+0x132>
    2b6c:	89 81       	ldd	r24, Y+1	; 0x01
    2b6e:	8b 3b       	cpi	r24, 0xBB	; 187
    2b70:	c9 f4       	brne	.+50     	; 0x2ba4 <main+0x164>
		
		memset (data, 0, 128);
    2b72:	40 e8       	ldi	r20, 0x80	; 128
    2b74:	50 e0       	ldi	r21, 0x00	; 0
    2b76:	60 e0       	ldi	r22, 0x00	; 0
    2b78:	70 e0       	ldi	r23, 0x00	; 0
    2b7a:	88 ed       	ldi	r24, 0xD8	; 216
    2b7c:	93 e0       	ldi	r25, 0x03	; 3
    2b7e:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <memset>
		sprintf(data, "Pressure Sensor not responding\r\n");
    2b82:	81 e2       	ldi	r24, 0x21	; 33
    2b84:	e8 e1       	ldi	r30, 0x18	; 24
    2b86:	f3 e0       	ldi	r31, 0x03	; 3
    2b88:	a8 ed       	ldi	r26, 0xD8	; 216
    2b8a:	b3 e0       	ldi	r27, 0x03	; 3
    2b8c:	01 90       	ld	r0, Z+
    2b8e:	0d 92       	st	X+, r0
    2b90:	8a 95       	dec	r24
    2b92:	e1 f7       	brne	.-8      	; 0x2b8c <main+0x14c>
		sendUART0data(data, sizeof(data));
    2b94:	60 e8       	ldi	r22, 0x80	; 128
    2b96:	88 ed       	ldi	r24, 0xD8	; 216
    2b98:	93 e0       	ldi	r25, 0x03	; 3
    2b9a:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <sendUART0data>
		isPressureSensorPresent = false;
    2b9e:	10 92 d6 03 	sts	0x03D6, r1
    2ba2:	2c c0       	rjmp	.+88     	; 0x2bfc <main+0x1bc>
		
	} else {
		
		memset (data, 0, 128);
    2ba4:	40 e8       	ldi	r20, 0x80	; 128
    2ba6:	50 e0       	ldi	r21, 0x00	; 0
    2ba8:	60 e0       	ldi	r22, 0x00	; 0
    2baa:	70 e0       	ldi	r23, 0x00	; 0
    2bac:	88 ed       	ldi	r24, 0xD8	; 216
    2bae:	93 e0       	ldi	r25, 0x03	; 3
    2bb0:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <memset>
		sprintf(data, "BMP ID: %4x \r\n", bmpID);
    2bb4:	89 81       	ldd	r24, Y+1	; 0x01
    2bb6:	88 2f       	mov	r24, r24
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	29 2f       	mov	r18, r25
    2bbc:	2f 93       	push	r18
    2bbe:	8f 93       	push	r24
    2bc0:	89 e3       	ldi	r24, 0x39	; 57
    2bc2:	93 e0       	ldi	r25, 0x03	; 3
    2bc4:	89 2f       	mov	r24, r25
    2bc6:	8f 93       	push	r24
    2bc8:	89 e3       	ldi	r24, 0x39	; 57
    2bca:	93 e0       	ldi	r25, 0x03	; 3
    2bcc:	8f 93       	push	r24
    2bce:	88 ed       	ldi	r24, 0xD8	; 216
    2bd0:	93 e0       	ldi	r25, 0x03	; 3
    2bd2:	89 2f       	mov	r24, r25
    2bd4:	8f 93       	push	r24
    2bd6:	88 ed       	ldi	r24, 0xD8	; 216
    2bd8:	93 e0       	ldi	r25, 0x03	; 3
    2bda:	8f 93       	push	r24
    2bdc:	0e 94 3c 20 	call	0x4078	; 0x4078 <sprintf>
    2be0:	0f 90       	pop	r0
    2be2:	0f 90       	pop	r0
    2be4:	0f 90       	pop	r0
    2be6:	0f 90       	pop	r0
    2be8:	0f 90       	pop	r0
    2bea:	0f 90       	pop	r0
		sendUART0data(data, sizeof(data));
    2bec:	60 e8       	ldi	r22, 0x80	; 128
    2bee:	88 ed       	ldi	r24, 0xD8	; 216
    2bf0:	93 e0       	ldi	r25, 0x03	; 3
    2bf2:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <sendUART0data>
		isPressureSensorPresent = true;
    2bf6:	81 e0       	ldi	r24, 0x01	; 1
    2bf8:	80 93 d6 03 	sts	0x03D6, r24
	}

	
	si_PartID = SI_readI2Cbyte(REG_PART_ID);
    2bfc:	80 e0       	ldi	r24, 0x00	; 0
    2bfe:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <SI_readI2Cbyte>
    2c02:	8a 83       	std	Y+2, r24	; 0x02
	
	if ( (si_PartID == 0xaa) || (si_PartID== 0xab) )  {
    2c04:	8a 81       	ldd	r24, Y+2	; 0x02
    2c06:	8a 3a       	cpi	r24, 0xAA	; 170
    2c08:	19 f0       	breq	.+6      	; 0x2c10 <main+0x1d0>
    2c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0c:	8b 3a       	cpi	r24, 0xAB	; 171
    2c0e:	c9 f4       	brne	.+50     	; 0x2c42 <main+0x202>
		
		memset (data, 0, 128);
    2c10:	40 e8       	ldi	r20, 0x80	; 128
    2c12:	50 e0       	ldi	r21, 0x00	; 0
    2c14:	60 e0       	ldi	r22, 0x00	; 0
    2c16:	70 e0       	ldi	r23, 0x00	; 0
    2c18:	88 ed       	ldi	r24, 0xD8	; 216
    2c1a:	93 e0       	ldi	r25, 0x03	; 3
    2c1c:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <memset>
		sprintf(data, "Light Sensor not responding\r\n");
    2c20:	8e e1       	ldi	r24, 0x1E	; 30
    2c22:	e8 e4       	ldi	r30, 0x48	; 72
    2c24:	f3 e0       	ldi	r31, 0x03	; 3
    2c26:	a8 ed       	ldi	r26, 0xD8	; 216
    2c28:	b3 e0       	ldi	r27, 0x03	; 3
    2c2a:	01 90       	ld	r0, Z+
    2c2c:	0d 92       	st	X+, r0
    2c2e:	8a 95       	dec	r24
    2c30:	e1 f7       	brne	.-8      	; 0x2c2a <main+0x1ea>
		sendUART0data(data, sizeof(data));
    2c32:	60 e8       	ldi	r22, 0x80	; 128
    2c34:	88 ed       	ldi	r24, 0xD8	; 216
    2c36:	93 e0       	ldi	r25, 0x03	; 3
    2c38:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <sendUART0data>
		isLightSensorPresent = false;	 
    2c3c:	10 92 d7 03 	sts	0x03D7, r1
    2c40:	7a c0       	rjmp	.+244    	; 0x2d36 <main+0x2f6>
		
	} else {
		
		isLightSensorPresent = true;
    2c42:	81 e0       	ldi	r24, 0x01	; 1
    2c44:	80 93 d7 03 	sts	0x03D7, r24
//		_delay_ms(1);
		si_RevID = SI_readI2Cbyte(REG_REV_ID);
    2c48:	81 e0       	ldi	r24, 0x01	; 1
    2c4a:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <SI_readI2Cbyte>
    2c4e:	8b 83       	std	Y+3, r24	; 0x03
//		_delay_ms(1);
		si_SeqID = SI_readI2Cbyte(REG_SEQ_ID);
    2c50:	82 e0       	ldi	r24, 0x02	; 2
    2c52:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <SI_readI2Cbyte>
    2c56:	8c 83       	std	Y+4, r24	; 0x04

		memset (data, 0, 128);
    2c58:	40 e8       	ldi	r20, 0x80	; 128
    2c5a:	50 e0       	ldi	r21, 0x00	; 0
    2c5c:	60 e0       	ldi	r22, 0x00	; 0
    2c5e:	70 e0       	ldi	r23, 0x00	; 0
    2c60:	88 ed       	ldi	r24, 0xD8	; 216
    2c62:	93 e0       	ldi	r25, 0x03	; 3
    2c64:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <memset>
		sprintf(data, "SI UV Sensor Part ID: %x	Part Rev: %x	Sequencer Rev: %x \r\n", si_PartID, si_RevID, si_SeqID);
    2c68:	8c 81       	ldd	r24, Y+4	; 0x04
    2c6a:	48 2f       	mov	r20, r24
    2c6c:	50 e0       	ldi	r21, 0x00	; 0
    2c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c70:	28 2f       	mov	r18, r24
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	8a 81       	ldd	r24, Y+2	; 0x02
    2c76:	88 2f       	mov	r24, r24
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	65 2f       	mov	r22, r21
    2c7c:	6f 93       	push	r22
    2c7e:	4f 93       	push	r20
    2c80:	43 2f       	mov	r20, r19
    2c82:	4f 93       	push	r20
    2c84:	2f 93       	push	r18
    2c86:	29 2f       	mov	r18, r25
    2c88:	2f 93       	push	r18
    2c8a:	8f 93       	push	r24
    2c8c:	86 e6       	ldi	r24, 0x66	; 102
    2c8e:	93 e0       	ldi	r25, 0x03	; 3
    2c90:	89 2f       	mov	r24, r25
    2c92:	8f 93       	push	r24
    2c94:	86 e6       	ldi	r24, 0x66	; 102
    2c96:	93 e0       	ldi	r25, 0x03	; 3
    2c98:	8f 93       	push	r24
    2c9a:	88 ed       	ldi	r24, 0xD8	; 216
    2c9c:	93 e0       	ldi	r25, 0x03	; 3
    2c9e:	89 2f       	mov	r24, r25
    2ca0:	8f 93       	push	r24
    2ca2:	88 ed       	ldi	r24, 0xD8	; 216
    2ca4:	93 e0       	ldi	r25, 0x03	; 3
    2ca6:	8f 93       	push	r24
    2ca8:	0e 94 3c 20 	call	0x4078	; 0x4078 <sprintf>
    2cac:	8d b7       	in	r24, 0x3d	; 61
    2cae:	9e b7       	in	r25, 0x3e	; 62
    2cb0:	0a 96       	adiw	r24, 0x0a	; 10
    2cb2:	0f b6       	in	r0, 0x3f	; 63
    2cb4:	f8 94       	cli
    2cb6:	de bf       	out	0x3e, r29	; 62
    2cb8:	0f be       	out	0x3f, r0	; 63
    2cba:	cd bf       	out	0x3d, r28	; 61
		sendUART0data(data, sizeof(data));	
    2cbc:	60 e8       	ldi	r22, 0x80	; 128
    2cbe:	88 ed       	ldi	r24, 0xD8	; 216
    2cc0:	93 e0       	ldi	r25, 0x03	; 3
    2cc2:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <sendUART0data>
		
		SI_writeI2Cbyte(REG_HW_KEY, HW_KEY);
    2cc6:	67 e1       	ldi	r22, 0x17	; 23
    2cc8:	87 e0       	ldi	r24, 0x07	; 7
    2cca:	0e 94 b5 0c 	call	0x196a	; 0x196a <SI_writeI2Cbyte>
//		_delay_ms(10);
		
// Set the UCOEF registers
		SI_writeI2Cbyte(REG_UCOEF0, 0x0);
    2cce:	60 e0       	ldi	r22, 0x00	; 0
    2cd0:	83 e1       	ldi	r24, 0x13	; 19
    2cd2:	0e 94 b5 0c 	call	0x196a	; 0x196a <SI_writeI2Cbyte>
//		_delay_ms(10);
		SI_writeI2Cbyte(REG_UCOEF1, 0x02);
    2cd6:	62 e0       	ldi	r22, 0x02	; 2
    2cd8:	84 e1       	ldi	r24, 0x14	; 20
    2cda:	0e 94 b5 0c 	call	0x196a	; 0x196a <SI_writeI2Cbyte>
//		_delay_ms(10);
		SI_writeI2Cbyte(REG_UCOEF2, 0x89);
    2cde:	69 e8       	ldi	r22, 0x89	; 137
    2ce0:	85 e1       	ldi	r24, 0x15	; 21
    2ce2:	0e 94 b5 0c 	call	0x196a	; 0x196a <SI_writeI2Cbyte>
//		_delay_ms(10);
		SI_writeI2Cbyte(REG_UCOEF3, 0x29);
    2ce6:	69 e2       	ldi	r22, 0x29	; 41
    2ce8:	86 e1       	ldi	r24, 0x16	; 22
    2cea:	0e 94 b5 0c 	call	0x196a	; 0x196a <SI_writeI2Cbyte>
//		_delay_ms(10);

//		Set the measurement rate
		SI_writeI2Cbyte(REG_MEAS_RATE0, MEAS_RATE0);
    2cee:	60 e8       	ldi	r22, 0x80	; 128
    2cf0:	88 e0       	ldi	r24, 0x08	; 8
    2cf2:	0e 94 b5 0c 	call	0x196a	; 0x196a <SI_writeI2Cbyte>
//		_delay_ms(10);
		SI_writeI2Cbyte(REG_MEAS_RATE1, MEAS_RATE1);
    2cf6:	6e e3       	ldi	r22, 0x3E	; 62
    2cf8:	89 e0       	ldi	r24, 0x09	; 9
    2cfa:	0e 94 b5 0c 	call	0x196a	; 0x196a <SI_writeI2Cbyte>

//		_delay_ms(10);
//		 Set up the interrupts
		SI_writeI2Cbyte(REG_INT_CFG, INT_OE);
    2cfe:	61 e0       	ldi	r22, 0x01	; 1
    2d00:	83 e0       	ldi	r24, 0x03	; 3
    2d02:	0e 94 b5 0c 	call	0x196a	; 0x196a <SI_writeI2Cbyte>
//		_delay_ms(10);
		SI_writeI2Cbyte(REG_IRQ_ENABLE, ALS_IE);
    2d06:	61 e0       	ldi	r22, 0x01	; 1
    2d08:	84 e0       	ldi	r24, 0x04	; 4
    2d0a:	0e 94 b5 0c 	call	0x196a	; 0x196a <SI_writeI2Cbyte>
//		_delay_ms(10);
//		Set the CHLIST parameter
		SI_writeI2Cbyte(REG_PARAM_WR, (EN_ALS_VIS | EN_UV));		
    2d0e:	60 e9       	ldi	r22, 0x90	; 144
    2d10:	87 e1       	ldi	r24, 0x17	; 23
    2d12:	0e 94 b5 0c 	call	0x196a	; 0x196a <SI_writeI2Cbyte>

//		_delay_ms(10);
		SI_writeI2Cbyte(REG_COMMAND, (PARAM_SET | CHLIST));		
    2d16:	61 ea       	ldi	r22, 0xA1	; 161
    2d18:	88 e1       	ldi	r24, 0x18	; 24
    2d1a:	0e 94 b5 0c 	call	0x196a	; 0x196a <SI_writeI2Cbyte>
		
//		For ALS_VIS measurements... set for high sensitivity or high signal range
//		_delay_ms(10);
		SI_writeI2Cbyte(REG_PARAM_WR, VIS_RANGE_HI);
    2d1e:	60 e2       	ldi	r22, 0x20	; 32
    2d20:	87 e1       	ldi	r24, 0x17	; 23
    2d22:	0e 94 b5 0c 	call	0x196a	; 0x196a <SI_writeI2Cbyte>
//		_delay_ms(10);
		SI_writeI2Cbyte(REG_COMMAND, (PARAM_SET | ALS_VIS_ADC_MISC));	
    2d26:	62 eb       	ldi	r22, 0xB2	; 178
    2d28:	88 e1       	ldi	r24, 0x18	; 24
    2d2a:	0e 94 b5 0c 	call	0x196a	; 0x196a <SI_writeI2Cbyte>
				
//		_delay_ms(10);
//		Start autonomous ALS loop
		SI_writeI2Cbyte(REG_COMMAND, ALS_AUTO);
    2d2e:	6e e0       	ldi	r22, 0x0E	; 14
    2d30:	88 e1       	ldi	r24, 0x18	; 24
    2d32:	0e 94 b5 0c 	call	0x196a	; 0x196a <SI_writeI2Cbyte>

	}
	
	if (isPressureSensorPresent) {
    2d36:	80 91 d6 03 	lds	r24, 0x03D6
    2d3a:	88 23       	and	r24, r24
    2d3c:	09 f4       	brne	.+2      	; 0x2d40 <main+0x300>
    2d3e:	61 c0       	rjmp	.+194    	; 0x2e02 <main+0x3c2>
		getBMPcoefficients();
    2d40:	0e 94 a9 02 	call	0x552	; 0x552 <getBMPcoefficients>
	
		temperature = getBMPtemp();	
    2d44:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <getBMPtemp>
    2d48:	dc 01       	movw	r26, r24
    2d4a:	cb 01       	movw	r24, r22
    2d4c:	80 93 58 04 	sts	0x0458, r24
    2d50:	90 93 59 04 	sts	0x0459, r25
    2d54:	a0 93 5a 04 	sts	0x045A, r26
    2d58:	b0 93 5b 04 	sts	0x045B, r27
		pressure = getBMPpressure(elevation);
    2d5c:	80 91 01 02 	lds	r24, 0x0201
    2d60:	90 91 02 02 	lds	r25, 0x0202
    2d64:	0e 94 75 06 	call	0xcea	; 0xcea <getBMPpressure>
    2d68:	dc 01       	movw	r26, r24
    2d6a:	cb 01       	movw	r24, r22
    2d6c:	80 93 5c 04 	sts	0x045C, r24
    2d70:	90 93 5d 04 	sts	0x045D, r25
    2d74:	a0 93 5e 04 	sts	0x045E, r26
    2d78:	b0 93 5f 04 	sts	0x045F, r27
		
		memset(data, 0, 128);
    2d7c:	40 e8       	ldi	r20, 0x80	; 128
    2d7e:	50 e0       	ldi	r21, 0x00	; 0
    2d80:	60 e0       	ldi	r22, 0x00	; 0
    2d82:	70 e0       	ldi	r23, 0x00	; 0
    2d84:	88 ed       	ldi	r24, 0xD8	; 216
    2d86:	93 e0       	ldi	r25, 0x03	; 3
    2d88:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <memset>
		sprintf(data, "Initial Temperature AND Pressure: %.1f	%.2f\r\n", temperature, pressure);
    2d8c:	20 91 5c 04 	lds	r18, 0x045C
    2d90:	30 91 5d 04 	lds	r19, 0x045D
    2d94:	40 91 5e 04 	lds	r20, 0x045E
    2d98:	50 91 5f 04 	lds	r21, 0x045F
    2d9c:	80 91 58 04 	lds	r24, 0x0458
    2da0:	90 91 59 04 	lds	r25, 0x0459
    2da4:	a0 91 5a 04 	lds	r26, 0x045A
    2da8:	b0 91 5b 04 	lds	r27, 0x045B
    2dac:	65 2f       	mov	r22, r21
    2dae:	6f 93       	push	r22
    2db0:	64 2f       	mov	r22, r20
    2db2:	6f 93       	push	r22
    2db4:	63 2f       	mov	r22, r19
    2db6:	6f 93       	push	r22
    2db8:	2f 93       	push	r18
    2dba:	2b 2f       	mov	r18, r27
    2dbc:	2f 93       	push	r18
    2dbe:	2a 2f       	mov	r18, r26
    2dc0:	2f 93       	push	r18
    2dc2:	29 2f       	mov	r18, r25
    2dc4:	2f 93       	push	r18
    2dc6:	8f 93       	push	r24
    2dc8:	81 ea       	ldi	r24, 0xA1	; 161
    2dca:	93 e0       	ldi	r25, 0x03	; 3
    2dcc:	89 2f       	mov	r24, r25
    2dce:	8f 93       	push	r24
    2dd0:	81 ea       	ldi	r24, 0xA1	; 161
    2dd2:	93 e0       	ldi	r25, 0x03	; 3
    2dd4:	8f 93       	push	r24
    2dd6:	88 ed       	ldi	r24, 0xD8	; 216
    2dd8:	93 e0       	ldi	r25, 0x03	; 3
    2dda:	89 2f       	mov	r24, r25
    2ddc:	8f 93       	push	r24
    2dde:	88 ed       	ldi	r24, 0xD8	; 216
    2de0:	93 e0       	ldi	r25, 0x03	; 3
    2de2:	8f 93       	push	r24
    2de4:	0e 94 3c 20 	call	0x4078	; 0x4078 <sprintf>
    2de8:	ed b7       	in	r30, 0x3d	; 61
    2dea:	fe b7       	in	r31, 0x3e	; 62
    2dec:	3c 96       	adiw	r30, 0x0c	; 12
    2dee:	0f b6       	in	r0, 0x3f	; 63
    2df0:	f8 94       	cli
    2df2:	de bf       	out	0x3e, r29	; 62
    2df4:	0f be       	out	0x3f, r0	; 63
    2df6:	cd bf       	out	0x3d, r28	; 61
		sendUART0data(data, sizeof(data));
    2df8:	60 e8       	ldi	r22, 0x80	; 128
    2dfa:	88 ed       	ldi	r24, 0xD8	; 216
    2dfc:	93 e0       	ldi	r25, 0x03	; 3
    2dfe:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <sendUART0data>
	}
	
	rxByteCount = 0;
    2e02:	10 92 7a 05 	sts	0x057A, r1
		
		
	while(1) {
			
		if (rxByteCount > 0) {
    2e06:	80 91 7a 05 	lds	r24, 0x057A
    2e0a:	88 23       	and	r24, r24
    2e0c:	09 f4       	brne	.+2      	; 0x2e10 <main+0x3d0>
    2e0e:	8e c0       	rjmp	.+284    	; 0x2f2c <main+0x4ec>
    2e10:	80 e0       	ldi	r24, 0x00	; 0
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	a0 e2       	ldi	r26, 0x20	; 32
    2e16:	b1 e4       	ldi	r27, 0x41	; 65
    2e18:	8d 83       	std	Y+5, r24	; 0x05
    2e1a:	9e 83       	std	Y+6, r25	; 0x06
    2e1c:	af 83       	std	Y+7, r26	; 0x07
    2e1e:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	4a e7       	ldi	r20, 0x7A	; 122
    2e26:	55 e4       	ldi	r21, 0x45	; 69
    2e28:	6d 81       	ldd	r22, Y+5	; 0x05
    2e2a:	7e 81       	ldd	r23, Y+6	; 0x06
    2e2c:	8f 81       	ldd	r24, Y+7	; 0x07
    2e2e:	98 85       	ldd	r25, Y+8	; 0x08
    2e30:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	89 87       	std	Y+9, r24	; 0x09
    2e3a:	9a 87       	std	Y+10, r25	; 0x0a
    2e3c:	ab 87       	std	Y+11, r26	; 0x0b
    2e3e:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    2e40:	20 e0       	ldi	r18, 0x00	; 0
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	40 e8       	ldi	r20, 0x80	; 128
    2e46:	5f e3       	ldi	r21, 0x3F	; 63
    2e48:	69 85       	ldd	r22, Y+9	; 0x09
    2e4a:	7a 85       	ldd	r23, Y+10	; 0x0a
    2e4c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e4e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e50:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__cmpsf2>
    2e54:	88 23       	and	r24, r24
    2e56:	2c f4       	brge	.+10     	; 0x2e62 <main+0x422>
		__ticks = 1;
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	9e 87       	std	Y+14, r25	; 0x0e
    2e5e:	8d 87       	std	Y+13, r24	; 0x0d
    2e60:	3f c0       	rjmp	.+126    	; 0x2ee0 <main+0x4a0>
	else if (__tmp > 65535)
    2e62:	20 e0       	ldi	r18, 0x00	; 0
    2e64:	3f ef       	ldi	r19, 0xFF	; 255
    2e66:	4f e7       	ldi	r20, 0x7F	; 127
    2e68:	57 e4       	ldi	r21, 0x47	; 71
    2e6a:	69 85       	ldd	r22, Y+9	; 0x09
    2e6c:	7a 85       	ldd	r23, Y+10	; 0x0a
    2e6e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e70:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e72:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <__gesf2>
    2e76:	18 16       	cp	r1, r24
    2e78:	4c f5       	brge	.+82     	; 0x2ecc <main+0x48c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e7a:	20 e0       	ldi	r18, 0x00	; 0
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	40 e2       	ldi	r20, 0x20	; 32
    2e80:	51 e4       	ldi	r21, 0x41	; 65
    2e82:	6d 81       	ldd	r22, Y+5	; 0x05
    2e84:	7e 81       	ldd	r23, Y+6	; 0x06
    2e86:	8f 81       	ldd	r24, Y+7	; 0x07
    2e88:	98 85       	ldd	r25, Y+8	; 0x08
    2e8a:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    2e8e:	dc 01       	movw	r26, r24
    2e90:	cb 01       	movw	r24, r22
    2e92:	bc 01       	movw	r22, r24
    2e94:	cd 01       	movw	r24, r26
    2e96:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <__fixunssfsi>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	9e 87       	std	Y+14, r25	; 0x0e
    2ea0:	8d 87       	std	Y+13, r24	; 0x0d
    2ea2:	0f c0       	rjmp	.+30     	; 0x2ec2 <main+0x482>
    2ea4:	80 e9       	ldi	r24, 0x90	; 144
    2ea6:	91 e0       	ldi	r25, 0x01	; 1
    2ea8:	98 8b       	std	Y+16, r25	; 0x10
    2eaa:	8f 87       	std	Y+15, r24	; 0x0f
    2eac:	8f 85       	ldd	r24, Y+15	; 0x0f
    2eae:	98 89       	ldd	r25, Y+16	; 0x10
    2eb0:	01 97       	sbiw	r24, 0x01	; 1
    2eb2:	f1 f7       	brne	.-4      	; 0x2eb0 <main+0x470>
    2eb4:	98 8b       	std	Y+16, r25	; 0x10
    2eb6:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eba:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ebc:	01 97       	sbiw	r24, 0x01	; 1
    2ebe:	9e 87       	std	Y+14, r25	; 0x0e
    2ec0:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ec2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ec4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ec6:	00 97       	sbiw	r24, 0x00	; 0
    2ec8:	69 f7       	brne	.-38     	; 0x2ea4 <main+0x464>
    2eca:	14 c0       	rjmp	.+40     	; 0x2ef4 <main+0x4b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ecc:	69 85       	ldd	r22, Y+9	; 0x09
    2ece:	7a 85       	ldd	r23, Y+10	; 0x0a
    2ed0:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ed2:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ed4:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <__fixunssfsi>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	9e 87       	std	Y+14, r25	; 0x0e
    2ede:	8d 87       	std	Y+13, r24	; 0x0d
    2ee0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ee2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ee4:	9a 8b       	std	Y+18, r25	; 0x12
    2ee6:	89 8b       	std	Y+17, r24	; 0x11
    2ee8:	89 89       	ldd	r24, Y+17	; 0x11
    2eea:	9a 89       	ldd	r25, Y+18	; 0x12
    2eec:	01 97       	sbiw	r24, 0x01	; 1
    2eee:	f1 f7       	brne	.-4      	; 0x2eec <main+0x4ac>
    2ef0:	9a 8b       	std	Y+18, r25	; 0x12
    2ef2:	89 8b       	std	Y+17, r24	; 0x11
			
			_delay_ms(10);
	
			switch(rxPacket[0]) {
    2ef4:	80 91 7b 05 	lds	r24, 0x057B
    2ef8:	88 2f       	mov	r24, r24
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	81 3a       	cpi	r24, 0xA1	; 161
    2efe:	91 05       	cpc	r25, r1
    2f00:	51 f0       	breq	.+20     	; 0x2f16 <main+0x4d6>
    2f02:	82 3a       	cpi	r24, 0xA2	; 162
    2f04:	91 05       	cpc	r25, r1
    2f06:	59 f0       	breq	.+22     	; 0x2f1e <main+0x4de>
    2f08:	80 3a       	cpi	r24, 0xA0	; 160
    2f0a:	91 05       	cpc	r25, r1
    2f0c:	61 f4       	brne	.+24     	; 0x2f26 <main+0x4e6>
				
				case 0xa0:		// Elevation packet
					getElevationPacket(4);
    2f0e:	84 e0       	ldi	r24, 0x04	; 4
    2f10:	0e 94 63 10 	call	0x20c6	; 0x20c6 <getElevationPacket>
					break;
    2f14:	0b c0       	rjmp	.+22     	; 0x2f2c <main+0x4ec>
				
				case 0xa1:		// Time packet
					getTimePacket(5);
    2f16:	85 e0       	ldi	r24, 0x05	; 5
    2f18:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <getTimePacket>
					break;
    2f1c:	07 c0       	rjmp	.+14     	; 0x2f2c <main+0x4ec>
				
				case 0xa2:		// ALS ADC Range Set Packet
					getADCRangeSetPacket(3);
    2f1e:	83 e0       	ldi	r24, 0x03	; 3
    2f20:	0e 94 08 11 	call	0x2210	; 0x2210 <getADCRangeSetPacket>
					break;
    2f24:	03 c0       	rjmp	.+6      	; 0x2f2c <main+0x4ec>
				
				default:
					rxByteCount = 0;
    2f26:	10 92 7a 05 	sts	0x057A, r1
					break;
    2f2a:	00 00       	nop
			} 	
		}			 		
	}
    2f2c:	6c cf       	rjmp	.-296    	; 0x2e06 <main+0x3c6>

00002f2e <vfprintf>:
    2f2e:	2f 92       	push	r2
    2f30:	3f 92       	push	r3
    2f32:	4f 92       	push	r4
    2f34:	5f 92       	push	r5
    2f36:	6f 92       	push	r6
    2f38:	7f 92       	push	r7
    2f3a:	8f 92       	push	r8
    2f3c:	9f 92       	push	r9
    2f3e:	af 92       	push	r10
    2f40:	bf 92       	push	r11
    2f42:	cf 92       	push	r12
    2f44:	df 92       	push	r13
    2f46:	ef 92       	push	r14
    2f48:	ff 92       	push	r15
    2f4a:	0f 93       	push	r16
    2f4c:	1f 93       	push	r17
    2f4e:	cf 93       	push	r28
    2f50:	df 93       	push	r29
    2f52:	cd b7       	in	r28, 0x3d	; 61
    2f54:	de b7       	in	r29, 0x3e	; 62
    2f56:	63 97       	sbiw	r28, 0x13	; 19
    2f58:	0f b6       	in	r0, 0x3f	; 63
    2f5a:	f8 94       	cli
    2f5c:	de bf       	out	0x3e, r29	; 62
    2f5e:	0f be       	out	0x3f, r0	; 63
    2f60:	cd bf       	out	0x3d, r28	; 61
    2f62:	7c 01       	movw	r14, r24
    2f64:	1b 01       	movw	r2, r22
    2f66:	6a 01       	movw	r12, r20
    2f68:	fc 01       	movw	r30, r24
    2f6a:	17 82       	std	Z+7, r1	; 0x07
    2f6c:	16 82       	std	Z+6, r1	; 0x06
    2f6e:	83 81       	ldd	r24, Z+3	; 0x03
    2f70:	81 ff       	sbrs	r24, 1
    2f72:	66 c3       	rjmp	.+1740   	; 0x3640 <vfprintf+0x712>
    2f74:	be 01       	movw	r22, r28
    2f76:	6f 5f       	subi	r22, 0xFF	; 255
    2f78:	7f 4f       	sbci	r23, 0xFF	; 255
    2f7a:	4b 01       	movw	r8, r22
    2f7c:	f7 01       	movw	r30, r14
    2f7e:	93 81       	ldd	r25, Z+3	; 0x03
    2f80:	f1 01       	movw	r30, r2
    2f82:	93 fd       	sbrc	r25, 3
    2f84:	85 91       	lpm	r24, Z+
    2f86:	93 ff       	sbrs	r25, 3
    2f88:	81 91       	ld	r24, Z+
    2f8a:	1f 01       	movw	r2, r30
    2f8c:	88 23       	and	r24, r24
    2f8e:	09 f4       	brne	.+2      	; 0x2f92 <vfprintf+0x64>
    2f90:	53 c3       	rjmp	.+1702   	; 0x3638 <vfprintf+0x70a>
    2f92:	85 32       	cpi	r24, 0x25	; 37
    2f94:	39 f4       	brne	.+14     	; 0x2fa4 <vfprintf+0x76>
    2f96:	93 fd       	sbrc	r25, 3
    2f98:	85 91       	lpm	r24, Z+
    2f9a:	93 ff       	sbrs	r25, 3
    2f9c:	81 91       	ld	r24, Z+
    2f9e:	1f 01       	movw	r2, r30
    2fa0:	85 32       	cpi	r24, 0x25	; 37
    2fa2:	39 f4       	brne	.+14     	; 0x2fb2 <vfprintf+0x84>
    2fa4:	b7 01       	movw	r22, r14
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	0e 94 0a 20 	call	0x4014	; 0x4014 <fputc>
    2fac:	56 01       	movw	r10, r12
    2fae:	65 01       	movw	r12, r10
    2fb0:	e5 cf       	rjmp	.-54     	; 0x2f7c <vfprintf+0x4e>
    2fb2:	10 e0       	ldi	r17, 0x00	; 0
    2fb4:	51 2c       	mov	r5, r1
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	20 32       	cpi	r18, 0x20	; 32
    2fba:	a0 f4       	brcc	.+40     	; 0x2fe4 <vfprintf+0xb6>
    2fbc:	8b 32       	cpi	r24, 0x2B	; 43
    2fbe:	69 f0       	breq	.+26     	; 0x2fda <vfprintf+0xac>
    2fc0:	30 f4       	brcc	.+12     	; 0x2fce <vfprintf+0xa0>
    2fc2:	80 32       	cpi	r24, 0x20	; 32
    2fc4:	59 f0       	breq	.+22     	; 0x2fdc <vfprintf+0xae>
    2fc6:	83 32       	cpi	r24, 0x23	; 35
    2fc8:	69 f4       	brne	.+26     	; 0x2fe4 <vfprintf+0xb6>
    2fca:	20 61       	ori	r18, 0x10	; 16
    2fcc:	2c c0       	rjmp	.+88     	; 0x3026 <vfprintf+0xf8>
    2fce:	8d 32       	cpi	r24, 0x2D	; 45
    2fd0:	39 f0       	breq	.+14     	; 0x2fe0 <vfprintf+0xb2>
    2fd2:	80 33       	cpi	r24, 0x30	; 48
    2fd4:	39 f4       	brne	.+14     	; 0x2fe4 <vfprintf+0xb6>
    2fd6:	21 60       	ori	r18, 0x01	; 1
    2fd8:	26 c0       	rjmp	.+76     	; 0x3026 <vfprintf+0xf8>
    2fda:	22 60       	ori	r18, 0x02	; 2
    2fdc:	24 60       	ori	r18, 0x04	; 4
    2fde:	23 c0       	rjmp	.+70     	; 0x3026 <vfprintf+0xf8>
    2fe0:	28 60       	ori	r18, 0x08	; 8
    2fe2:	21 c0       	rjmp	.+66     	; 0x3026 <vfprintf+0xf8>
    2fe4:	27 fd       	sbrc	r18, 7
    2fe6:	27 c0       	rjmp	.+78     	; 0x3036 <vfprintf+0x108>
    2fe8:	30 ed       	ldi	r19, 0xD0	; 208
    2fea:	38 0f       	add	r19, r24
    2fec:	3a 30       	cpi	r19, 0x0A	; 10
    2fee:	78 f4       	brcc	.+30     	; 0x300e <vfprintf+0xe0>
    2ff0:	26 ff       	sbrs	r18, 6
    2ff2:	06 c0       	rjmp	.+12     	; 0x3000 <vfprintf+0xd2>
    2ff4:	fa e0       	ldi	r31, 0x0A	; 10
    2ff6:	1f 9f       	mul	r17, r31
    2ff8:	30 0d       	add	r19, r0
    2ffa:	11 24       	eor	r1, r1
    2ffc:	13 2f       	mov	r17, r19
    2ffe:	13 c0       	rjmp	.+38     	; 0x3026 <vfprintf+0xf8>
    3000:	6a e0       	ldi	r22, 0x0A	; 10
    3002:	56 9e       	mul	r5, r22
    3004:	30 0d       	add	r19, r0
    3006:	11 24       	eor	r1, r1
    3008:	53 2e       	mov	r5, r19
    300a:	20 62       	ori	r18, 0x20	; 32
    300c:	0c c0       	rjmp	.+24     	; 0x3026 <vfprintf+0xf8>
    300e:	8e 32       	cpi	r24, 0x2E	; 46
    3010:	21 f4       	brne	.+8      	; 0x301a <vfprintf+0xec>
    3012:	26 fd       	sbrc	r18, 6
    3014:	11 c3       	rjmp	.+1570   	; 0x3638 <vfprintf+0x70a>
    3016:	20 64       	ori	r18, 0x40	; 64
    3018:	06 c0       	rjmp	.+12     	; 0x3026 <vfprintf+0xf8>
    301a:	8c 36       	cpi	r24, 0x6C	; 108
    301c:	11 f4       	brne	.+4      	; 0x3022 <vfprintf+0xf4>
    301e:	20 68       	ori	r18, 0x80	; 128
    3020:	02 c0       	rjmp	.+4      	; 0x3026 <vfprintf+0xf8>
    3022:	88 36       	cpi	r24, 0x68	; 104
    3024:	41 f4       	brne	.+16     	; 0x3036 <vfprintf+0x108>
    3026:	f1 01       	movw	r30, r2
    3028:	93 fd       	sbrc	r25, 3
    302a:	85 91       	lpm	r24, Z+
    302c:	93 ff       	sbrs	r25, 3
    302e:	81 91       	ld	r24, Z+
    3030:	1f 01       	movw	r2, r30
    3032:	81 11       	cpse	r24, r1
    3034:	c1 cf       	rjmp	.-126    	; 0x2fb8 <vfprintf+0x8a>
    3036:	9b eb       	ldi	r25, 0xBB	; 187
    3038:	98 0f       	add	r25, r24
    303a:	93 30       	cpi	r25, 0x03	; 3
    303c:	18 f4       	brcc	.+6      	; 0x3044 <vfprintf+0x116>
    303e:	20 61       	ori	r18, 0x10	; 16
    3040:	80 5e       	subi	r24, 0xE0	; 224
    3042:	06 c0       	rjmp	.+12     	; 0x3050 <vfprintf+0x122>
    3044:	9b e9       	ldi	r25, 0x9B	; 155
    3046:	98 0f       	add	r25, r24
    3048:	93 30       	cpi	r25, 0x03	; 3
    304a:	08 f0       	brcs	.+2      	; 0x304e <vfprintf+0x120>
    304c:	aa c1       	rjmp	.+852    	; 0x33a2 <vfprintf+0x474>
    304e:	2f 7e       	andi	r18, 0xEF	; 239
    3050:	26 ff       	sbrs	r18, 6
    3052:	16 e0       	ldi	r17, 0x06	; 6
    3054:	2f 73       	andi	r18, 0x3F	; 63
    3056:	72 2e       	mov	r7, r18
    3058:	85 36       	cpi	r24, 0x65	; 101
    305a:	21 f4       	brne	.+8      	; 0x3064 <vfprintf+0x136>
    305c:	f2 2f       	mov	r31, r18
    305e:	f0 64       	ori	r31, 0x40	; 64
    3060:	7f 2e       	mov	r7, r31
    3062:	08 c0       	rjmp	.+16     	; 0x3074 <vfprintf+0x146>
    3064:	86 36       	cpi	r24, 0x66	; 102
    3066:	21 f4       	brne	.+8      	; 0x3070 <vfprintf+0x142>
    3068:	62 2f       	mov	r22, r18
    306a:	60 68       	ori	r22, 0x80	; 128
    306c:	76 2e       	mov	r7, r22
    306e:	02 c0       	rjmp	.+4      	; 0x3074 <vfprintf+0x146>
    3070:	11 11       	cpse	r17, r1
    3072:	11 50       	subi	r17, 0x01	; 1
    3074:	77 fe       	sbrs	r7, 7
    3076:	07 c0       	rjmp	.+14     	; 0x3086 <vfprintf+0x158>
    3078:	1c 33       	cpi	r17, 0x3C	; 60
    307a:	48 f4       	brcc	.+18     	; 0x308e <vfprintf+0x160>
    307c:	44 24       	eor	r4, r4
    307e:	43 94       	inc	r4
    3080:	41 0e       	add	r4, r17
    3082:	27 e0       	ldi	r18, 0x07	; 7
    3084:	0b c0       	rjmp	.+22     	; 0x309c <vfprintf+0x16e>
    3086:	18 30       	cpi	r17, 0x08	; 8
    3088:	30 f4       	brcc	.+12     	; 0x3096 <vfprintf+0x168>
    308a:	21 2f       	mov	r18, r17
    308c:	06 c0       	rjmp	.+12     	; 0x309a <vfprintf+0x16c>
    308e:	27 e0       	ldi	r18, 0x07	; 7
    3090:	4c e3       	ldi	r20, 0x3C	; 60
    3092:	44 2e       	mov	r4, r20
    3094:	03 c0       	rjmp	.+6      	; 0x309c <vfprintf+0x16e>
    3096:	27 e0       	ldi	r18, 0x07	; 7
    3098:	17 e0       	ldi	r17, 0x07	; 7
    309a:	41 2c       	mov	r4, r1
    309c:	56 01       	movw	r10, r12
    309e:	74 e0       	ldi	r23, 0x04	; 4
    30a0:	a7 0e       	add	r10, r23
    30a2:	b1 1c       	adc	r11, r1
    30a4:	f6 01       	movw	r30, r12
    30a6:	60 81       	ld	r22, Z
    30a8:	71 81       	ldd	r23, Z+1	; 0x01
    30aa:	82 81       	ldd	r24, Z+2	; 0x02
    30ac:	93 81       	ldd	r25, Z+3	; 0x03
    30ae:	04 2d       	mov	r16, r4
    30b0:	a4 01       	movw	r20, r8
    30b2:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <__ftoa_engine>
    30b6:	6c 01       	movw	r12, r24
    30b8:	09 81       	ldd	r16, Y+1	; 0x01
    30ba:	00 ff       	sbrs	r16, 0
    30bc:	02 c0       	rjmp	.+4      	; 0x30c2 <vfprintf+0x194>
    30be:	03 ff       	sbrs	r16, 3
    30c0:	06 c0       	rjmp	.+12     	; 0x30ce <vfprintf+0x1a0>
    30c2:	71 fc       	sbrc	r7, 1
    30c4:	07 c0       	rjmp	.+14     	; 0x30d4 <vfprintf+0x1a6>
    30c6:	72 fc       	sbrc	r7, 2
    30c8:	08 c0       	rjmp	.+16     	; 0x30da <vfprintf+0x1ac>
    30ca:	61 2c       	mov	r6, r1
    30cc:	08 c0       	rjmp	.+16     	; 0x30de <vfprintf+0x1b0>
    30ce:	3d e2       	ldi	r19, 0x2D	; 45
    30d0:	63 2e       	mov	r6, r19
    30d2:	05 c0       	rjmp	.+10     	; 0x30de <vfprintf+0x1b0>
    30d4:	2b e2       	ldi	r18, 0x2B	; 43
    30d6:	62 2e       	mov	r6, r18
    30d8:	02 c0       	rjmp	.+4      	; 0x30de <vfprintf+0x1b0>
    30da:	90 e2       	ldi	r25, 0x20	; 32
    30dc:	69 2e       	mov	r6, r25
    30de:	80 2f       	mov	r24, r16
    30e0:	8c 70       	andi	r24, 0x0C	; 12
    30e2:	99 f1       	breq	.+102    	; 0x314a <vfprintf+0x21c>
    30e4:	66 20       	and	r6, r6
    30e6:	11 f0       	breq	.+4      	; 0x30ec <vfprintf+0x1be>
    30e8:	84 e0       	ldi	r24, 0x04	; 4
    30ea:	01 c0       	rjmp	.+2      	; 0x30ee <vfprintf+0x1c0>
    30ec:	83 e0       	ldi	r24, 0x03	; 3
    30ee:	85 15       	cp	r24, r5
    30f0:	10 f0       	brcs	.+4      	; 0x30f6 <vfprintf+0x1c8>
    30f2:	51 2c       	mov	r5, r1
    30f4:	0b c0       	rjmp	.+22     	; 0x310c <vfprintf+0x1de>
    30f6:	58 1a       	sub	r5, r24
    30f8:	73 fc       	sbrc	r7, 3
    30fa:	08 c0       	rjmp	.+16     	; 0x310c <vfprintf+0x1de>
    30fc:	b7 01       	movw	r22, r14
    30fe:	80 e2       	ldi	r24, 0x20	; 32
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	0e 94 0a 20 	call	0x4014	; 0x4014 <fputc>
    3106:	5a 94       	dec	r5
    3108:	c9 f7       	brne	.-14     	; 0x30fc <vfprintf+0x1ce>
    310a:	f3 cf       	rjmp	.-26     	; 0x30f2 <vfprintf+0x1c4>
    310c:	66 20       	and	r6, r6
    310e:	29 f0       	breq	.+10     	; 0x311a <vfprintf+0x1ec>
    3110:	b7 01       	movw	r22, r14
    3112:	86 2d       	mov	r24, r6
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	0e 94 0a 20 	call	0x4014	; 0x4014 <fputc>
    311a:	03 fd       	sbrc	r16, 3
    311c:	03 c0       	rjmp	.+6      	; 0x3124 <vfprintf+0x1f6>
    311e:	04 ec       	ldi	r16, 0xC4	; 196
    3120:	11 e0       	ldi	r17, 0x01	; 1
    3122:	02 c0       	rjmp	.+4      	; 0x3128 <vfprintf+0x1fa>
    3124:	00 ec       	ldi	r16, 0xC0	; 192
    3126:	11 e0       	ldi	r17, 0x01	; 1
    3128:	f7 2d       	mov	r31, r7
    312a:	f0 71       	andi	r31, 0x10	; 16
    312c:	7f 2e       	mov	r7, r31
    312e:	f8 01       	movw	r30, r16
    3130:	84 91       	lpm	r24, Z
    3132:	88 23       	and	r24, r24
    3134:	09 f4       	brne	.+2      	; 0x3138 <vfprintf+0x20a>
    3136:	76 c2       	rjmp	.+1260   	; 0x3624 <vfprintf+0x6f6>
    3138:	71 10       	cpse	r7, r1
    313a:	80 52       	subi	r24, 0x20	; 32
    313c:	b7 01       	movw	r22, r14
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	0e 94 0a 20 	call	0x4014	; 0x4014 <fputc>
    3144:	0f 5f       	subi	r16, 0xFF	; 255
    3146:	1f 4f       	sbci	r17, 0xFF	; 255
    3148:	f2 cf       	rjmp	.-28     	; 0x312e <vfprintf+0x200>
    314a:	77 fe       	sbrs	r7, 7
    314c:	0f c0       	rjmp	.+30     	; 0x316c <vfprintf+0x23e>
    314e:	4c 0c       	add	r4, r12
    3150:	04 ff       	sbrs	r16, 4
    3152:	04 c0       	rjmp	.+8      	; 0x315c <vfprintf+0x22e>
    3154:	8a 81       	ldd	r24, Y+2	; 0x02
    3156:	81 33       	cpi	r24, 0x31	; 49
    3158:	09 f4       	brne	.+2      	; 0x315c <vfprintf+0x22e>
    315a:	4a 94       	dec	r4
    315c:	14 14       	cp	r1, r4
    315e:	74 f5       	brge	.+92     	; 0x31bc <vfprintf+0x28e>
    3160:	f8 e0       	ldi	r31, 0x08	; 8
    3162:	f4 15       	cp	r31, r4
    3164:	78 f5       	brcc	.+94     	; 0x31c4 <vfprintf+0x296>
    3166:	88 e0       	ldi	r24, 0x08	; 8
    3168:	48 2e       	mov	r4, r24
    316a:	2c c0       	rjmp	.+88     	; 0x31c4 <vfprintf+0x296>
    316c:	76 fc       	sbrc	r7, 6
    316e:	2a c0       	rjmp	.+84     	; 0x31c4 <vfprintf+0x296>
    3170:	81 2f       	mov	r24, r17
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	8c 15       	cp	r24, r12
    3176:	9d 05       	cpc	r25, r13
    3178:	9c f0       	brlt	.+38     	; 0x31a0 <vfprintf+0x272>
    317a:	6c ef       	ldi	r22, 0xFC	; 252
    317c:	c6 16       	cp	r12, r22
    317e:	6f ef       	ldi	r22, 0xFF	; 255
    3180:	d6 06       	cpc	r13, r22
    3182:	74 f0       	brlt	.+28     	; 0x31a0 <vfprintf+0x272>
    3184:	77 2d       	mov	r23, r7
    3186:	70 68       	ori	r23, 0x80	; 128
    3188:	77 2e       	mov	r7, r23
    318a:	0a c0       	rjmp	.+20     	; 0x31a0 <vfprintf+0x272>
    318c:	e2 e0       	ldi	r30, 0x02	; 2
    318e:	f0 e0       	ldi	r31, 0x00	; 0
    3190:	ec 0f       	add	r30, r28
    3192:	fd 1f       	adc	r31, r29
    3194:	e1 0f       	add	r30, r17
    3196:	f1 1d       	adc	r31, r1
    3198:	80 81       	ld	r24, Z
    319a:	80 33       	cpi	r24, 0x30	; 48
    319c:	19 f4       	brne	.+6      	; 0x31a4 <vfprintf+0x276>
    319e:	11 50       	subi	r17, 0x01	; 1
    31a0:	11 11       	cpse	r17, r1
    31a2:	f4 cf       	rjmp	.-24     	; 0x318c <vfprintf+0x25e>
    31a4:	77 fe       	sbrs	r7, 7
    31a6:	0e c0       	rjmp	.+28     	; 0x31c4 <vfprintf+0x296>
    31a8:	44 24       	eor	r4, r4
    31aa:	43 94       	inc	r4
    31ac:	41 0e       	add	r4, r17
    31ae:	81 2f       	mov	r24, r17
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	c8 16       	cp	r12, r24
    31b4:	d9 06       	cpc	r13, r25
    31b6:	2c f4       	brge	.+10     	; 0x31c2 <vfprintf+0x294>
    31b8:	1c 19       	sub	r17, r12
    31ba:	04 c0       	rjmp	.+8      	; 0x31c4 <vfprintf+0x296>
    31bc:	44 24       	eor	r4, r4
    31be:	43 94       	inc	r4
    31c0:	01 c0       	rjmp	.+2      	; 0x31c4 <vfprintf+0x296>
    31c2:	10 e0       	ldi	r17, 0x00	; 0
    31c4:	77 fe       	sbrs	r7, 7
    31c6:	07 c0       	rjmp	.+14     	; 0x31d6 <vfprintf+0x2a8>
    31c8:	1c 14       	cp	r1, r12
    31ca:	1d 04       	cpc	r1, r13
    31cc:	3c f4       	brge	.+14     	; 0x31dc <vfprintf+0x2ae>
    31ce:	96 01       	movw	r18, r12
    31d0:	2f 5f       	subi	r18, 0xFF	; 255
    31d2:	3f 4f       	sbci	r19, 0xFF	; 255
    31d4:	05 c0       	rjmp	.+10     	; 0x31e0 <vfprintf+0x2b2>
    31d6:	25 e0       	ldi	r18, 0x05	; 5
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	02 c0       	rjmp	.+4      	; 0x31e0 <vfprintf+0x2b2>
    31dc:	21 e0       	ldi	r18, 0x01	; 1
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	66 20       	and	r6, r6
    31e2:	11 f0       	breq	.+4      	; 0x31e8 <vfprintf+0x2ba>
    31e4:	2f 5f       	subi	r18, 0xFF	; 255
    31e6:	3f 4f       	sbci	r19, 0xFF	; 255
    31e8:	11 23       	and	r17, r17
    31ea:	31 f0       	breq	.+12     	; 0x31f8 <vfprintf+0x2ca>
    31ec:	41 2f       	mov	r20, r17
    31ee:	50 e0       	ldi	r21, 0x00	; 0
    31f0:	4f 5f       	subi	r20, 0xFF	; 255
    31f2:	5f 4f       	sbci	r21, 0xFF	; 255
    31f4:	24 0f       	add	r18, r20
    31f6:	35 1f       	adc	r19, r21
    31f8:	45 2d       	mov	r20, r5
    31fa:	50 e0       	ldi	r21, 0x00	; 0
    31fc:	24 17       	cp	r18, r20
    31fe:	35 07       	cpc	r19, r21
    3200:	14 f4       	brge	.+4      	; 0x3206 <vfprintf+0x2d8>
    3202:	52 1a       	sub	r5, r18
    3204:	01 c0       	rjmp	.+2      	; 0x3208 <vfprintf+0x2da>
    3206:	51 2c       	mov	r5, r1
    3208:	87 2d       	mov	r24, r7
    320a:	89 70       	andi	r24, 0x09	; 9
    320c:	49 f4       	brne	.+18     	; 0x3220 <vfprintf+0x2f2>
    320e:	55 20       	and	r5, r5
    3210:	39 f0       	breq	.+14     	; 0x3220 <vfprintf+0x2f2>
    3212:	b7 01       	movw	r22, r14
    3214:	80 e2       	ldi	r24, 0x20	; 32
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	0e 94 0a 20 	call	0x4014	; 0x4014 <fputc>
    321c:	5a 94       	dec	r5
    321e:	f7 cf       	rjmp	.-18     	; 0x320e <vfprintf+0x2e0>
    3220:	66 20       	and	r6, r6
    3222:	29 f0       	breq	.+10     	; 0x322e <vfprintf+0x300>
    3224:	b7 01       	movw	r22, r14
    3226:	86 2d       	mov	r24, r6
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	0e 94 0a 20 	call	0x4014	; 0x4014 <fputc>
    322e:	73 fc       	sbrc	r7, 3
    3230:	09 c0       	rjmp	.+18     	; 0x3244 <vfprintf+0x316>
    3232:	55 20       	and	r5, r5
    3234:	39 f0       	breq	.+14     	; 0x3244 <vfprintf+0x316>
    3236:	b7 01       	movw	r22, r14
    3238:	80 e3       	ldi	r24, 0x30	; 48
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	0e 94 0a 20 	call	0x4014	; 0x4014 <fputc>
    3240:	5a 94       	dec	r5
    3242:	f7 cf       	rjmp	.-18     	; 0x3232 <vfprintf+0x304>
    3244:	77 fe       	sbrs	r7, 7
    3246:	5f c0       	rjmp	.+190    	; 0x3306 <vfprintf+0x3d8>
    3248:	9c 2d       	mov	r25, r12
    324a:	8d 2d       	mov	r24, r13
    324c:	d7 fe       	sbrs	r13, 7
    324e:	02 c0       	rjmp	.+4      	; 0x3254 <vfprintf+0x326>
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	80 e0       	ldi	r24, 0x00	; 0
    3254:	69 2e       	mov	r6, r25
    3256:	78 2e       	mov	r7, r24
    3258:	40 e0       	ldi	r20, 0x00	; 0
    325a:	50 e0       	ldi	r21, 0x00	; 0
    325c:	c6 01       	movw	r24, r12
    325e:	84 19       	sub	r24, r4
    3260:	91 09       	sbc	r25, r1
    3262:	9d 87       	std	Y+13, r25	; 0x0d
    3264:	8c 87       	std	Y+12, r24	; 0x0c
    3266:	96 01       	movw	r18, r12
    3268:	26 19       	sub	r18, r6
    326a:	37 09       	sbc	r19, r7
    326c:	28 0d       	add	r18, r8
    326e:	39 1d       	adc	r19, r9
    3270:	81 2f       	mov	r24, r17
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	ee 27       	eor	r30, r30
    3276:	ff 27       	eor	r31, r31
    3278:	e8 1b       	sub	r30, r24
    327a:	f9 0b       	sbc	r31, r25
    327c:	ff 87       	std	Y+15, r31	; 0x0f
    327e:	ee 87       	std	Y+14, r30	; 0x0e
    3280:	ff ef       	ldi	r31, 0xFF	; 255
    3282:	6f 16       	cp	r6, r31
    3284:	7f 06       	cpc	r7, r31
    3286:	69 f4       	brne	.+26     	; 0x32a2 <vfprintf+0x374>
    3288:	b7 01       	movw	r22, r14
    328a:	8e e2       	ldi	r24, 0x2E	; 46
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	2b 8b       	std	Y+19, r18	; 0x13
    3290:	3a 8b       	std	Y+18, r19	; 0x12
    3292:	48 8b       	std	Y+16, r20	; 0x10
    3294:	59 8b       	std	Y+17, r21	; 0x11
    3296:	0e 94 0a 20 	call	0x4014	; 0x4014 <fputc>
    329a:	59 89       	ldd	r21, Y+17	; 0x11
    329c:	48 89       	ldd	r20, Y+16	; 0x10
    329e:	3a 89       	ldd	r19, Y+18	; 0x12
    32a0:	2b 89       	ldd	r18, Y+19	; 0x13
    32a2:	c6 14       	cp	r12, r6
    32a4:	d7 04       	cpc	r13, r7
    32a6:	54 f0       	brlt	.+20     	; 0x32bc <vfprintf+0x38e>
    32a8:	6c 85       	ldd	r22, Y+12	; 0x0c
    32aa:	7d 85       	ldd	r23, Y+13	; 0x0d
    32ac:	66 15       	cp	r22, r6
    32ae:	77 05       	cpc	r23, r7
    32b0:	2c f4       	brge	.+10     	; 0x32bc <vfprintf+0x38e>
    32b2:	f9 01       	movw	r30, r18
    32b4:	e4 0f       	add	r30, r20
    32b6:	f5 1f       	adc	r31, r21
    32b8:	81 81       	ldd	r24, Z+1	; 0x01
    32ba:	01 c0       	rjmp	.+2      	; 0x32be <vfprintf+0x390>
    32bc:	80 e3       	ldi	r24, 0x30	; 48
    32be:	71 e0       	ldi	r23, 0x01	; 1
    32c0:	67 1a       	sub	r6, r23
    32c2:	71 08       	sbc	r7, r1
    32c4:	4f 5f       	subi	r20, 0xFF	; 255
    32c6:	5f 4f       	sbci	r21, 0xFF	; 255
    32c8:	ee 85       	ldd	r30, Y+14	; 0x0e
    32ca:	ff 85       	ldd	r31, Y+15	; 0x0f
    32cc:	6e 16       	cp	r6, r30
    32ce:	7f 06       	cpc	r7, r31
    32d0:	6c f0       	brlt	.+26     	; 0x32ec <vfprintf+0x3be>
    32d2:	b7 01       	movw	r22, r14
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	2b 8b       	std	Y+19, r18	; 0x13
    32d8:	3a 8b       	std	Y+18, r19	; 0x12
    32da:	48 8b       	std	Y+16, r20	; 0x10
    32dc:	59 8b       	std	Y+17, r21	; 0x11
    32de:	0e 94 0a 20 	call	0x4014	; 0x4014 <fputc>
    32e2:	2b 89       	ldd	r18, Y+19	; 0x13
    32e4:	3a 89       	ldd	r19, Y+18	; 0x12
    32e6:	48 89       	ldd	r20, Y+16	; 0x10
    32e8:	59 89       	ldd	r21, Y+17	; 0x11
    32ea:	ca cf       	rjmp	.-108    	; 0x3280 <vfprintf+0x352>
    32ec:	6c 14       	cp	r6, r12
    32ee:	7d 04       	cpc	r7, r13
    32f0:	39 f4       	brne	.+14     	; 0x3300 <vfprintf+0x3d2>
    32f2:	9a 81       	ldd	r25, Y+2	; 0x02
    32f4:	96 33       	cpi	r25, 0x36	; 54
    32f6:	18 f4       	brcc	.+6      	; 0x32fe <vfprintf+0x3d0>
    32f8:	95 33       	cpi	r25, 0x35	; 53
    32fa:	11 f4       	brne	.+4      	; 0x3300 <vfprintf+0x3d2>
    32fc:	04 ff       	sbrs	r16, 4
    32fe:	81 e3       	ldi	r24, 0x31	; 49
    3300:	b7 01       	movw	r22, r14
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	4b c0       	rjmp	.+150    	; 0x339c <vfprintf+0x46e>
    3306:	8a 81       	ldd	r24, Y+2	; 0x02
    3308:	81 33       	cpi	r24, 0x31	; 49
    330a:	09 f0       	breq	.+2      	; 0x330e <vfprintf+0x3e0>
    330c:	0f 7e       	andi	r16, 0xEF	; 239
    330e:	b7 01       	movw	r22, r14
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	0e 94 0a 20 	call	0x4014	; 0x4014 <fputc>
    3316:	11 11       	cpse	r17, r1
    3318:	05 c0       	rjmp	.+10     	; 0x3324 <vfprintf+0x3f6>
    331a:	74 fe       	sbrs	r7, 4
    331c:	18 c0       	rjmp	.+48     	; 0x334e <vfprintf+0x420>
    331e:	85 e4       	ldi	r24, 0x45	; 69
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	17 c0       	rjmp	.+46     	; 0x3352 <vfprintf+0x424>
    3324:	b7 01       	movw	r22, r14
    3326:	8e e2       	ldi	r24, 0x2E	; 46
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	0e 94 0a 20 	call	0x4014	; 0x4014 <fputc>
    332e:	82 e0       	ldi	r24, 0x02	; 2
    3330:	66 24       	eor	r6, r6
    3332:	63 94       	inc	r6
    3334:	68 0e       	add	r6, r24
    3336:	f4 01       	movw	r30, r8
    3338:	e8 0f       	add	r30, r24
    333a:	f1 1d       	adc	r31, r1
    333c:	80 81       	ld	r24, Z
    333e:	b7 01       	movw	r22, r14
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	0e 94 0a 20 	call	0x4014	; 0x4014 <fputc>
    3346:	11 50       	subi	r17, 0x01	; 1
    3348:	41 f3       	breq	.-48     	; 0x331a <vfprintf+0x3ec>
    334a:	86 2d       	mov	r24, r6
    334c:	f1 cf       	rjmp	.-30     	; 0x3330 <vfprintf+0x402>
    334e:	85 e6       	ldi	r24, 0x65	; 101
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	b7 01       	movw	r22, r14
    3354:	0e 94 0a 20 	call	0x4014	; 0x4014 <fputc>
    3358:	d7 fc       	sbrc	r13, 7
    335a:	05 c0       	rjmp	.+10     	; 0x3366 <vfprintf+0x438>
    335c:	c1 14       	cp	r12, r1
    335e:	d1 04       	cpc	r13, r1
    3360:	39 f4       	brne	.+14     	; 0x3370 <vfprintf+0x442>
    3362:	04 ff       	sbrs	r16, 4
    3364:	05 c0       	rjmp	.+10     	; 0x3370 <vfprintf+0x442>
    3366:	d1 94       	neg	r13
    3368:	c1 94       	neg	r12
    336a:	d1 08       	sbc	r13, r1
    336c:	8d e2       	ldi	r24, 0x2D	; 45
    336e:	01 c0       	rjmp	.+2      	; 0x3372 <vfprintf+0x444>
    3370:	8b e2       	ldi	r24, 0x2B	; 43
    3372:	b7 01       	movw	r22, r14
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	0e 94 0a 20 	call	0x4014	; 0x4014 <fputc>
    337a:	80 e3       	ldi	r24, 0x30	; 48
    337c:	6a e0       	ldi	r22, 0x0A	; 10
    337e:	c6 16       	cp	r12, r22
    3380:	d1 04       	cpc	r13, r1
    3382:	2c f0       	brlt	.+10     	; 0x338e <vfprintf+0x460>
    3384:	8f 5f       	subi	r24, 0xFF	; 255
    3386:	fa e0       	ldi	r31, 0x0A	; 10
    3388:	cf 1a       	sub	r12, r31
    338a:	d1 08       	sbc	r13, r1
    338c:	f7 cf       	rjmp	.-18     	; 0x337c <vfprintf+0x44e>
    338e:	b7 01       	movw	r22, r14
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	0e 94 0a 20 	call	0x4014	; 0x4014 <fputc>
    3396:	b7 01       	movw	r22, r14
    3398:	c6 01       	movw	r24, r12
    339a:	c0 96       	adiw	r24, 0x30	; 48
    339c:	0e 94 0a 20 	call	0x4014	; 0x4014 <fputc>
    33a0:	41 c1       	rjmp	.+642    	; 0x3624 <vfprintf+0x6f6>
    33a2:	83 36       	cpi	r24, 0x63	; 99
    33a4:	31 f0       	breq	.+12     	; 0x33b2 <vfprintf+0x484>
    33a6:	83 37       	cpi	r24, 0x73	; 115
    33a8:	79 f0       	breq	.+30     	; 0x33c8 <vfprintf+0x49a>
    33aa:	83 35       	cpi	r24, 0x53	; 83
    33ac:	09 f0       	breq	.+2      	; 0x33b0 <vfprintf+0x482>
    33ae:	58 c0       	rjmp	.+176    	; 0x3460 <vfprintf+0x532>
    33b0:	21 c0       	rjmp	.+66     	; 0x33f4 <vfprintf+0x4c6>
    33b2:	56 01       	movw	r10, r12
    33b4:	72 e0       	ldi	r23, 0x02	; 2
    33b6:	a7 0e       	add	r10, r23
    33b8:	b1 1c       	adc	r11, r1
    33ba:	f6 01       	movw	r30, r12
    33bc:	80 81       	ld	r24, Z
    33be:	89 83       	std	Y+1, r24	; 0x01
    33c0:	01 e0       	ldi	r16, 0x01	; 1
    33c2:	10 e0       	ldi	r17, 0x00	; 0
    33c4:	64 01       	movw	r12, r8
    33c6:	14 c0       	rjmp	.+40     	; 0x33f0 <vfprintf+0x4c2>
    33c8:	56 01       	movw	r10, r12
    33ca:	f2 e0       	ldi	r31, 0x02	; 2
    33cc:	af 0e       	add	r10, r31
    33ce:	b1 1c       	adc	r11, r1
    33d0:	f6 01       	movw	r30, r12
    33d2:	c0 80       	ld	r12, Z
    33d4:	d1 80       	ldd	r13, Z+1	; 0x01
    33d6:	26 ff       	sbrs	r18, 6
    33d8:	03 c0       	rjmp	.+6      	; 0x33e0 <vfprintf+0x4b2>
    33da:	61 2f       	mov	r22, r17
    33dc:	70 e0       	ldi	r23, 0x00	; 0
    33de:	02 c0       	rjmp	.+4      	; 0x33e4 <vfprintf+0x4b6>
    33e0:	6f ef       	ldi	r22, 0xFF	; 255
    33e2:	7f ef       	ldi	r23, 0xFF	; 255
    33e4:	c6 01       	movw	r24, r12
    33e6:	2b 8b       	std	Y+19, r18	; 0x13
    33e8:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <strnlen>
    33ec:	8c 01       	movw	r16, r24
    33ee:	2b 89       	ldd	r18, Y+19	; 0x13
    33f0:	2f 77       	andi	r18, 0x7F	; 127
    33f2:	15 c0       	rjmp	.+42     	; 0x341e <vfprintf+0x4f0>
    33f4:	56 01       	movw	r10, r12
    33f6:	f2 e0       	ldi	r31, 0x02	; 2
    33f8:	af 0e       	add	r10, r31
    33fa:	b1 1c       	adc	r11, r1
    33fc:	f6 01       	movw	r30, r12
    33fe:	c0 80       	ld	r12, Z
    3400:	d1 80       	ldd	r13, Z+1	; 0x01
    3402:	26 ff       	sbrs	r18, 6
    3404:	03 c0       	rjmp	.+6      	; 0x340c <vfprintf+0x4de>
    3406:	61 2f       	mov	r22, r17
    3408:	70 e0       	ldi	r23, 0x00	; 0
    340a:	02 c0       	rjmp	.+4      	; 0x3410 <vfprintf+0x4e2>
    340c:	6f ef       	ldi	r22, 0xFF	; 255
    340e:	7f ef       	ldi	r23, 0xFF	; 255
    3410:	c6 01       	movw	r24, r12
    3412:	2b 8b       	std	Y+19, r18	; 0x13
    3414:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <strnlen_P>
    3418:	8c 01       	movw	r16, r24
    341a:	2b 89       	ldd	r18, Y+19	; 0x13
    341c:	20 68       	ori	r18, 0x80	; 128
    341e:	72 2e       	mov	r7, r18
    3420:	23 fd       	sbrc	r18, 3
    3422:	1a c0       	rjmp	.+52     	; 0x3458 <vfprintf+0x52a>
    3424:	85 2d       	mov	r24, r5
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	08 17       	cp	r16, r24
    342a:	19 07       	cpc	r17, r25
    342c:	a8 f4       	brcc	.+42     	; 0x3458 <vfprintf+0x52a>
    342e:	b7 01       	movw	r22, r14
    3430:	80 e2       	ldi	r24, 0x20	; 32
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	0e 94 0a 20 	call	0x4014	; 0x4014 <fputc>
    3438:	5a 94       	dec	r5
    343a:	f4 cf       	rjmp	.-24     	; 0x3424 <vfprintf+0x4f6>
    343c:	f6 01       	movw	r30, r12
    343e:	77 fc       	sbrc	r7, 7
    3440:	85 91       	lpm	r24, Z+
    3442:	77 fe       	sbrs	r7, 7
    3444:	81 91       	ld	r24, Z+
    3446:	6f 01       	movw	r12, r30
    3448:	b7 01       	movw	r22, r14
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	0e 94 0a 20 	call	0x4014	; 0x4014 <fputc>
    3450:	51 10       	cpse	r5, r1
    3452:	5a 94       	dec	r5
    3454:	01 50       	subi	r16, 0x01	; 1
    3456:	11 09       	sbc	r17, r1
    3458:	01 15       	cp	r16, r1
    345a:	11 05       	cpc	r17, r1
    345c:	79 f7       	brne	.-34     	; 0x343c <vfprintf+0x50e>
    345e:	e2 c0       	rjmp	.+452    	; 0x3624 <vfprintf+0x6f6>
    3460:	84 36       	cpi	r24, 0x64	; 100
    3462:	11 f0       	breq	.+4      	; 0x3468 <vfprintf+0x53a>
    3464:	89 36       	cpi	r24, 0x69	; 105
    3466:	51 f5       	brne	.+84     	; 0x34bc <vfprintf+0x58e>
    3468:	56 01       	movw	r10, r12
    346a:	27 ff       	sbrs	r18, 7
    346c:	09 c0       	rjmp	.+18     	; 0x3480 <vfprintf+0x552>
    346e:	f4 e0       	ldi	r31, 0x04	; 4
    3470:	af 0e       	add	r10, r31
    3472:	b1 1c       	adc	r11, r1
    3474:	f6 01       	movw	r30, r12
    3476:	60 81       	ld	r22, Z
    3478:	71 81       	ldd	r23, Z+1	; 0x01
    347a:	82 81       	ldd	r24, Z+2	; 0x02
    347c:	93 81       	ldd	r25, Z+3	; 0x03
    347e:	0a c0       	rjmp	.+20     	; 0x3494 <vfprintf+0x566>
    3480:	f2 e0       	ldi	r31, 0x02	; 2
    3482:	af 0e       	add	r10, r31
    3484:	b1 1c       	adc	r11, r1
    3486:	f6 01       	movw	r30, r12
    3488:	60 81       	ld	r22, Z
    348a:	71 81       	ldd	r23, Z+1	; 0x01
    348c:	88 27       	eor	r24, r24
    348e:	77 fd       	sbrc	r23, 7
    3490:	80 95       	com	r24
    3492:	98 2f       	mov	r25, r24
    3494:	02 2f       	mov	r16, r18
    3496:	0f 76       	andi	r16, 0x6F	; 111
    3498:	97 ff       	sbrs	r25, 7
    349a:	08 c0       	rjmp	.+16     	; 0x34ac <vfprintf+0x57e>
    349c:	90 95       	com	r25
    349e:	80 95       	com	r24
    34a0:	70 95       	com	r23
    34a2:	61 95       	neg	r22
    34a4:	7f 4f       	sbci	r23, 0xFF	; 255
    34a6:	8f 4f       	sbci	r24, 0xFF	; 255
    34a8:	9f 4f       	sbci	r25, 0xFF	; 255
    34aa:	00 68       	ori	r16, 0x80	; 128
    34ac:	2a e0       	ldi	r18, 0x0A	; 10
    34ae:	30 e0       	ldi	r19, 0x00	; 0
    34b0:	a4 01       	movw	r20, r8
    34b2:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__ultoa_invert>
    34b6:	c8 2e       	mov	r12, r24
    34b8:	c8 18       	sub	r12, r8
    34ba:	3e c0       	rjmp	.+124    	; 0x3538 <vfprintf+0x60a>
    34bc:	02 2f       	mov	r16, r18
    34be:	85 37       	cpi	r24, 0x75	; 117
    34c0:	21 f4       	brne	.+8      	; 0x34ca <vfprintf+0x59c>
    34c2:	0f 7e       	andi	r16, 0xEF	; 239
    34c4:	2a e0       	ldi	r18, 0x0A	; 10
    34c6:	30 e0       	ldi	r19, 0x00	; 0
    34c8:	1d c0       	rjmp	.+58     	; 0x3504 <vfprintf+0x5d6>
    34ca:	09 7f       	andi	r16, 0xF9	; 249
    34cc:	8f 36       	cpi	r24, 0x6F	; 111
    34ce:	91 f0       	breq	.+36     	; 0x34f4 <vfprintf+0x5c6>
    34d0:	18 f4       	brcc	.+6      	; 0x34d8 <vfprintf+0x5aa>
    34d2:	88 35       	cpi	r24, 0x58	; 88
    34d4:	59 f0       	breq	.+22     	; 0x34ec <vfprintf+0x5be>
    34d6:	b0 c0       	rjmp	.+352    	; 0x3638 <vfprintf+0x70a>
    34d8:	80 37       	cpi	r24, 0x70	; 112
    34da:	19 f0       	breq	.+6      	; 0x34e2 <vfprintf+0x5b4>
    34dc:	88 37       	cpi	r24, 0x78	; 120
    34de:	11 f0       	breq	.+4      	; 0x34e4 <vfprintf+0x5b6>
    34e0:	ab c0       	rjmp	.+342    	; 0x3638 <vfprintf+0x70a>
    34e2:	00 61       	ori	r16, 0x10	; 16
    34e4:	04 ff       	sbrs	r16, 4
    34e6:	09 c0       	rjmp	.+18     	; 0x34fa <vfprintf+0x5cc>
    34e8:	04 60       	ori	r16, 0x04	; 4
    34ea:	07 c0       	rjmp	.+14     	; 0x34fa <vfprintf+0x5cc>
    34ec:	24 ff       	sbrs	r18, 4
    34ee:	08 c0       	rjmp	.+16     	; 0x3500 <vfprintf+0x5d2>
    34f0:	06 60       	ori	r16, 0x06	; 6
    34f2:	06 c0       	rjmp	.+12     	; 0x3500 <vfprintf+0x5d2>
    34f4:	28 e0       	ldi	r18, 0x08	; 8
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	05 c0       	rjmp	.+10     	; 0x3504 <vfprintf+0x5d6>
    34fa:	20 e1       	ldi	r18, 0x10	; 16
    34fc:	30 e0       	ldi	r19, 0x00	; 0
    34fe:	02 c0       	rjmp	.+4      	; 0x3504 <vfprintf+0x5d6>
    3500:	20 e1       	ldi	r18, 0x10	; 16
    3502:	32 e0       	ldi	r19, 0x02	; 2
    3504:	56 01       	movw	r10, r12
    3506:	07 ff       	sbrs	r16, 7
    3508:	09 c0       	rjmp	.+18     	; 0x351c <vfprintf+0x5ee>
    350a:	f4 e0       	ldi	r31, 0x04	; 4
    350c:	af 0e       	add	r10, r31
    350e:	b1 1c       	adc	r11, r1
    3510:	f6 01       	movw	r30, r12
    3512:	60 81       	ld	r22, Z
    3514:	71 81       	ldd	r23, Z+1	; 0x01
    3516:	82 81       	ldd	r24, Z+2	; 0x02
    3518:	93 81       	ldd	r25, Z+3	; 0x03
    351a:	08 c0       	rjmp	.+16     	; 0x352c <vfprintf+0x5fe>
    351c:	f2 e0       	ldi	r31, 0x02	; 2
    351e:	af 0e       	add	r10, r31
    3520:	b1 1c       	adc	r11, r1
    3522:	f6 01       	movw	r30, r12
    3524:	60 81       	ld	r22, Z
    3526:	71 81       	ldd	r23, Z+1	; 0x01
    3528:	80 e0       	ldi	r24, 0x00	; 0
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	a4 01       	movw	r20, r8
    352e:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__ultoa_invert>
    3532:	c8 2e       	mov	r12, r24
    3534:	c8 18       	sub	r12, r8
    3536:	0f 77       	andi	r16, 0x7F	; 127
    3538:	06 ff       	sbrs	r16, 6
    353a:	0b c0       	rjmp	.+22     	; 0x3552 <vfprintf+0x624>
    353c:	20 2f       	mov	r18, r16
    353e:	2e 7f       	andi	r18, 0xFE	; 254
    3540:	c1 16       	cp	r12, r17
    3542:	50 f4       	brcc	.+20     	; 0x3558 <vfprintf+0x62a>
    3544:	04 ff       	sbrs	r16, 4
    3546:	0a c0       	rjmp	.+20     	; 0x355c <vfprintf+0x62e>
    3548:	02 fd       	sbrc	r16, 2
    354a:	08 c0       	rjmp	.+16     	; 0x355c <vfprintf+0x62e>
    354c:	20 2f       	mov	r18, r16
    354e:	2e 7e       	andi	r18, 0xEE	; 238
    3550:	05 c0       	rjmp	.+10     	; 0x355c <vfprintf+0x62e>
    3552:	dc 2c       	mov	r13, r12
    3554:	20 2f       	mov	r18, r16
    3556:	03 c0       	rjmp	.+6      	; 0x355e <vfprintf+0x630>
    3558:	dc 2c       	mov	r13, r12
    355a:	01 c0       	rjmp	.+2      	; 0x355e <vfprintf+0x630>
    355c:	d1 2e       	mov	r13, r17
    355e:	24 ff       	sbrs	r18, 4
    3560:	0d c0       	rjmp	.+26     	; 0x357c <vfprintf+0x64e>
    3562:	fe 01       	movw	r30, r28
    3564:	ec 0d       	add	r30, r12
    3566:	f1 1d       	adc	r31, r1
    3568:	80 81       	ld	r24, Z
    356a:	80 33       	cpi	r24, 0x30	; 48
    356c:	11 f4       	brne	.+4      	; 0x3572 <vfprintf+0x644>
    356e:	29 7e       	andi	r18, 0xE9	; 233
    3570:	09 c0       	rjmp	.+18     	; 0x3584 <vfprintf+0x656>
    3572:	22 ff       	sbrs	r18, 2
    3574:	06 c0       	rjmp	.+12     	; 0x3582 <vfprintf+0x654>
    3576:	d3 94       	inc	r13
    3578:	d3 94       	inc	r13
    357a:	04 c0       	rjmp	.+8      	; 0x3584 <vfprintf+0x656>
    357c:	82 2f       	mov	r24, r18
    357e:	86 78       	andi	r24, 0x86	; 134
    3580:	09 f0       	breq	.+2      	; 0x3584 <vfprintf+0x656>
    3582:	d3 94       	inc	r13
    3584:	23 fd       	sbrc	r18, 3
    3586:	13 c0       	rjmp	.+38     	; 0x35ae <vfprintf+0x680>
    3588:	20 ff       	sbrs	r18, 0
    358a:	06 c0       	rjmp	.+12     	; 0x3598 <vfprintf+0x66a>
    358c:	1c 2d       	mov	r17, r12
    358e:	d5 14       	cp	r13, r5
    3590:	18 f4       	brcc	.+6      	; 0x3598 <vfprintf+0x66a>
    3592:	15 0d       	add	r17, r5
    3594:	1d 19       	sub	r17, r13
    3596:	d5 2c       	mov	r13, r5
    3598:	d5 14       	cp	r13, r5
    359a:	68 f4       	brcc	.+26     	; 0x35b6 <vfprintf+0x688>
    359c:	b7 01       	movw	r22, r14
    359e:	80 e2       	ldi	r24, 0x20	; 32
    35a0:	90 e0       	ldi	r25, 0x00	; 0
    35a2:	2b 8b       	std	Y+19, r18	; 0x13
    35a4:	0e 94 0a 20 	call	0x4014	; 0x4014 <fputc>
    35a8:	d3 94       	inc	r13
    35aa:	2b 89       	ldd	r18, Y+19	; 0x13
    35ac:	f5 cf       	rjmp	.-22     	; 0x3598 <vfprintf+0x66a>
    35ae:	d5 14       	cp	r13, r5
    35b0:	10 f4       	brcc	.+4      	; 0x35b6 <vfprintf+0x688>
    35b2:	5d 18       	sub	r5, r13
    35b4:	01 c0       	rjmp	.+2      	; 0x35b8 <vfprintf+0x68a>
    35b6:	51 2c       	mov	r5, r1
    35b8:	24 ff       	sbrs	r18, 4
    35ba:	12 c0       	rjmp	.+36     	; 0x35e0 <vfprintf+0x6b2>
    35bc:	b7 01       	movw	r22, r14
    35be:	80 e3       	ldi	r24, 0x30	; 48
    35c0:	90 e0       	ldi	r25, 0x00	; 0
    35c2:	2b 8b       	std	Y+19, r18	; 0x13
    35c4:	0e 94 0a 20 	call	0x4014	; 0x4014 <fputc>
    35c8:	2b 89       	ldd	r18, Y+19	; 0x13
    35ca:	22 ff       	sbrs	r18, 2
    35cc:	17 c0       	rjmp	.+46     	; 0x35fc <vfprintf+0x6ce>
    35ce:	21 ff       	sbrs	r18, 1
    35d0:	03 c0       	rjmp	.+6      	; 0x35d8 <vfprintf+0x6aa>
    35d2:	88 e5       	ldi	r24, 0x58	; 88
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	02 c0       	rjmp	.+4      	; 0x35dc <vfprintf+0x6ae>
    35d8:	88 e7       	ldi	r24, 0x78	; 120
    35da:	90 e0       	ldi	r25, 0x00	; 0
    35dc:	b7 01       	movw	r22, r14
    35de:	0c c0       	rjmp	.+24     	; 0x35f8 <vfprintf+0x6ca>
    35e0:	82 2f       	mov	r24, r18
    35e2:	86 78       	andi	r24, 0x86	; 134
    35e4:	59 f0       	breq	.+22     	; 0x35fc <vfprintf+0x6ce>
    35e6:	21 fd       	sbrc	r18, 1
    35e8:	02 c0       	rjmp	.+4      	; 0x35ee <vfprintf+0x6c0>
    35ea:	80 e2       	ldi	r24, 0x20	; 32
    35ec:	01 c0       	rjmp	.+2      	; 0x35f0 <vfprintf+0x6c2>
    35ee:	8b e2       	ldi	r24, 0x2B	; 43
    35f0:	27 fd       	sbrc	r18, 7
    35f2:	8d e2       	ldi	r24, 0x2D	; 45
    35f4:	b7 01       	movw	r22, r14
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	0e 94 0a 20 	call	0x4014	; 0x4014 <fputc>
    35fc:	c1 16       	cp	r12, r17
    35fe:	38 f4       	brcc	.+14     	; 0x360e <vfprintf+0x6e0>
    3600:	b7 01       	movw	r22, r14
    3602:	80 e3       	ldi	r24, 0x30	; 48
    3604:	90 e0       	ldi	r25, 0x00	; 0
    3606:	0e 94 0a 20 	call	0x4014	; 0x4014 <fputc>
    360a:	11 50       	subi	r17, 0x01	; 1
    360c:	f7 cf       	rjmp	.-18     	; 0x35fc <vfprintf+0x6ce>
    360e:	ca 94       	dec	r12
    3610:	f4 01       	movw	r30, r8
    3612:	ec 0d       	add	r30, r12
    3614:	f1 1d       	adc	r31, r1
    3616:	80 81       	ld	r24, Z
    3618:	b7 01       	movw	r22, r14
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	0e 94 0a 20 	call	0x4014	; 0x4014 <fputc>
    3620:	c1 10       	cpse	r12, r1
    3622:	f5 cf       	rjmp	.-22     	; 0x360e <vfprintf+0x6e0>
    3624:	55 20       	and	r5, r5
    3626:	09 f4       	brne	.+2      	; 0x362a <vfprintf+0x6fc>
    3628:	c2 cc       	rjmp	.-1660   	; 0x2fae <vfprintf+0x80>
    362a:	b7 01       	movw	r22, r14
    362c:	80 e2       	ldi	r24, 0x20	; 32
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	0e 94 0a 20 	call	0x4014	; 0x4014 <fputc>
    3634:	5a 94       	dec	r5
    3636:	f6 cf       	rjmp	.-20     	; 0x3624 <vfprintf+0x6f6>
    3638:	f7 01       	movw	r30, r14
    363a:	86 81       	ldd	r24, Z+6	; 0x06
    363c:	97 81       	ldd	r25, Z+7	; 0x07
    363e:	02 c0       	rjmp	.+4      	; 0x3644 <vfprintf+0x716>
    3640:	8f ef       	ldi	r24, 0xFF	; 255
    3642:	9f ef       	ldi	r25, 0xFF	; 255
    3644:	63 96       	adiw	r28, 0x13	; 19
    3646:	0f b6       	in	r0, 0x3f	; 63
    3648:	f8 94       	cli
    364a:	de bf       	out	0x3e, r29	; 62
    364c:	0f be       	out	0x3f, r0	; 63
    364e:	cd bf       	out	0x3d, r28	; 61
    3650:	df 91       	pop	r29
    3652:	cf 91       	pop	r28
    3654:	1f 91       	pop	r17
    3656:	0f 91       	pop	r16
    3658:	ff 90       	pop	r15
    365a:	ef 90       	pop	r14
    365c:	df 90       	pop	r13
    365e:	cf 90       	pop	r12
    3660:	bf 90       	pop	r11
    3662:	af 90       	pop	r10
    3664:	9f 90       	pop	r9
    3666:	8f 90       	pop	r8
    3668:	7f 90       	pop	r7
    366a:	6f 90       	pop	r6
    366c:	5f 90       	pop	r5
    366e:	4f 90       	pop	r4
    3670:	3f 90       	pop	r3
    3672:	2f 90       	pop	r2
    3674:	08 95       	ret

00003676 <__mulsi3>:
    3676:	db 01       	movw	r26, r22
    3678:	8f 93       	push	r24
    367a:	9f 93       	push	r25
    367c:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__muluhisi3>
    3680:	bf 91       	pop	r27
    3682:	af 91       	pop	r26
    3684:	a2 9f       	mul	r26, r18
    3686:	80 0d       	add	r24, r0
    3688:	91 1d       	adc	r25, r1
    368a:	a3 9f       	mul	r26, r19
    368c:	90 0d       	add	r25, r0
    368e:	b2 9f       	mul	r27, r18
    3690:	90 0d       	add	r25, r0
    3692:	11 24       	eor	r1, r1
    3694:	08 95       	ret

00003696 <__udivmodsi4>:
    3696:	a1 e2       	ldi	r26, 0x21	; 33
    3698:	1a 2e       	mov	r1, r26
    369a:	aa 1b       	sub	r26, r26
    369c:	bb 1b       	sub	r27, r27
    369e:	fd 01       	movw	r30, r26
    36a0:	0d c0       	rjmp	.+26     	; 0x36bc <__udivmodsi4_ep>

000036a2 <__udivmodsi4_loop>:
    36a2:	aa 1f       	adc	r26, r26
    36a4:	bb 1f       	adc	r27, r27
    36a6:	ee 1f       	adc	r30, r30
    36a8:	ff 1f       	adc	r31, r31
    36aa:	a2 17       	cp	r26, r18
    36ac:	b3 07       	cpc	r27, r19
    36ae:	e4 07       	cpc	r30, r20
    36b0:	f5 07       	cpc	r31, r21
    36b2:	20 f0       	brcs	.+8      	; 0x36bc <__udivmodsi4_ep>
    36b4:	a2 1b       	sub	r26, r18
    36b6:	b3 0b       	sbc	r27, r19
    36b8:	e4 0b       	sbc	r30, r20
    36ba:	f5 0b       	sbc	r31, r21

000036bc <__udivmodsi4_ep>:
    36bc:	66 1f       	adc	r22, r22
    36be:	77 1f       	adc	r23, r23
    36c0:	88 1f       	adc	r24, r24
    36c2:	99 1f       	adc	r25, r25
    36c4:	1a 94       	dec	r1
    36c6:	69 f7       	brne	.-38     	; 0x36a2 <__udivmodsi4_loop>
    36c8:	60 95       	com	r22
    36ca:	70 95       	com	r23
    36cc:	80 95       	com	r24
    36ce:	90 95       	com	r25
    36d0:	9b 01       	movw	r18, r22
    36d2:	ac 01       	movw	r20, r24
    36d4:	bd 01       	movw	r22, r26
    36d6:	cf 01       	movw	r24, r30
    36d8:	08 95       	ret

000036da <__tablejump2__>:
    36da:	ee 0f       	add	r30, r30
    36dc:	ff 1f       	adc	r31, r31

000036de <__tablejump__>:
    36de:	05 90       	lpm	r0, Z+
    36e0:	f4 91       	lpm	r31, Z
    36e2:	e0 2d       	mov	r30, r0
    36e4:	19 94       	eijmp

000036e6 <__muluhisi3>:
    36e6:	0e 94 86 1b 	call	0x370c	; 0x370c <__umulhisi3>
    36ea:	a5 9f       	mul	r26, r21
    36ec:	90 0d       	add	r25, r0
    36ee:	b4 9f       	mul	r27, r20
    36f0:	90 0d       	add	r25, r0
    36f2:	a4 9f       	mul	r26, r20
    36f4:	80 0d       	add	r24, r0
    36f6:	91 1d       	adc	r25, r1
    36f8:	11 24       	eor	r1, r1
    36fa:	08 95       	ret

000036fc <__mulshisi3>:
    36fc:	b7 ff       	sbrs	r27, 7
    36fe:	0c 94 73 1b 	jmp	0x36e6	; 0x36e6 <__muluhisi3>

00003702 <__mulohisi3>:
    3702:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__muluhisi3>
    3706:	82 1b       	sub	r24, r18
    3708:	93 0b       	sbc	r25, r19
    370a:	08 95       	ret

0000370c <__umulhisi3>:
    370c:	a2 9f       	mul	r26, r18
    370e:	b0 01       	movw	r22, r0
    3710:	b3 9f       	mul	r27, r19
    3712:	c0 01       	movw	r24, r0
    3714:	a3 9f       	mul	r26, r19
    3716:	70 0d       	add	r23, r0
    3718:	81 1d       	adc	r24, r1
    371a:	11 24       	eor	r1, r1
    371c:	91 1d       	adc	r25, r1
    371e:	b2 9f       	mul	r27, r18
    3720:	70 0d       	add	r23, r0
    3722:	81 1d       	adc	r24, r1
    3724:	11 24       	eor	r1, r1
    3726:	91 1d       	adc	r25, r1
    3728:	08 95       	ret

0000372a <__subsf3>:
    372a:	50 58       	subi	r21, 0x80	; 128

0000372c <__addsf3>:
    372c:	bb 27       	eor	r27, r27
    372e:	aa 27       	eor	r26, r26
    3730:	0e d0       	rcall	.+28     	; 0x374e <__addsf3x>
    3732:	75 c1       	rjmp	.+746    	; 0x3a1e <__fp_round>
    3734:	66 d1       	rcall	.+716    	; 0x3a02 <__fp_pscA>
    3736:	30 f0       	brcs	.+12     	; 0x3744 <__addsf3+0x18>
    3738:	6b d1       	rcall	.+726    	; 0x3a10 <__fp_pscB>
    373a:	20 f0       	brcs	.+8      	; 0x3744 <__addsf3+0x18>
    373c:	31 f4       	brne	.+12     	; 0x374a <__addsf3+0x1e>
    373e:	9f 3f       	cpi	r25, 0xFF	; 255
    3740:	11 f4       	brne	.+4      	; 0x3746 <__addsf3+0x1a>
    3742:	1e f4       	brtc	.+6      	; 0x374a <__addsf3+0x1e>
    3744:	5b c1       	rjmp	.+694    	; 0x39fc <__fp_nan>
    3746:	0e f4       	brtc	.+2      	; 0x374a <__addsf3+0x1e>
    3748:	e0 95       	com	r30
    374a:	e7 fb       	bst	r30, 7
    374c:	51 c1       	rjmp	.+674    	; 0x39f0 <__fp_inf>

0000374e <__addsf3x>:
    374e:	e9 2f       	mov	r30, r25
    3750:	77 d1       	rcall	.+750    	; 0x3a40 <__fp_split3>
    3752:	80 f3       	brcs	.-32     	; 0x3734 <__addsf3+0x8>
    3754:	ba 17       	cp	r27, r26
    3756:	62 07       	cpc	r22, r18
    3758:	73 07       	cpc	r23, r19
    375a:	84 07       	cpc	r24, r20
    375c:	95 07       	cpc	r25, r21
    375e:	18 f0       	brcs	.+6      	; 0x3766 <__addsf3x+0x18>
    3760:	71 f4       	brne	.+28     	; 0x377e <__addsf3x+0x30>
    3762:	9e f5       	brtc	.+102    	; 0x37ca <__addsf3x+0x7c>
    3764:	8f c1       	rjmp	.+798    	; 0x3a84 <__fp_zero>
    3766:	0e f4       	brtc	.+2      	; 0x376a <__addsf3x+0x1c>
    3768:	e0 95       	com	r30
    376a:	0b 2e       	mov	r0, r27
    376c:	ba 2f       	mov	r27, r26
    376e:	a0 2d       	mov	r26, r0
    3770:	0b 01       	movw	r0, r22
    3772:	b9 01       	movw	r22, r18
    3774:	90 01       	movw	r18, r0
    3776:	0c 01       	movw	r0, r24
    3778:	ca 01       	movw	r24, r20
    377a:	a0 01       	movw	r20, r0
    377c:	11 24       	eor	r1, r1
    377e:	ff 27       	eor	r31, r31
    3780:	59 1b       	sub	r21, r25
    3782:	99 f0       	breq	.+38     	; 0x37aa <__addsf3x+0x5c>
    3784:	59 3f       	cpi	r21, 0xF9	; 249
    3786:	50 f4       	brcc	.+20     	; 0x379c <__addsf3x+0x4e>
    3788:	50 3e       	cpi	r21, 0xE0	; 224
    378a:	68 f1       	brcs	.+90     	; 0x37e6 <__addsf3x+0x98>
    378c:	1a 16       	cp	r1, r26
    378e:	f0 40       	sbci	r31, 0x00	; 0
    3790:	a2 2f       	mov	r26, r18
    3792:	23 2f       	mov	r18, r19
    3794:	34 2f       	mov	r19, r20
    3796:	44 27       	eor	r20, r20
    3798:	58 5f       	subi	r21, 0xF8	; 248
    379a:	f3 cf       	rjmp	.-26     	; 0x3782 <__addsf3x+0x34>
    379c:	46 95       	lsr	r20
    379e:	37 95       	ror	r19
    37a0:	27 95       	ror	r18
    37a2:	a7 95       	ror	r26
    37a4:	f0 40       	sbci	r31, 0x00	; 0
    37a6:	53 95       	inc	r21
    37a8:	c9 f7       	brne	.-14     	; 0x379c <__addsf3x+0x4e>
    37aa:	7e f4       	brtc	.+30     	; 0x37ca <__addsf3x+0x7c>
    37ac:	1f 16       	cp	r1, r31
    37ae:	ba 0b       	sbc	r27, r26
    37b0:	62 0b       	sbc	r22, r18
    37b2:	73 0b       	sbc	r23, r19
    37b4:	84 0b       	sbc	r24, r20
    37b6:	ba f0       	brmi	.+46     	; 0x37e6 <__addsf3x+0x98>
    37b8:	91 50       	subi	r25, 0x01	; 1
    37ba:	a1 f0       	breq	.+40     	; 0x37e4 <__addsf3x+0x96>
    37bc:	ff 0f       	add	r31, r31
    37be:	bb 1f       	adc	r27, r27
    37c0:	66 1f       	adc	r22, r22
    37c2:	77 1f       	adc	r23, r23
    37c4:	88 1f       	adc	r24, r24
    37c6:	c2 f7       	brpl	.-16     	; 0x37b8 <__addsf3x+0x6a>
    37c8:	0e c0       	rjmp	.+28     	; 0x37e6 <__addsf3x+0x98>
    37ca:	ba 0f       	add	r27, r26
    37cc:	62 1f       	adc	r22, r18
    37ce:	73 1f       	adc	r23, r19
    37d0:	84 1f       	adc	r24, r20
    37d2:	48 f4       	brcc	.+18     	; 0x37e6 <__addsf3x+0x98>
    37d4:	87 95       	ror	r24
    37d6:	77 95       	ror	r23
    37d8:	67 95       	ror	r22
    37da:	b7 95       	ror	r27
    37dc:	f7 95       	ror	r31
    37de:	9e 3f       	cpi	r25, 0xFE	; 254
    37e0:	08 f0       	brcs	.+2      	; 0x37e4 <__addsf3x+0x96>
    37e2:	b3 cf       	rjmp	.-154    	; 0x374a <__addsf3+0x1e>
    37e4:	93 95       	inc	r25
    37e6:	88 0f       	add	r24, r24
    37e8:	08 f0       	brcs	.+2      	; 0x37ec <__addsf3x+0x9e>
    37ea:	99 27       	eor	r25, r25
    37ec:	ee 0f       	add	r30, r30
    37ee:	97 95       	ror	r25
    37f0:	87 95       	ror	r24
    37f2:	08 95       	ret

000037f4 <__cmpsf2>:
    37f4:	d9 d0       	rcall	.+434    	; 0x39a8 <__fp_cmp>
    37f6:	08 f4       	brcc	.+2      	; 0x37fa <__cmpsf2+0x6>
    37f8:	81 e0       	ldi	r24, 0x01	; 1
    37fa:	08 95       	ret

000037fc <__divsf3>:
    37fc:	0c d0       	rcall	.+24     	; 0x3816 <__divsf3x>
    37fe:	0f c1       	rjmp	.+542    	; 0x3a1e <__fp_round>
    3800:	07 d1       	rcall	.+526    	; 0x3a10 <__fp_pscB>
    3802:	40 f0       	brcs	.+16     	; 0x3814 <__divsf3+0x18>
    3804:	fe d0       	rcall	.+508    	; 0x3a02 <__fp_pscA>
    3806:	30 f0       	brcs	.+12     	; 0x3814 <__divsf3+0x18>
    3808:	21 f4       	brne	.+8      	; 0x3812 <__divsf3+0x16>
    380a:	5f 3f       	cpi	r21, 0xFF	; 255
    380c:	19 f0       	breq	.+6      	; 0x3814 <__divsf3+0x18>
    380e:	f0 c0       	rjmp	.+480    	; 0x39f0 <__fp_inf>
    3810:	51 11       	cpse	r21, r1
    3812:	39 c1       	rjmp	.+626    	; 0x3a86 <__fp_szero>
    3814:	f3 c0       	rjmp	.+486    	; 0x39fc <__fp_nan>

00003816 <__divsf3x>:
    3816:	14 d1       	rcall	.+552    	; 0x3a40 <__fp_split3>
    3818:	98 f3       	brcs	.-26     	; 0x3800 <__divsf3+0x4>

0000381a <__divsf3_pse>:
    381a:	99 23       	and	r25, r25
    381c:	c9 f3       	breq	.-14     	; 0x3810 <__divsf3+0x14>
    381e:	55 23       	and	r21, r21
    3820:	b1 f3       	breq	.-20     	; 0x380e <__divsf3+0x12>
    3822:	95 1b       	sub	r25, r21
    3824:	55 0b       	sbc	r21, r21
    3826:	bb 27       	eor	r27, r27
    3828:	aa 27       	eor	r26, r26
    382a:	62 17       	cp	r22, r18
    382c:	73 07       	cpc	r23, r19
    382e:	84 07       	cpc	r24, r20
    3830:	38 f0       	brcs	.+14     	; 0x3840 <__divsf3_pse+0x26>
    3832:	9f 5f       	subi	r25, 0xFF	; 255
    3834:	5f 4f       	sbci	r21, 0xFF	; 255
    3836:	22 0f       	add	r18, r18
    3838:	33 1f       	adc	r19, r19
    383a:	44 1f       	adc	r20, r20
    383c:	aa 1f       	adc	r26, r26
    383e:	a9 f3       	breq	.-22     	; 0x382a <__divsf3_pse+0x10>
    3840:	33 d0       	rcall	.+102    	; 0x38a8 <__divsf3_pse+0x8e>
    3842:	0e 2e       	mov	r0, r30
    3844:	3a f0       	brmi	.+14     	; 0x3854 <__divsf3_pse+0x3a>
    3846:	e0 e8       	ldi	r30, 0x80	; 128
    3848:	30 d0       	rcall	.+96     	; 0x38aa <__divsf3_pse+0x90>
    384a:	91 50       	subi	r25, 0x01	; 1
    384c:	50 40       	sbci	r21, 0x00	; 0
    384e:	e6 95       	lsr	r30
    3850:	00 1c       	adc	r0, r0
    3852:	ca f7       	brpl	.-14     	; 0x3846 <__divsf3_pse+0x2c>
    3854:	29 d0       	rcall	.+82     	; 0x38a8 <__divsf3_pse+0x8e>
    3856:	fe 2f       	mov	r31, r30
    3858:	27 d0       	rcall	.+78     	; 0x38a8 <__divsf3_pse+0x8e>
    385a:	66 0f       	add	r22, r22
    385c:	77 1f       	adc	r23, r23
    385e:	88 1f       	adc	r24, r24
    3860:	bb 1f       	adc	r27, r27
    3862:	26 17       	cp	r18, r22
    3864:	37 07       	cpc	r19, r23
    3866:	48 07       	cpc	r20, r24
    3868:	ab 07       	cpc	r26, r27
    386a:	b0 e8       	ldi	r27, 0x80	; 128
    386c:	09 f0       	breq	.+2      	; 0x3870 <__divsf3_pse+0x56>
    386e:	bb 0b       	sbc	r27, r27
    3870:	80 2d       	mov	r24, r0
    3872:	bf 01       	movw	r22, r30
    3874:	ff 27       	eor	r31, r31
    3876:	93 58       	subi	r25, 0x83	; 131
    3878:	5f 4f       	sbci	r21, 0xFF	; 255
    387a:	2a f0       	brmi	.+10     	; 0x3886 <__divsf3_pse+0x6c>
    387c:	9e 3f       	cpi	r25, 0xFE	; 254
    387e:	51 05       	cpc	r21, r1
    3880:	68 f0       	brcs	.+26     	; 0x389c <__divsf3_pse+0x82>
    3882:	b6 c0       	rjmp	.+364    	; 0x39f0 <__fp_inf>
    3884:	00 c1       	rjmp	.+512    	; 0x3a86 <__fp_szero>
    3886:	5f 3f       	cpi	r21, 0xFF	; 255
    3888:	ec f3       	brlt	.-6      	; 0x3884 <__divsf3_pse+0x6a>
    388a:	98 3e       	cpi	r25, 0xE8	; 232
    388c:	dc f3       	brlt	.-10     	; 0x3884 <__divsf3_pse+0x6a>
    388e:	86 95       	lsr	r24
    3890:	77 95       	ror	r23
    3892:	67 95       	ror	r22
    3894:	b7 95       	ror	r27
    3896:	f7 95       	ror	r31
    3898:	9f 5f       	subi	r25, 0xFF	; 255
    389a:	c9 f7       	brne	.-14     	; 0x388e <__divsf3_pse+0x74>
    389c:	88 0f       	add	r24, r24
    389e:	91 1d       	adc	r25, r1
    38a0:	96 95       	lsr	r25
    38a2:	87 95       	ror	r24
    38a4:	97 f9       	bld	r25, 7
    38a6:	08 95       	ret
    38a8:	e1 e0       	ldi	r30, 0x01	; 1
    38aa:	66 0f       	add	r22, r22
    38ac:	77 1f       	adc	r23, r23
    38ae:	88 1f       	adc	r24, r24
    38b0:	bb 1f       	adc	r27, r27
    38b2:	62 17       	cp	r22, r18
    38b4:	73 07       	cpc	r23, r19
    38b6:	84 07       	cpc	r24, r20
    38b8:	ba 07       	cpc	r27, r26
    38ba:	20 f0       	brcs	.+8      	; 0x38c4 <__divsf3_pse+0xaa>
    38bc:	62 1b       	sub	r22, r18
    38be:	73 0b       	sbc	r23, r19
    38c0:	84 0b       	sbc	r24, r20
    38c2:	ba 0b       	sbc	r27, r26
    38c4:	ee 1f       	adc	r30, r30
    38c6:	88 f7       	brcc	.-30     	; 0x38aa <__divsf3_pse+0x90>
    38c8:	e0 95       	com	r30
    38ca:	08 95       	ret

000038cc <__fixsfsi>:
    38cc:	04 d0       	rcall	.+8      	; 0x38d6 <__fixunssfsi>
    38ce:	68 94       	set
    38d0:	b1 11       	cpse	r27, r1
    38d2:	d9 c0       	rjmp	.+434    	; 0x3a86 <__fp_szero>
    38d4:	08 95       	ret

000038d6 <__fixunssfsi>:
    38d6:	bc d0       	rcall	.+376    	; 0x3a50 <__fp_splitA>
    38d8:	88 f0       	brcs	.+34     	; 0x38fc <__fixunssfsi+0x26>
    38da:	9f 57       	subi	r25, 0x7F	; 127
    38dc:	90 f0       	brcs	.+36     	; 0x3902 <__fixunssfsi+0x2c>
    38de:	b9 2f       	mov	r27, r25
    38e0:	99 27       	eor	r25, r25
    38e2:	b7 51       	subi	r27, 0x17	; 23
    38e4:	a0 f0       	brcs	.+40     	; 0x390e <__fixunssfsi+0x38>
    38e6:	d1 f0       	breq	.+52     	; 0x391c <__fixunssfsi+0x46>
    38e8:	66 0f       	add	r22, r22
    38ea:	77 1f       	adc	r23, r23
    38ec:	88 1f       	adc	r24, r24
    38ee:	99 1f       	adc	r25, r25
    38f0:	1a f0       	brmi	.+6      	; 0x38f8 <__fixunssfsi+0x22>
    38f2:	ba 95       	dec	r27
    38f4:	c9 f7       	brne	.-14     	; 0x38e8 <__fixunssfsi+0x12>
    38f6:	12 c0       	rjmp	.+36     	; 0x391c <__fixunssfsi+0x46>
    38f8:	b1 30       	cpi	r27, 0x01	; 1
    38fa:	81 f0       	breq	.+32     	; 0x391c <__fixunssfsi+0x46>
    38fc:	c3 d0       	rcall	.+390    	; 0x3a84 <__fp_zero>
    38fe:	b1 e0       	ldi	r27, 0x01	; 1
    3900:	08 95       	ret
    3902:	c0 c0       	rjmp	.+384    	; 0x3a84 <__fp_zero>
    3904:	67 2f       	mov	r22, r23
    3906:	78 2f       	mov	r23, r24
    3908:	88 27       	eor	r24, r24
    390a:	b8 5f       	subi	r27, 0xF8	; 248
    390c:	39 f0       	breq	.+14     	; 0x391c <__fixunssfsi+0x46>
    390e:	b9 3f       	cpi	r27, 0xF9	; 249
    3910:	cc f3       	brlt	.-14     	; 0x3904 <__fixunssfsi+0x2e>
    3912:	86 95       	lsr	r24
    3914:	77 95       	ror	r23
    3916:	67 95       	ror	r22
    3918:	b3 95       	inc	r27
    391a:	d9 f7       	brne	.-10     	; 0x3912 <__fixunssfsi+0x3c>
    391c:	3e f4       	brtc	.+14     	; 0x392c <__fixunssfsi+0x56>
    391e:	90 95       	com	r25
    3920:	80 95       	com	r24
    3922:	70 95       	com	r23
    3924:	61 95       	neg	r22
    3926:	7f 4f       	sbci	r23, 0xFF	; 255
    3928:	8f 4f       	sbci	r24, 0xFF	; 255
    392a:	9f 4f       	sbci	r25, 0xFF	; 255
    392c:	08 95       	ret

0000392e <__floatunsisf>:
    392e:	e8 94       	clt
    3930:	09 c0       	rjmp	.+18     	; 0x3944 <__floatsisf+0x12>

00003932 <__floatsisf>:
    3932:	97 fb       	bst	r25, 7
    3934:	3e f4       	brtc	.+14     	; 0x3944 <__floatsisf+0x12>
    3936:	90 95       	com	r25
    3938:	80 95       	com	r24
    393a:	70 95       	com	r23
    393c:	61 95       	neg	r22
    393e:	7f 4f       	sbci	r23, 0xFF	; 255
    3940:	8f 4f       	sbci	r24, 0xFF	; 255
    3942:	9f 4f       	sbci	r25, 0xFF	; 255
    3944:	99 23       	and	r25, r25
    3946:	a9 f0       	breq	.+42     	; 0x3972 <__floatsisf+0x40>
    3948:	f9 2f       	mov	r31, r25
    394a:	96 e9       	ldi	r25, 0x96	; 150
    394c:	bb 27       	eor	r27, r27
    394e:	93 95       	inc	r25
    3950:	f6 95       	lsr	r31
    3952:	87 95       	ror	r24
    3954:	77 95       	ror	r23
    3956:	67 95       	ror	r22
    3958:	b7 95       	ror	r27
    395a:	f1 11       	cpse	r31, r1
    395c:	f8 cf       	rjmp	.-16     	; 0x394e <__floatsisf+0x1c>
    395e:	fa f4       	brpl	.+62     	; 0x399e <__floatsisf+0x6c>
    3960:	bb 0f       	add	r27, r27
    3962:	11 f4       	brne	.+4      	; 0x3968 <__floatsisf+0x36>
    3964:	60 ff       	sbrs	r22, 0
    3966:	1b c0       	rjmp	.+54     	; 0x399e <__floatsisf+0x6c>
    3968:	6f 5f       	subi	r22, 0xFF	; 255
    396a:	7f 4f       	sbci	r23, 0xFF	; 255
    396c:	8f 4f       	sbci	r24, 0xFF	; 255
    396e:	9f 4f       	sbci	r25, 0xFF	; 255
    3970:	16 c0       	rjmp	.+44     	; 0x399e <__floatsisf+0x6c>
    3972:	88 23       	and	r24, r24
    3974:	11 f0       	breq	.+4      	; 0x397a <__floatsisf+0x48>
    3976:	96 e9       	ldi	r25, 0x96	; 150
    3978:	11 c0       	rjmp	.+34     	; 0x399c <__floatsisf+0x6a>
    397a:	77 23       	and	r23, r23
    397c:	21 f0       	breq	.+8      	; 0x3986 <__floatsisf+0x54>
    397e:	9e e8       	ldi	r25, 0x8E	; 142
    3980:	87 2f       	mov	r24, r23
    3982:	76 2f       	mov	r23, r22
    3984:	05 c0       	rjmp	.+10     	; 0x3990 <__floatsisf+0x5e>
    3986:	66 23       	and	r22, r22
    3988:	71 f0       	breq	.+28     	; 0x39a6 <__floatsisf+0x74>
    398a:	96 e8       	ldi	r25, 0x86	; 134
    398c:	86 2f       	mov	r24, r22
    398e:	70 e0       	ldi	r23, 0x00	; 0
    3990:	60 e0       	ldi	r22, 0x00	; 0
    3992:	2a f0       	brmi	.+10     	; 0x399e <__floatsisf+0x6c>
    3994:	9a 95       	dec	r25
    3996:	66 0f       	add	r22, r22
    3998:	77 1f       	adc	r23, r23
    399a:	88 1f       	adc	r24, r24
    399c:	da f7       	brpl	.-10     	; 0x3994 <__floatsisf+0x62>
    399e:	88 0f       	add	r24, r24
    39a0:	96 95       	lsr	r25
    39a2:	87 95       	ror	r24
    39a4:	97 f9       	bld	r25, 7
    39a6:	08 95       	ret

000039a8 <__fp_cmp>:
    39a8:	99 0f       	add	r25, r25
    39aa:	00 08       	sbc	r0, r0
    39ac:	55 0f       	add	r21, r21
    39ae:	aa 0b       	sbc	r26, r26
    39b0:	e0 e8       	ldi	r30, 0x80	; 128
    39b2:	fe ef       	ldi	r31, 0xFE	; 254
    39b4:	16 16       	cp	r1, r22
    39b6:	17 06       	cpc	r1, r23
    39b8:	e8 07       	cpc	r30, r24
    39ba:	f9 07       	cpc	r31, r25
    39bc:	c0 f0       	brcs	.+48     	; 0x39ee <__fp_cmp+0x46>
    39be:	12 16       	cp	r1, r18
    39c0:	13 06       	cpc	r1, r19
    39c2:	e4 07       	cpc	r30, r20
    39c4:	f5 07       	cpc	r31, r21
    39c6:	98 f0       	brcs	.+38     	; 0x39ee <__fp_cmp+0x46>
    39c8:	62 1b       	sub	r22, r18
    39ca:	73 0b       	sbc	r23, r19
    39cc:	84 0b       	sbc	r24, r20
    39ce:	95 0b       	sbc	r25, r21
    39d0:	39 f4       	brne	.+14     	; 0x39e0 <__fp_cmp+0x38>
    39d2:	0a 26       	eor	r0, r26
    39d4:	61 f0       	breq	.+24     	; 0x39ee <__fp_cmp+0x46>
    39d6:	23 2b       	or	r18, r19
    39d8:	24 2b       	or	r18, r20
    39da:	25 2b       	or	r18, r21
    39dc:	21 f4       	brne	.+8      	; 0x39e6 <__fp_cmp+0x3e>
    39de:	08 95       	ret
    39e0:	0a 26       	eor	r0, r26
    39e2:	09 f4       	brne	.+2      	; 0x39e6 <__fp_cmp+0x3e>
    39e4:	a1 40       	sbci	r26, 0x01	; 1
    39e6:	a6 95       	lsr	r26
    39e8:	8f ef       	ldi	r24, 0xFF	; 255
    39ea:	81 1d       	adc	r24, r1
    39ec:	81 1d       	adc	r24, r1
    39ee:	08 95       	ret

000039f0 <__fp_inf>:
    39f0:	97 f9       	bld	r25, 7
    39f2:	9f 67       	ori	r25, 0x7F	; 127
    39f4:	80 e8       	ldi	r24, 0x80	; 128
    39f6:	70 e0       	ldi	r23, 0x00	; 0
    39f8:	60 e0       	ldi	r22, 0x00	; 0
    39fa:	08 95       	ret

000039fc <__fp_nan>:
    39fc:	9f ef       	ldi	r25, 0xFF	; 255
    39fe:	80 ec       	ldi	r24, 0xC0	; 192
    3a00:	08 95       	ret

00003a02 <__fp_pscA>:
    3a02:	00 24       	eor	r0, r0
    3a04:	0a 94       	dec	r0
    3a06:	16 16       	cp	r1, r22
    3a08:	17 06       	cpc	r1, r23
    3a0a:	18 06       	cpc	r1, r24
    3a0c:	09 06       	cpc	r0, r25
    3a0e:	08 95       	ret

00003a10 <__fp_pscB>:
    3a10:	00 24       	eor	r0, r0
    3a12:	0a 94       	dec	r0
    3a14:	12 16       	cp	r1, r18
    3a16:	13 06       	cpc	r1, r19
    3a18:	14 06       	cpc	r1, r20
    3a1a:	05 06       	cpc	r0, r21
    3a1c:	08 95       	ret

00003a1e <__fp_round>:
    3a1e:	09 2e       	mov	r0, r25
    3a20:	03 94       	inc	r0
    3a22:	00 0c       	add	r0, r0
    3a24:	11 f4       	brne	.+4      	; 0x3a2a <__fp_round+0xc>
    3a26:	88 23       	and	r24, r24
    3a28:	52 f0       	brmi	.+20     	; 0x3a3e <__fp_round+0x20>
    3a2a:	bb 0f       	add	r27, r27
    3a2c:	40 f4       	brcc	.+16     	; 0x3a3e <__fp_round+0x20>
    3a2e:	bf 2b       	or	r27, r31
    3a30:	11 f4       	brne	.+4      	; 0x3a36 <__fp_round+0x18>
    3a32:	60 ff       	sbrs	r22, 0
    3a34:	04 c0       	rjmp	.+8      	; 0x3a3e <__fp_round+0x20>
    3a36:	6f 5f       	subi	r22, 0xFF	; 255
    3a38:	7f 4f       	sbci	r23, 0xFF	; 255
    3a3a:	8f 4f       	sbci	r24, 0xFF	; 255
    3a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a3e:	08 95       	ret

00003a40 <__fp_split3>:
    3a40:	57 fd       	sbrc	r21, 7
    3a42:	90 58       	subi	r25, 0x80	; 128
    3a44:	44 0f       	add	r20, r20
    3a46:	55 1f       	adc	r21, r21
    3a48:	59 f0       	breq	.+22     	; 0x3a60 <__fp_splitA+0x10>
    3a4a:	5f 3f       	cpi	r21, 0xFF	; 255
    3a4c:	71 f0       	breq	.+28     	; 0x3a6a <__fp_splitA+0x1a>
    3a4e:	47 95       	ror	r20

00003a50 <__fp_splitA>:
    3a50:	88 0f       	add	r24, r24
    3a52:	97 fb       	bst	r25, 7
    3a54:	99 1f       	adc	r25, r25
    3a56:	61 f0       	breq	.+24     	; 0x3a70 <__fp_splitA+0x20>
    3a58:	9f 3f       	cpi	r25, 0xFF	; 255
    3a5a:	79 f0       	breq	.+30     	; 0x3a7a <__fp_splitA+0x2a>
    3a5c:	87 95       	ror	r24
    3a5e:	08 95       	ret
    3a60:	12 16       	cp	r1, r18
    3a62:	13 06       	cpc	r1, r19
    3a64:	14 06       	cpc	r1, r20
    3a66:	55 1f       	adc	r21, r21
    3a68:	f2 cf       	rjmp	.-28     	; 0x3a4e <__fp_split3+0xe>
    3a6a:	46 95       	lsr	r20
    3a6c:	f1 df       	rcall	.-30     	; 0x3a50 <__fp_splitA>
    3a6e:	08 c0       	rjmp	.+16     	; 0x3a80 <__fp_splitA+0x30>
    3a70:	16 16       	cp	r1, r22
    3a72:	17 06       	cpc	r1, r23
    3a74:	18 06       	cpc	r1, r24
    3a76:	99 1f       	adc	r25, r25
    3a78:	f1 cf       	rjmp	.-30     	; 0x3a5c <__fp_splitA+0xc>
    3a7a:	86 95       	lsr	r24
    3a7c:	71 05       	cpc	r23, r1
    3a7e:	61 05       	cpc	r22, r1
    3a80:	08 94       	sec
    3a82:	08 95       	ret

00003a84 <__fp_zero>:
    3a84:	e8 94       	clt

00003a86 <__fp_szero>:
    3a86:	bb 27       	eor	r27, r27
    3a88:	66 27       	eor	r22, r22
    3a8a:	77 27       	eor	r23, r23
    3a8c:	cb 01       	movw	r24, r22
    3a8e:	97 f9       	bld	r25, 7
    3a90:	08 95       	ret

00003a92 <__gesf2>:
    3a92:	8a df       	rcall	.-236    	; 0x39a8 <__fp_cmp>
    3a94:	08 f4       	brcc	.+2      	; 0x3a98 <__gesf2+0x6>
    3a96:	8f ef       	ldi	r24, 0xFF	; 255
    3a98:	08 95       	ret

00003a9a <__mulsf3>:
    3a9a:	0b d0       	rcall	.+22     	; 0x3ab2 <__mulsf3x>
    3a9c:	c0 cf       	rjmp	.-128    	; 0x3a1e <__fp_round>
    3a9e:	b1 df       	rcall	.-158    	; 0x3a02 <__fp_pscA>
    3aa0:	28 f0       	brcs	.+10     	; 0x3aac <__mulsf3+0x12>
    3aa2:	b6 df       	rcall	.-148    	; 0x3a10 <__fp_pscB>
    3aa4:	18 f0       	brcs	.+6      	; 0x3aac <__mulsf3+0x12>
    3aa6:	95 23       	and	r25, r21
    3aa8:	09 f0       	breq	.+2      	; 0x3aac <__mulsf3+0x12>
    3aaa:	a2 cf       	rjmp	.-188    	; 0x39f0 <__fp_inf>
    3aac:	a7 cf       	rjmp	.-178    	; 0x39fc <__fp_nan>
    3aae:	11 24       	eor	r1, r1
    3ab0:	ea cf       	rjmp	.-44     	; 0x3a86 <__fp_szero>

00003ab2 <__mulsf3x>:
    3ab2:	c6 df       	rcall	.-116    	; 0x3a40 <__fp_split3>
    3ab4:	a0 f3       	brcs	.-24     	; 0x3a9e <__mulsf3+0x4>

00003ab6 <__mulsf3_pse>:
    3ab6:	95 9f       	mul	r25, r21
    3ab8:	d1 f3       	breq	.-12     	; 0x3aae <__mulsf3+0x14>
    3aba:	95 0f       	add	r25, r21
    3abc:	50 e0       	ldi	r21, 0x00	; 0
    3abe:	55 1f       	adc	r21, r21
    3ac0:	62 9f       	mul	r22, r18
    3ac2:	f0 01       	movw	r30, r0
    3ac4:	72 9f       	mul	r23, r18
    3ac6:	bb 27       	eor	r27, r27
    3ac8:	f0 0d       	add	r31, r0
    3aca:	b1 1d       	adc	r27, r1
    3acc:	63 9f       	mul	r22, r19
    3ace:	aa 27       	eor	r26, r26
    3ad0:	f0 0d       	add	r31, r0
    3ad2:	b1 1d       	adc	r27, r1
    3ad4:	aa 1f       	adc	r26, r26
    3ad6:	64 9f       	mul	r22, r20
    3ad8:	66 27       	eor	r22, r22
    3ada:	b0 0d       	add	r27, r0
    3adc:	a1 1d       	adc	r26, r1
    3ade:	66 1f       	adc	r22, r22
    3ae0:	82 9f       	mul	r24, r18
    3ae2:	22 27       	eor	r18, r18
    3ae4:	b0 0d       	add	r27, r0
    3ae6:	a1 1d       	adc	r26, r1
    3ae8:	62 1f       	adc	r22, r18
    3aea:	73 9f       	mul	r23, r19
    3aec:	b0 0d       	add	r27, r0
    3aee:	a1 1d       	adc	r26, r1
    3af0:	62 1f       	adc	r22, r18
    3af2:	83 9f       	mul	r24, r19
    3af4:	a0 0d       	add	r26, r0
    3af6:	61 1d       	adc	r22, r1
    3af8:	22 1f       	adc	r18, r18
    3afa:	74 9f       	mul	r23, r20
    3afc:	33 27       	eor	r19, r19
    3afe:	a0 0d       	add	r26, r0
    3b00:	61 1d       	adc	r22, r1
    3b02:	23 1f       	adc	r18, r19
    3b04:	84 9f       	mul	r24, r20
    3b06:	60 0d       	add	r22, r0
    3b08:	21 1d       	adc	r18, r1
    3b0a:	82 2f       	mov	r24, r18
    3b0c:	76 2f       	mov	r23, r22
    3b0e:	6a 2f       	mov	r22, r26
    3b10:	11 24       	eor	r1, r1
    3b12:	9f 57       	subi	r25, 0x7F	; 127
    3b14:	50 40       	sbci	r21, 0x00	; 0
    3b16:	8a f0       	brmi	.+34     	; 0x3b3a <__mulsf3_pse+0x84>
    3b18:	e1 f0       	breq	.+56     	; 0x3b52 <__mulsf3_pse+0x9c>
    3b1a:	88 23       	and	r24, r24
    3b1c:	4a f0       	brmi	.+18     	; 0x3b30 <__mulsf3_pse+0x7a>
    3b1e:	ee 0f       	add	r30, r30
    3b20:	ff 1f       	adc	r31, r31
    3b22:	bb 1f       	adc	r27, r27
    3b24:	66 1f       	adc	r22, r22
    3b26:	77 1f       	adc	r23, r23
    3b28:	88 1f       	adc	r24, r24
    3b2a:	91 50       	subi	r25, 0x01	; 1
    3b2c:	50 40       	sbci	r21, 0x00	; 0
    3b2e:	a9 f7       	brne	.-22     	; 0x3b1a <__mulsf3_pse+0x64>
    3b30:	9e 3f       	cpi	r25, 0xFE	; 254
    3b32:	51 05       	cpc	r21, r1
    3b34:	70 f0       	brcs	.+28     	; 0x3b52 <__mulsf3_pse+0x9c>
    3b36:	5c cf       	rjmp	.-328    	; 0x39f0 <__fp_inf>
    3b38:	a6 cf       	rjmp	.-180    	; 0x3a86 <__fp_szero>
    3b3a:	5f 3f       	cpi	r21, 0xFF	; 255
    3b3c:	ec f3       	brlt	.-6      	; 0x3b38 <__mulsf3_pse+0x82>
    3b3e:	98 3e       	cpi	r25, 0xE8	; 232
    3b40:	dc f3       	brlt	.-10     	; 0x3b38 <__mulsf3_pse+0x82>
    3b42:	86 95       	lsr	r24
    3b44:	77 95       	ror	r23
    3b46:	67 95       	ror	r22
    3b48:	b7 95       	ror	r27
    3b4a:	f7 95       	ror	r31
    3b4c:	e7 95       	ror	r30
    3b4e:	9f 5f       	subi	r25, 0xFF	; 255
    3b50:	c1 f7       	brne	.-16     	; 0x3b42 <__mulsf3_pse+0x8c>
    3b52:	fe 2b       	or	r31, r30
    3b54:	88 0f       	add	r24, r24
    3b56:	91 1d       	adc	r25, r1
    3b58:	96 95       	lsr	r25
    3b5a:	87 95       	ror	r24
    3b5c:	97 f9       	bld	r25, 7
    3b5e:	08 95       	ret

00003b60 <pow>:
    3b60:	fa 01       	movw	r30, r20
    3b62:	ee 0f       	add	r30, r30
    3b64:	ff 1f       	adc	r31, r31
    3b66:	30 96       	adiw	r30, 0x00	; 0
    3b68:	21 05       	cpc	r18, r1
    3b6a:	31 05       	cpc	r19, r1
    3b6c:	99 f1       	breq	.+102    	; 0x3bd4 <pow+0x74>
    3b6e:	61 15       	cp	r22, r1
    3b70:	71 05       	cpc	r23, r1
    3b72:	61 f4       	brne	.+24     	; 0x3b8c <pow+0x2c>
    3b74:	80 38       	cpi	r24, 0x80	; 128
    3b76:	bf e3       	ldi	r27, 0x3F	; 63
    3b78:	9b 07       	cpc	r25, r27
    3b7a:	49 f1       	breq	.+82     	; 0x3bce <pow+0x6e>
    3b7c:	68 94       	set
    3b7e:	90 38       	cpi	r25, 0x80	; 128
    3b80:	81 05       	cpc	r24, r1
    3b82:	61 f0       	breq	.+24     	; 0x3b9c <pow+0x3c>
    3b84:	80 38       	cpi	r24, 0x80	; 128
    3b86:	bf ef       	ldi	r27, 0xFF	; 255
    3b88:	9b 07       	cpc	r25, r27
    3b8a:	41 f0       	breq	.+16     	; 0x3b9c <pow+0x3c>
    3b8c:	99 23       	and	r25, r25
    3b8e:	42 f5       	brpl	.+80     	; 0x3be0 <pow+0x80>
    3b90:	ff 3f       	cpi	r31, 0xFF	; 255
    3b92:	e1 05       	cpc	r30, r1
    3b94:	31 05       	cpc	r19, r1
    3b96:	21 05       	cpc	r18, r1
    3b98:	11 f1       	breq	.+68     	; 0x3bde <pow+0x7e>
    3b9a:	e8 94       	clt
    3b9c:	08 94       	sec
    3b9e:	e7 95       	ror	r30
    3ba0:	d9 01       	movw	r26, r18
    3ba2:	aa 23       	and	r26, r26
    3ba4:	29 f4       	brne	.+10     	; 0x3bb0 <pow+0x50>
    3ba6:	ab 2f       	mov	r26, r27
    3ba8:	be 2f       	mov	r27, r30
    3baa:	f8 5f       	subi	r31, 0xF8	; 248
    3bac:	d0 f3       	brcs	.-12     	; 0x3ba2 <pow+0x42>
    3bae:	10 c0       	rjmp	.+32     	; 0x3bd0 <pow+0x70>
    3bb0:	ff 5f       	subi	r31, 0xFF	; 255
    3bb2:	70 f4       	brcc	.+28     	; 0x3bd0 <pow+0x70>
    3bb4:	a6 95       	lsr	r26
    3bb6:	e0 f7       	brcc	.-8      	; 0x3bb0 <pow+0x50>
    3bb8:	f7 39       	cpi	r31, 0x97	; 151
    3bba:	50 f0       	brcs	.+20     	; 0x3bd0 <pow+0x70>
    3bbc:	19 f0       	breq	.+6      	; 0x3bc4 <pow+0x64>
    3bbe:	ff 3a       	cpi	r31, 0xAF	; 175
    3bc0:	38 f4       	brcc	.+14     	; 0x3bd0 <pow+0x70>
    3bc2:	9f 77       	andi	r25, 0x7F	; 127
    3bc4:	9f 93       	push	r25
    3bc6:	0c d0       	rcall	.+24     	; 0x3be0 <pow+0x80>
    3bc8:	0f 90       	pop	r0
    3bca:	07 fc       	sbrc	r0, 7
    3bcc:	90 58       	subi	r25, 0x80	; 128
    3bce:	08 95       	ret
    3bd0:	3e f0       	brts	.+14     	; 0x3be0 <pow+0x80>
    3bd2:	14 cf       	rjmp	.-472    	; 0x39fc <__fp_nan>
    3bd4:	60 e0       	ldi	r22, 0x00	; 0
    3bd6:	70 e0       	ldi	r23, 0x00	; 0
    3bd8:	80 e8       	ldi	r24, 0x80	; 128
    3bda:	9f e3       	ldi	r25, 0x3F	; 63
    3bdc:	08 95       	ret
    3bde:	4f e7       	ldi	r20, 0x7F	; 127
    3be0:	9f 77       	andi	r25, 0x7F	; 127
    3be2:	5f 93       	push	r21
    3be4:	4f 93       	push	r20
    3be6:	3f 93       	push	r19
    3be8:	2f 93       	push	r18
    3bea:	9e d0       	rcall	.+316    	; 0x3d28 <log>
    3bec:	2f 91       	pop	r18
    3bee:	3f 91       	pop	r19
    3bf0:	4f 91       	pop	r20
    3bf2:	5f 91       	pop	r21
    3bf4:	52 df       	rcall	.-348    	; 0x3a9a <__mulsf3>
    3bf6:	05 c0       	rjmp	.+10     	; 0x3c02 <exp>
    3bf8:	19 f4       	brne	.+6      	; 0x3c00 <pow+0xa0>
    3bfa:	0e f0       	brts	.+2      	; 0x3bfe <pow+0x9e>
    3bfc:	f9 ce       	rjmp	.-526    	; 0x39f0 <__fp_inf>
    3bfe:	42 cf       	rjmp	.-380    	; 0x3a84 <__fp_zero>
    3c00:	fd ce       	rjmp	.-518    	; 0x39fc <__fp_nan>

00003c02 <exp>:
    3c02:	26 df       	rcall	.-436    	; 0x3a50 <__fp_splitA>
    3c04:	c8 f3       	brcs	.-14     	; 0x3bf8 <pow+0x98>
    3c06:	96 38       	cpi	r25, 0x86	; 134
    3c08:	c0 f7       	brcc	.-16     	; 0x3bfa <pow+0x9a>
    3c0a:	07 f8       	bld	r0, 7
    3c0c:	0f 92       	push	r0
    3c0e:	e8 94       	clt
    3c10:	2b e3       	ldi	r18, 0x3B	; 59
    3c12:	3a ea       	ldi	r19, 0xAA	; 170
    3c14:	48 eb       	ldi	r20, 0xB8	; 184
    3c16:	5f e7       	ldi	r21, 0x7F	; 127
    3c18:	4e df       	rcall	.-356    	; 0x3ab6 <__mulsf3_pse>
    3c1a:	0f 92       	push	r0
    3c1c:	0f 92       	push	r0
    3c1e:	0f 92       	push	r0
    3c20:	4d b7       	in	r20, 0x3d	; 61
    3c22:	5e b7       	in	r21, 0x3e	; 62
    3c24:	0f 92       	push	r0
    3c26:	c0 d0       	rcall	.+384    	; 0x3da8 <modf>
    3c28:	ee e0       	ldi	r30, 0x0E	; 14
    3c2a:	f1 e0       	ldi	r31, 0x01	; 1
    3c2c:	16 d0       	rcall	.+44     	; 0x3c5a <__fp_powser>
    3c2e:	4f 91       	pop	r20
    3c30:	5f 91       	pop	r21
    3c32:	ef 91       	pop	r30
    3c34:	ff 91       	pop	r31
    3c36:	e5 95       	asr	r30
    3c38:	ee 1f       	adc	r30, r30
    3c3a:	ff 1f       	adc	r31, r31
    3c3c:	49 f0       	breq	.+18     	; 0x3c50 <exp+0x4e>
    3c3e:	fe 57       	subi	r31, 0x7E	; 126
    3c40:	e0 68       	ori	r30, 0x80	; 128
    3c42:	44 27       	eor	r20, r20
    3c44:	ee 0f       	add	r30, r30
    3c46:	44 1f       	adc	r20, r20
    3c48:	fa 95       	dec	r31
    3c4a:	e1 f7       	brne	.-8      	; 0x3c44 <exp+0x42>
    3c4c:	41 95       	neg	r20
    3c4e:	55 0b       	sbc	r21, r21
    3c50:	32 d0       	rcall	.+100    	; 0x3cb6 <ldexp>
    3c52:	0f 90       	pop	r0
    3c54:	07 fe       	sbrs	r0, 7
    3c56:	26 c0       	rjmp	.+76     	; 0x3ca4 <inverse>
    3c58:	08 95       	ret

00003c5a <__fp_powser>:
    3c5a:	df 93       	push	r29
    3c5c:	cf 93       	push	r28
    3c5e:	1f 93       	push	r17
    3c60:	0f 93       	push	r16
    3c62:	ff 92       	push	r15
    3c64:	ef 92       	push	r14
    3c66:	df 92       	push	r13
    3c68:	7b 01       	movw	r14, r22
    3c6a:	8c 01       	movw	r16, r24
    3c6c:	68 94       	set
    3c6e:	05 c0       	rjmp	.+10     	; 0x3c7a <__fp_powser+0x20>
    3c70:	da 2e       	mov	r13, r26
    3c72:	ef 01       	movw	r28, r30
    3c74:	1e df       	rcall	.-452    	; 0x3ab2 <__mulsf3x>
    3c76:	fe 01       	movw	r30, r28
    3c78:	e8 94       	clt
    3c7a:	a5 91       	lpm	r26, Z+
    3c7c:	25 91       	lpm	r18, Z+
    3c7e:	35 91       	lpm	r19, Z+
    3c80:	45 91       	lpm	r20, Z+
    3c82:	55 91       	lpm	r21, Z+
    3c84:	ae f3       	brts	.-22     	; 0x3c70 <__fp_powser+0x16>
    3c86:	ef 01       	movw	r28, r30
    3c88:	62 dd       	rcall	.-1340   	; 0x374e <__addsf3x>
    3c8a:	fe 01       	movw	r30, r28
    3c8c:	97 01       	movw	r18, r14
    3c8e:	a8 01       	movw	r20, r16
    3c90:	da 94       	dec	r13
    3c92:	79 f7       	brne	.-34     	; 0x3c72 <__fp_powser+0x18>
    3c94:	df 90       	pop	r13
    3c96:	ef 90       	pop	r14
    3c98:	ff 90       	pop	r15
    3c9a:	0f 91       	pop	r16
    3c9c:	1f 91       	pop	r17
    3c9e:	cf 91       	pop	r28
    3ca0:	df 91       	pop	r29
    3ca2:	08 95       	ret

00003ca4 <inverse>:
    3ca4:	9b 01       	movw	r18, r22
    3ca6:	ac 01       	movw	r20, r24
    3ca8:	60 e0       	ldi	r22, 0x00	; 0
    3caa:	70 e0       	ldi	r23, 0x00	; 0
    3cac:	80 e8       	ldi	r24, 0x80	; 128
    3cae:	9f e3       	ldi	r25, 0x3F	; 63
    3cb0:	a5 cd       	rjmp	.-1206   	; 0x37fc <__divsf3>
    3cb2:	9e ce       	rjmp	.-708    	; 0x39f0 <__fp_inf>
    3cb4:	ac c0       	rjmp	.+344    	; 0x3e0e <__fp_mpack>

00003cb6 <ldexp>:
    3cb6:	cc de       	rcall	.-616    	; 0x3a50 <__fp_splitA>
    3cb8:	e8 f3       	brcs	.-6      	; 0x3cb4 <inverse+0x10>
    3cba:	99 23       	and	r25, r25
    3cbc:	d9 f3       	breq	.-10     	; 0x3cb4 <inverse+0x10>
    3cbe:	94 0f       	add	r25, r20
    3cc0:	51 1d       	adc	r21, r1
    3cc2:	bb f3       	brvs	.-18     	; 0x3cb2 <inverse+0xe>
    3cc4:	91 50       	subi	r25, 0x01	; 1
    3cc6:	50 40       	sbci	r21, 0x00	; 0
    3cc8:	94 f0       	brlt	.+36     	; 0x3cee <ldexp+0x38>
    3cca:	59 f0       	breq	.+22     	; 0x3ce2 <ldexp+0x2c>
    3ccc:	88 23       	and	r24, r24
    3cce:	32 f0       	brmi	.+12     	; 0x3cdc <ldexp+0x26>
    3cd0:	66 0f       	add	r22, r22
    3cd2:	77 1f       	adc	r23, r23
    3cd4:	88 1f       	adc	r24, r24
    3cd6:	91 50       	subi	r25, 0x01	; 1
    3cd8:	50 40       	sbci	r21, 0x00	; 0
    3cda:	c1 f7       	brne	.-16     	; 0x3ccc <ldexp+0x16>
    3cdc:	9e 3f       	cpi	r25, 0xFE	; 254
    3cde:	51 05       	cpc	r21, r1
    3ce0:	44 f7       	brge	.-48     	; 0x3cb2 <inverse+0xe>
    3ce2:	88 0f       	add	r24, r24
    3ce4:	91 1d       	adc	r25, r1
    3ce6:	96 95       	lsr	r25
    3ce8:	87 95       	ror	r24
    3cea:	97 f9       	bld	r25, 7
    3cec:	08 95       	ret
    3cee:	5f 3f       	cpi	r21, 0xFF	; 255
    3cf0:	ac f0       	brlt	.+42     	; 0x3d1c <ldexp+0x66>
    3cf2:	98 3e       	cpi	r25, 0xE8	; 232
    3cf4:	9c f0       	brlt	.+38     	; 0x3d1c <ldexp+0x66>
    3cf6:	bb 27       	eor	r27, r27
    3cf8:	86 95       	lsr	r24
    3cfa:	77 95       	ror	r23
    3cfc:	67 95       	ror	r22
    3cfe:	b7 95       	ror	r27
    3d00:	08 f4       	brcc	.+2      	; 0x3d04 <ldexp+0x4e>
    3d02:	b1 60       	ori	r27, 0x01	; 1
    3d04:	93 95       	inc	r25
    3d06:	c1 f7       	brne	.-16     	; 0x3cf8 <ldexp+0x42>
    3d08:	bb 0f       	add	r27, r27
    3d0a:	58 f7       	brcc	.-42     	; 0x3ce2 <ldexp+0x2c>
    3d0c:	11 f4       	brne	.+4      	; 0x3d12 <ldexp+0x5c>
    3d0e:	60 ff       	sbrs	r22, 0
    3d10:	e8 cf       	rjmp	.-48     	; 0x3ce2 <ldexp+0x2c>
    3d12:	6f 5f       	subi	r22, 0xFF	; 255
    3d14:	7f 4f       	sbci	r23, 0xFF	; 255
    3d16:	8f 4f       	sbci	r24, 0xFF	; 255
    3d18:	9f 4f       	sbci	r25, 0xFF	; 255
    3d1a:	e3 cf       	rjmp	.-58     	; 0x3ce2 <ldexp+0x2c>
    3d1c:	b4 ce       	rjmp	.-664    	; 0x3a86 <__fp_szero>
    3d1e:	0e f0       	brts	.+2      	; 0x3d22 <ldexp+0x6c>
    3d20:	76 c0       	rjmp	.+236    	; 0x3e0e <__fp_mpack>
    3d22:	6c ce       	rjmp	.-808    	; 0x39fc <__fp_nan>
    3d24:	68 94       	set
    3d26:	64 ce       	rjmp	.-824    	; 0x39f0 <__fp_inf>

00003d28 <log>:
    3d28:	93 de       	rcall	.-730    	; 0x3a50 <__fp_splitA>
    3d2a:	c8 f3       	brcs	.-14     	; 0x3d1e <ldexp+0x68>
    3d2c:	99 23       	and	r25, r25
    3d2e:	d1 f3       	breq	.-12     	; 0x3d24 <ldexp+0x6e>
    3d30:	c6 f3       	brts	.-16     	; 0x3d22 <ldexp+0x6c>
    3d32:	df 93       	push	r29
    3d34:	cf 93       	push	r28
    3d36:	1f 93       	push	r17
    3d38:	0f 93       	push	r16
    3d3a:	ff 92       	push	r15
    3d3c:	c9 2f       	mov	r28, r25
    3d3e:	dd 27       	eor	r29, r29
    3d40:	88 23       	and	r24, r24
    3d42:	2a f0       	brmi	.+10     	; 0x3d4e <log+0x26>
    3d44:	21 97       	sbiw	r28, 0x01	; 1
    3d46:	66 0f       	add	r22, r22
    3d48:	77 1f       	adc	r23, r23
    3d4a:	88 1f       	adc	r24, r24
    3d4c:	da f7       	brpl	.-10     	; 0x3d44 <log+0x1c>
    3d4e:	20 e0       	ldi	r18, 0x00	; 0
    3d50:	30 e0       	ldi	r19, 0x00	; 0
    3d52:	40 e8       	ldi	r20, 0x80	; 128
    3d54:	5f eb       	ldi	r21, 0xBF	; 191
    3d56:	9f e3       	ldi	r25, 0x3F	; 63
    3d58:	88 39       	cpi	r24, 0x98	; 152
    3d5a:	20 f0       	brcs	.+8      	; 0x3d64 <log+0x3c>
    3d5c:	80 3e       	cpi	r24, 0xE0	; 224
    3d5e:	30 f0       	brcs	.+12     	; 0x3d6c <log+0x44>
    3d60:	21 96       	adiw	r28, 0x01	; 1
    3d62:	8f 77       	andi	r24, 0x7F	; 127
    3d64:	e3 dc       	rcall	.-1594   	; 0x372c <__addsf3>
    3d66:	e6 e3       	ldi	r30, 0x36	; 54
    3d68:	f1 e0       	ldi	r31, 0x01	; 1
    3d6a:	03 c0       	rjmp	.+6      	; 0x3d72 <log+0x4a>
    3d6c:	df dc       	rcall	.-1602   	; 0x372c <__addsf3>
    3d6e:	e3 e6       	ldi	r30, 0x63	; 99
    3d70:	f1 e0       	ldi	r31, 0x01	; 1
    3d72:	73 df       	rcall	.-282    	; 0x3c5a <__fp_powser>
    3d74:	8b 01       	movw	r16, r22
    3d76:	be 01       	movw	r22, r28
    3d78:	ec 01       	movw	r28, r24
    3d7a:	fb 2e       	mov	r15, r27
    3d7c:	6f 57       	subi	r22, 0x7F	; 127
    3d7e:	71 09       	sbc	r23, r1
    3d80:	75 95       	asr	r23
    3d82:	77 1f       	adc	r23, r23
    3d84:	88 0b       	sbc	r24, r24
    3d86:	99 0b       	sbc	r25, r25
    3d88:	d4 dd       	rcall	.-1112   	; 0x3932 <__floatsisf>
    3d8a:	28 e1       	ldi	r18, 0x18	; 24
    3d8c:	32 e7       	ldi	r19, 0x72	; 114
    3d8e:	41 e3       	ldi	r20, 0x31	; 49
    3d90:	5f e3       	ldi	r21, 0x3F	; 63
    3d92:	8f de       	rcall	.-738    	; 0x3ab2 <__mulsf3x>
    3d94:	af 2d       	mov	r26, r15
    3d96:	98 01       	movw	r18, r16
    3d98:	ae 01       	movw	r20, r28
    3d9a:	ff 90       	pop	r15
    3d9c:	0f 91       	pop	r16
    3d9e:	1f 91       	pop	r17
    3da0:	cf 91       	pop	r28
    3da2:	df 91       	pop	r29
    3da4:	d4 dc       	rcall	.-1624   	; 0x374e <__addsf3x>
    3da6:	3b ce       	rjmp	.-906    	; 0x3a1e <__fp_round>

00003da8 <modf>:
    3da8:	fa 01       	movw	r30, r20
    3daa:	dc 01       	movw	r26, r24
    3dac:	aa 0f       	add	r26, r26
    3dae:	bb 1f       	adc	r27, r27
    3db0:	9b 01       	movw	r18, r22
    3db2:	ac 01       	movw	r20, r24
    3db4:	bf 57       	subi	r27, 0x7F	; 127
    3db6:	28 f4       	brcc	.+10     	; 0x3dc2 <modf+0x1a>
    3db8:	22 27       	eor	r18, r18
    3dba:	33 27       	eor	r19, r19
    3dbc:	44 27       	eor	r20, r20
    3dbe:	50 78       	andi	r21, 0x80	; 128
    3dc0:	1f c0       	rjmp	.+62     	; 0x3e00 <modf+0x58>
    3dc2:	b7 51       	subi	r27, 0x17	; 23
    3dc4:	88 f4       	brcc	.+34     	; 0x3de8 <modf+0x40>
    3dc6:	ab 2f       	mov	r26, r27
    3dc8:	00 24       	eor	r0, r0
    3dca:	46 95       	lsr	r20
    3dcc:	37 95       	ror	r19
    3dce:	27 95       	ror	r18
    3dd0:	01 1c       	adc	r0, r1
    3dd2:	a3 95       	inc	r26
    3dd4:	d2 f3       	brmi	.-12     	; 0x3dca <modf+0x22>
    3dd6:	00 20       	and	r0, r0
    3dd8:	69 f0       	breq	.+26     	; 0x3df4 <modf+0x4c>
    3dda:	22 0f       	add	r18, r18
    3ddc:	33 1f       	adc	r19, r19
    3dde:	44 1f       	adc	r20, r20
    3de0:	b3 95       	inc	r27
    3de2:	da f3       	brmi	.-10     	; 0x3dda <modf+0x32>
    3de4:	0d d0       	rcall	.+26     	; 0x3e00 <modf+0x58>
    3de6:	a1 cc       	rjmp	.-1726   	; 0x372a <__subsf3>
    3de8:	61 30       	cpi	r22, 0x01	; 1
    3dea:	71 05       	cpc	r23, r1
    3dec:	a0 e8       	ldi	r26, 0x80	; 128
    3dee:	8a 07       	cpc	r24, r26
    3df0:	b9 46       	sbci	r27, 0x69	; 105
    3df2:	30 f4       	brcc	.+12     	; 0x3e00 <modf+0x58>
    3df4:	9b 01       	movw	r18, r22
    3df6:	ac 01       	movw	r20, r24
    3df8:	66 27       	eor	r22, r22
    3dfa:	77 27       	eor	r23, r23
    3dfc:	88 27       	eor	r24, r24
    3dfe:	90 78       	andi	r25, 0x80	; 128
    3e00:	30 96       	adiw	r30, 0x00	; 0
    3e02:	21 f0       	breq	.+8      	; 0x3e0c <modf+0x64>
    3e04:	20 83       	st	Z, r18
    3e06:	31 83       	std	Z+1, r19	; 0x01
    3e08:	42 83       	std	Z+2, r20	; 0x02
    3e0a:	53 83       	std	Z+3, r21	; 0x03
    3e0c:	08 95       	ret

00003e0e <__fp_mpack>:
    3e0e:	9f 3f       	cpi	r25, 0xFF	; 255
    3e10:	31 f0       	breq	.+12     	; 0x3e1e <__fp_mpack_finite+0xc>

00003e12 <__fp_mpack_finite>:
    3e12:	91 50       	subi	r25, 0x01	; 1
    3e14:	20 f4       	brcc	.+8      	; 0x3e1e <__fp_mpack_finite+0xc>
    3e16:	87 95       	ror	r24
    3e18:	77 95       	ror	r23
    3e1a:	67 95       	ror	r22
    3e1c:	b7 95       	ror	r27
    3e1e:	88 0f       	add	r24, r24
    3e20:	91 1d       	adc	r25, r1
    3e22:	96 95       	lsr	r25
    3e24:	87 95       	ror	r24
    3e26:	97 f9       	bld	r25, 7
    3e28:	08 95       	ret

00003e2a <__ftoa_engine>:
    3e2a:	28 30       	cpi	r18, 0x08	; 8
    3e2c:	08 f0       	brcs	.+2      	; 0x3e30 <__ftoa_engine+0x6>
    3e2e:	27 e0       	ldi	r18, 0x07	; 7
    3e30:	33 27       	eor	r19, r19
    3e32:	da 01       	movw	r26, r20
    3e34:	99 0f       	add	r25, r25
    3e36:	31 1d       	adc	r19, r1
    3e38:	87 fd       	sbrc	r24, 7
    3e3a:	91 60       	ori	r25, 0x01	; 1
    3e3c:	00 96       	adiw	r24, 0x00	; 0
    3e3e:	61 05       	cpc	r22, r1
    3e40:	71 05       	cpc	r23, r1
    3e42:	39 f4       	brne	.+14     	; 0x3e52 <__ftoa_engine+0x28>
    3e44:	32 60       	ori	r19, 0x02	; 2
    3e46:	2e 5f       	subi	r18, 0xFE	; 254
    3e48:	3d 93       	st	X+, r19
    3e4a:	30 e3       	ldi	r19, 0x30	; 48
    3e4c:	2a 95       	dec	r18
    3e4e:	e1 f7       	brne	.-8      	; 0x3e48 <__ftoa_engine+0x1e>
    3e50:	08 95       	ret
    3e52:	9f 3f       	cpi	r25, 0xFF	; 255
    3e54:	30 f0       	brcs	.+12     	; 0x3e62 <__ftoa_engine+0x38>
    3e56:	80 38       	cpi	r24, 0x80	; 128
    3e58:	71 05       	cpc	r23, r1
    3e5a:	61 05       	cpc	r22, r1
    3e5c:	09 f0       	breq	.+2      	; 0x3e60 <__ftoa_engine+0x36>
    3e5e:	3c 5f       	subi	r19, 0xFC	; 252
    3e60:	3c 5f       	subi	r19, 0xFC	; 252
    3e62:	3d 93       	st	X+, r19
    3e64:	91 30       	cpi	r25, 0x01	; 1
    3e66:	08 f0       	brcs	.+2      	; 0x3e6a <__ftoa_engine+0x40>
    3e68:	80 68       	ori	r24, 0x80	; 128
    3e6a:	91 1d       	adc	r25, r1
    3e6c:	df 93       	push	r29
    3e6e:	cf 93       	push	r28
    3e70:	1f 93       	push	r17
    3e72:	0f 93       	push	r16
    3e74:	ff 92       	push	r15
    3e76:	ef 92       	push	r14
    3e78:	19 2f       	mov	r17, r25
    3e7a:	98 7f       	andi	r25, 0xF8	; 248
    3e7c:	96 95       	lsr	r25
    3e7e:	e9 2f       	mov	r30, r25
    3e80:	96 95       	lsr	r25
    3e82:	96 95       	lsr	r25
    3e84:	e9 0f       	add	r30, r25
    3e86:	ff 27       	eor	r31, r31
    3e88:	ee 5d       	subi	r30, 0xDE	; 222
    3e8a:	fd 4f       	sbci	r31, 0xFD	; 253
    3e8c:	99 27       	eor	r25, r25
    3e8e:	33 27       	eor	r19, r19
    3e90:	ee 24       	eor	r14, r14
    3e92:	ff 24       	eor	r15, r15
    3e94:	a7 01       	movw	r20, r14
    3e96:	e7 01       	movw	r28, r14
    3e98:	05 90       	lpm	r0, Z+
    3e9a:	08 94       	sec
    3e9c:	07 94       	ror	r0
    3e9e:	28 f4       	brcc	.+10     	; 0x3eaa <__ftoa_engine+0x80>
    3ea0:	36 0f       	add	r19, r22
    3ea2:	e7 1e       	adc	r14, r23
    3ea4:	f8 1e       	adc	r15, r24
    3ea6:	49 1f       	adc	r20, r25
    3ea8:	51 1d       	adc	r21, r1
    3eaa:	66 0f       	add	r22, r22
    3eac:	77 1f       	adc	r23, r23
    3eae:	88 1f       	adc	r24, r24
    3eb0:	99 1f       	adc	r25, r25
    3eb2:	06 94       	lsr	r0
    3eb4:	a1 f7       	brne	.-24     	; 0x3e9e <__ftoa_engine+0x74>
    3eb6:	05 90       	lpm	r0, Z+
    3eb8:	07 94       	ror	r0
    3eba:	28 f4       	brcc	.+10     	; 0x3ec6 <__ftoa_engine+0x9c>
    3ebc:	e7 0e       	add	r14, r23
    3ebe:	f8 1e       	adc	r15, r24
    3ec0:	49 1f       	adc	r20, r25
    3ec2:	56 1f       	adc	r21, r22
    3ec4:	c1 1d       	adc	r28, r1
    3ec6:	77 0f       	add	r23, r23
    3ec8:	88 1f       	adc	r24, r24
    3eca:	99 1f       	adc	r25, r25
    3ecc:	66 1f       	adc	r22, r22
    3ece:	06 94       	lsr	r0
    3ed0:	a1 f7       	brne	.-24     	; 0x3eba <__ftoa_engine+0x90>
    3ed2:	05 90       	lpm	r0, Z+
    3ed4:	07 94       	ror	r0
    3ed6:	28 f4       	brcc	.+10     	; 0x3ee2 <__ftoa_engine+0xb8>
    3ed8:	f8 0e       	add	r15, r24
    3eda:	49 1f       	adc	r20, r25
    3edc:	56 1f       	adc	r21, r22
    3ede:	c7 1f       	adc	r28, r23
    3ee0:	d1 1d       	adc	r29, r1
    3ee2:	88 0f       	add	r24, r24
    3ee4:	99 1f       	adc	r25, r25
    3ee6:	66 1f       	adc	r22, r22
    3ee8:	77 1f       	adc	r23, r23
    3eea:	06 94       	lsr	r0
    3eec:	a1 f7       	brne	.-24     	; 0x3ed6 <__ftoa_engine+0xac>
    3eee:	05 90       	lpm	r0, Z+
    3ef0:	07 94       	ror	r0
    3ef2:	20 f4       	brcc	.+8      	; 0x3efc <__ftoa_engine+0xd2>
    3ef4:	49 0f       	add	r20, r25
    3ef6:	56 1f       	adc	r21, r22
    3ef8:	c7 1f       	adc	r28, r23
    3efa:	d8 1f       	adc	r29, r24
    3efc:	99 0f       	add	r25, r25
    3efe:	66 1f       	adc	r22, r22
    3f00:	77 1f       	adc	r23, r23
    3f02:	88 1f       	adc	r24, r24
    3f04:	06 94       	lsr	r0
    3f06:	a9 f7       	brne	.-22     	; 0x3ef2 <__ftoa_engine+0xc8>
    3f08:	84 91       	lpm	r24, Z
    3f0a:	10 95       	com	r17
    3f0c:	17 70       	andi	r17, 0x07	; 7
    3f0e:	41 f0       	breq	.+16     	; 0x3f20 <__ftoa_engine+0xf6>
    3f10:	d6 95       	lsr	r29
    3f12:	c7 95       	ror	r28
    3f14:	57 95       	ror	r21
    3f16:	47 95       	ror	r20
    3f18:	f7 94       	ror	r15
    3f1a:	e7 94       	ror	r14
    3f1c:	1a 95       	dec	r17
    3f1e:	c1 f7       	brne	.-16     	; 0x3f10 <__ftoa_engine+0xe6>
    3f20:	e8 ec       	ldi	r30, 0xC8	; 200
    3f22:	f1 e0       	ldi	r31, 0x01	; 1
    3f24:	68 94       	set
    3f26:	15 90       	lpm	r1, Z+
    3f28:	15 91       	lpm	r17, Z+
    3f2a:	35 91       	lpm	r19, Z+
    3f2c:	65 91       	lpm	r22, Z+
    3f2e:	95 91       	lpm	r25, Z+
    3f30:	05 90       	lpm	r0, Z+
    3f32:	7f e2       	ldi	r23, 0x2F	; 47
    3f34:	73 95       	inc	r23
    3f36:	e1 18       	sub	r14, r1
    3f38:	f1 0a       	sbc	r15, r17
    3f3a:	43 0b       	sbc	r20, r19
    3f3c:	56 0b       	sbc	r21, r22
    3f3e:	c9 0b       	sbc	r28, r25
    3f40:	d0 09       	sbc	r29, r0
    3f42:	c0 f7       	brcc	.-16     	; 0x3f34 <__ftoa_engine+0x10a>
    3f44:	e1 0c       	add	r14, r1
    3f46:	f1 1e       	adc	r15, r17
    3f48:	43 1f       	adc	r20, r19
    3f4a:	56 1f       	adc	r21, r22
    3f4c:	c9 1f       	adc	r28, r25
    3f4e:	d0 1d       	adc	r29, r0
    3f50:	7e f4       	brtc	.+30     	; 0x3f70 <__ftoa_engine+0x146>
    3f52:	70 33       	cpi	r23, 0x30	; 48
    3f54:	11 f4       	brne	.+4      	; 0x3f5a <__ftoa_engine+0x130>
    3f56:	8a 95       	dec	r24
    3f58:	e6 cf       	rjmp	.-52     	; 0x3f26 <__ftoa_engine+0xfc>
    3f5a:	e8 94       	clt
    3f5c:	01 50       	subi	r16, 0x01	; 1
    3f5e:	30 f0       	brcs	.+12     	; 0x3f6c <__ftoa_engine+0x142>
    3f60:	08 0f       	add	r16, r24
    3f62:	0a f4       	brpl	.+2      	; 0x3f66 <__ftoa_engine+0x13c>
    3f64:	00 27       	eor	r16, r16
    3f66:	02 17       	cp	r16, r18
    3f68:	08 f4       	brcc	.+2      	; 0x3f6c <__ftoa_engine+0x142>
    3f6a:	20 2f       	mov	r18, r16
    3f6c:	23 95       	inc	r18
    3f6e:	02 2f       	mov	r16, r18
    3f70:	7a 33       	cpi	r23, 0x3A	; 58
    3f72:	28 f0       	brcs	.+10     	; 0x3f7e <__ftoa_engine+0x154>
    3f74:	79 e3       	ldi	r23, 0x39	; 57
    3f76:	7d 93       	st	X+, r23
    3f78:	2a 95       	dec	r18
    3f7a:	e9 f7       	brne	.-6      	; 0x3f76 <__ftoa_engine+0x14c>
    3f7c:	10 c0       	rjmp	.+32     	; 0x3f9e <__ftoa_engine+0x174>
    3f7e:	7d 93       	st	X+, r23
    3f80:	2a 95       	dec	r18
    3f82:	89 f6       	brne	.-94     	; 0x3f26 <__ftoa_engine+0xfc>
    3f84:	06 94       	lsr	r0
    3f86:	97 95       	ror	r25
    3f88:	67 95       	ror	r22
    3f8a:	37 95       	ror	r19
    3f8c:	17 95       	ror	r17
    3f8e:	17 94       	ror	r1
    3f90:	e1 18       	sub	r14, r1
    3f92:	f1 0a       	sbc	r15, r17
    3f94:	43 0b       	sbc	r20, r19
    3f96:	56 0b       	sbc	r21, r22
    3f98:	c9 0b       	sbc	r28, r25
    3f9a:	d0 09       	sbc	r29, r0
    3f9c:	98 f0       	brcs	.+38     	; 0x3fc4 <__ftoa_engine+0x19a>
    3f9e:	23 95       	inc	r18
    3fa0:	7e 91       	ld	r23, -X
    3fa2:	73 95       	inc	r23
    3fa4:	7a 33       	cpi	r23, 0x3A	; 58
    3fa6:	08 f0       	brcs	.+2      	; 0x3faa <__ftoa_engine+0x180>
    3fa8:	70 e3       	ldi	r23, 0x30	; 48
    3faa:	7c 93       	st	X, r23
    3fac:	20 13       	cpse	r18, r16
    3fae:	b8 f7       	brcc	.-18     	; 0x3f9e <__ftoa_engine+0x174>
    3fb0:	7e 91       	ld	r23, -X
    3fb2:	70 61       	ori	r23, 0x10	; 16
    3fb4:	7d 93       	st	X+, r23
    3fb6:	30 f0       	brcs	.+12     	; 0x3fc4 <__ftoa_engine+0x19a>
    3fb8:	83 95       	inc	r24
    3fba:	71 e3       	ldi	r23, 0x31	; 49
    3fbc:	7d 93       	st	X+, r23
    3fbe:	70 e3       	ldi	r23, 0x30	; 48
    3fc0:	2a 95       	dec	r18
    3fc2:	e1 f7       	brne	.-8      	; 0x3fbc <__ftoa_engine+0x192>
    3fc4:	11 24       	eor	r1, r1
    3fc6:	ef 90       	pop	r14
    3fc8:	ff 90       	pop	r15
    3fca:	0f 91       	pop	r16
    3fcc:	1f 91       	pop	r17
    3fce:	cf 91       	pop	r28
    3fd0:	df 91       	pop	r29
    3fd2:	99 27       	eor	r25, r25
    3fd4:	87 fd       	sbrc	r24, 7
    3fd6:	90 95       	com	r25
    3fd8:	08 95       	ret

00003fda <strnlen_P>:
    3fda:	fc 01       	movw	r30, r24
    3fdc:	05 90       	lpm	r0, Z+
    3fde:	61 50       	subi	r22, 0x01	; 1
    3fe0:	70 40       	sbci	r23, 0x00	; 0
    3fe2:	01 10       	cpse	r0, r1
    3fe4:	d8 f7       	brcc	.-10     	; 0x3fdc <strnlen_P+0x2>
    3fe6:	80 95       	com	r24
    3fe8:	90 95       	com	r25
    3fea:	8e 0f       	add	r24, r30
    3fec:	9f 1f       	adc	r25, r31
    3fee:	08 95       	ret

00003ff0 <memset>:
    3ff0:	dc 01       	movw	r26, r24
    3ff2:	01 c0       	rjmp	.+2      	; 0x3ff6 <memset+0x6>
    3ff4:	6d 93       	st	X+, r22
    3ff6:	41 50       	subi	r20, 0x01	; 1
    3ff8:	50 40       	sbci	r21, 0x00	; 0
    3ffa:	e0 f7       	brcc	.-8      	; 0x3ff4 <memset+0x4>
    3ffc:	08 95       	ret

00003ffe <strnlen>:
    3ffe:	fc 01       	movw	r30, r24
    4000:	61 50       	subi	r22, 0x01	; 1
    4002:	70 40       	sbci	r23, 0x00	; 0
    4004:	01 90       	ld	r0, Z+
    4006:	01 10       	cpse	r0, r1
    4008:	d8 f7       	brcc	.-10     	; 0x4000 <strnlen+0x2>
    400a:	80 95       	com	r24
    400c:	90 95       	com	r25
    400e:	8e 0f       	add	r24, r30
    4010:	9f 1f       	adc	r25, r31
    4012:	08 95       	ret

00004014 <fputc>:
    4014:	0f 93       	push	r16
    4016:	1f 93       	push	r17
    4018:	cf 93       	push	r28
    401a:	df 93       	push	r29
    401c:	18 2f       	mov	r17, r24
    401e:	09 2f       	mov	r16, r25
    4020:	eb 01       	movw	r28, r22
    4022:	8b 81       	ldd	r24, Y+3	; 0x03
    4024:	81 fd       	sbrc	r24, 1
    4026:	03 c0       	rjmp	.+6      	; 0x402e <fputc+0x1a>
    4028:	8f ef       	ldi	r24, 0xFF	; 255
    402a:	9f ef       	ldi	r25, 0xFF	; 255
    402c:	20 c0       	rjmp	.+64     	; 0x406e <fputc+0x5a>
    402e:	82 ff       	sbrs	r24, 2
    4030:	10 c0       	rjmp	.+32     	; 0x4052 <fputc+0x3e>
    4032:	4e 81       	ldd	r20, Y+6	; 0x06
    4034:	5f 81       	ldd	r21, Y+7	; 0x07
    4036:	2c 81       	ldd	r18, Y+4	; 0x04
    4038:	3d 81       	ldd	r19, Y+5	; 0x05
    403a:	42 17       	cp	r20, r18
    403c:	53 07       	cpc	r21, r19
    403e:	7c f4       	brge	.+30     	; 0x405e <fputc+0x4a>
    4040:	e8 81       	ld	r30, Y
    4042:	f9 81       	ldd	r31, Y+1	; 0x01
    4044:	9f 01       	movw	r18, r30
    4046:	2f 5f       	subi	r18, 0xFF	; 255
    4048:	3f 4f       	sbci	r19, 0xFF	; 255
    404a:	39 83       	std	Y+1, r19	; 0x01
    404c:	28 83       	st	Y, r18
    404e:	10 83       	st	Z, r17
    4050:	06 c0       	rjmp	.+12     	; 0x405e <fputc+0x4a>
    4052:	e8 85       	ldd	r30, Y+8	; 0x08
    4054:	f9 85       	ldd	r31, Y+9	; 0x09
    4056:	81 2f       	mov	r24, r17
    4058:	19 95       	eicall
    405a:	89 2b       	or	r24, r25
    405c:	29 f7       	brne	.-54     	; 0x4028 <fputc+0x14>
    405e:	2e 81       	ldd	r18, Y+6	; 0x06
    4060:	3f 81       	ldd	r19, Y+7	; 0x07
    4062:	2f 5f       	subi	r18, 0xFF	; 255
    4064:	3f 4f       	sbci	r19, 0xFF	; 255
    4066:	3f 83       	std	Y+7, r19	; 0x07
    4068:	2e 83       	std	Y+6, r18	; 0x06
    406a:	81 2f       	mov	r24, r17
    406c:	90 2f       	mov	r25, r16
    406e:	df 91       	pop	r29
    4070:	cf 91       	pop	r28
    4072:	1f 91       	pop	r17
    4074:	0f 91       	pop	r16
    4076:	08 95       	ret

00004078 <sprintf>:
    4078:	0f 93       	push	r16
    407a:	1f 93       	push	r17
    407c:	cf 93       	push	r28
    407e:	df 93       	push	r29
    4080:	cd b7       	in	r28, 0x3d	; 61
    4082:	de b7       	in	r29, 0x3e	; 62
    4084:	2e 97       	sbiw	r28, 0x0e	; 14
    4086:	0f b6       	in	r0, 0x3f	; 63
    4088:	f8 94       	cli
    408a:	de bf       	out	0x3e, r29	; 62
    408c:	0f be       	out	0x3f, r0	; 63
    408e:	cd bf       	out	0x3d, r28	; 61
    4090:	0e 89       	ldd	r16, Y+22	; 0x16
    4092:	1f 89       	ldd	r17, Y+23	; 0x17
    4094:	86 e0       	ldi	r24, 0x06	; 6
    4096:	8c 83       	std	Y+4, r24	; 0x04
    4098:	1a 83       	std	Y+2, r17	; 0x02
    409a:	09 83       	std	Y+1, r16	; 0x01
    409c:	8f ef       	ldi	r24, 0xFF	; 255
    409e:	9f e7       	ldi	r25, 0x7F	; 127
    40a0:	9e 83       	std	Y+6, r25	; 0x06
    40a2:	8d 83       	std	Y+5, r24	; 0x05
    40a4:	ae 01       	movw	r20, r28
    40a6:	46 5e       	subi	r20, 0xE6	; 230
    40a8:	5f 4f       	sbci	r21, 0xFF	; 255
    40aa:	68 8d       	ldd	r22, Y+24	; 0x18
    40ac:	79 8d       	ldd	r23, Y+25	; 0x19
    40ae:	ce 01       	movw	r24, r28
    40b0:	01 96       	adiw	r24, 0x01	; 1
    40b2:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <vfprintf>
    40b6:	ef 81       	ldd	r30, Y+7	; 0x07
    40b8:	f8 85       	ldd	r31, Y+8	; 0x08
    40ba:	e0 0f       	add	r30, r16
    40bc:	f1 1f       	adc	r31, r17
    40be:	10 82       	st	Z, r1
    40c0:	2e 96       	adiw	r28, 0x0e	; 14
    40c2:	0f b6       	in	r0, 0x3f	; 63
    40c4:	f8 94       	cli
    40c6:	de bf       	out	0x3e, r29	; 62
    40c8:	0f be       	out	0x3f, r0	; 63
    40ca:	cd bf       	out	0x3d, r28	; 61
    40cc:	df 91       	pop	r29
    40ce:	cf 91       	pop	r28
    40d0:	1f 91       	pop	r17
    40d2:	0f 91       	pop	r16
    40d4:	08 95       	ret

000040d6 <__ultoa_invert>:
    40d6:	fa 01       	movw	r30, r20
    40d8:	aa 27       	eor	r26, r26
    40da:	28 30       	cpi	r18, 0x08	; 8
    40dc:	51 f1       	breq	.+84     	; 0x4132 <__ultoa_invert+0x5c>
    40de:	20 31       	cpi	r18, 0x10	; 16
    40e0:	81 f1       	breq	.+96     	; 0x4142 <__ultoa_invert+0x6c>
    40e2:	e8 94       	clt
    40e4:	6f 93       	push	r22
    40e6:	6e 7f       	andi	r22, 0xFE	; 254
    40e8:	6e 5f       	subi	r22, 0xFE	; 254
    40ea:	7f 4f       	sbci	r23, 0xFF	; 255
    40ec:	8f 4f       	sbci	r24, 0xFF	; 255
    40ee:	9f 4f       	sbci	r25, 0xFF	; 255
    40f0:	af 4f       	sbci	r26, 0xFF	; 255
    40f2:	b1 e0       	ldi	r27, 0x01	; 1
    40f4:	3e d0       	rcall	.+124    	; 0x4172 <__ultoa_invert+0x9c>
    40f6:	b4 e0       	ldi	r27, 0x04	; 4
    40f8:	3c d0       	rcall	.+120    	; 0x4172 <__ultoa_invert+0x9c>
    40fa:	67 0f       	add	r22, r23
    40fc:	78 1f       	adc	r23, r24
    40fe:	89 1f       	adc	r24, r25
    4100:	9a 1f       	adc	r25, r26
    4102:	a1 1d       	adc	r26, r1
    4104:	68 0f       	add	r22, r24
    4106:	79 1f       	adc	r23, r25
    4108:	8a 1f       	adc	r24, r26
    410a:	91 1d       	adc	r25, r1
    410c:	a1 1d       	adc	r26, r1
    410e:	6a 0f       	add	r22, r26
    4110:	71 1d       	adc	r23, r1
    4112:	81 1d       	adc	r24, r1
    4114:	91 1d       	adc	r25, r1
    4116:	a1 1d       	adc	r26, r1
    4118:	20 d0       	rcall	.+64     	; 0x415a <__ultoa_invert+0x84>
    411a:	09 f4       	brne	.+2      	; 0x411e <__ultoa_invert+0x48>
    411c:	68 94       	set
    411e:	3f 91       	pop	r19
    4120:	2a e0       	ldi	r18, 0x0A	; 10
    4122:	26 9f       	mul	r18, r22
    4124:	11 24       	eor	r1, r1
    4126:	30 19       	sub	r19, r0
    4128:	30 5d       	subi	r19, 0xD0	; 208
    412a:	31 93       	st	Z+, r19
    412c:	de f6       	brtc	.-74     	; 0x40e4 <__ultoa_invert+0xe>
    412e:	cf 01       	movw	r24, r30
    4130:	08 95       	ret
    4132:	46 2f       	mov	r20, r22
    4134:	47 70       	andi	r20, 0x07	; 7
    4136:	40 5d       	subi	r20, 0xD0	; 208
    4138:	41 93       	st	Z+, r20
    413a:	b3 e0       	ldi	r27, 0x03	; 3
    413c:	0f d0       	rcall	.+30     	; 0x415c <__ultoa_invert+0x86>
    413e:	c9 f7       	brne	.-14     	; 0x4132 <__ultoa_invert+0x5c>
    4140:	f6 cf       	rjmp	.-20     	; 0x412e <__ultoa_invert+0x58>
    4142:	46 2f       	mov	r20, r22
    4144:	4f 70       	andi	r20, 0x0F	; 15
    4146:	40 5d       	subi	r20, 0xD0	; 208
    4148:	4a 33       	cpi	r20, 0x3A	; 58
    414a:	18 f0       	brcs	.+6      	; 0x4152 <__ultoa_invert+0x7c>
    414c:	49 5d       	subi	r20, 0xD9	; 217
    414e:	31 fd       	sbrc	r19, 1
    4150:	40 52       	subi	r20, 0x20	; 32
    4152:	41 93       	st	Z+, r20
    4154:	02 d0       	rcall	.+4      	; 0x415a <__ultoa_invert+0x84>
    4156:	a9 f7       	brne	.-22     	; 0x4142 <__ultoa_invert+0x6c>
    4158:	ea cf       	rjmp	.-44     	; 0x412e <__ultoa_invert+0x58>
    415a:	b4 e0       	ldi	r27, 0x04	; 4
    415c:	a6 95       	lsr	r26
    415e:	97 95       	ror	r25
    4160:	87 95       	ror	r24
    4162:	77 95       	ror	r23
    4164:	67 95       	ror	r22
    4166:	ba 95       	dec	r27
    4168:	c9 f7       	brne	.-14     	; 0x415c <__ultoa_invert+0x86>
    416a:	00 97       	sbiw	r24, 0x00	; 0
    416c:	61 05       	cpc	r22, r1
    416e:	71 05       	cpc	r23, r1
    4170:	08 95       	ret
    4172:	9b 01       	movw	r18, r22
    4174:	ac 01       	movw	r20, r24
    4176:	0a 2e       	mov	r0, r26
    4178:	06 94       	lsr	r0
    417a:	57 95       	ror	r21
    417c:	47 95       	ror	r20
    417e:	37 95       	ror	r19
    4180:	27 95       	ror	r18
    4182:	ba 95       	dec	r27
    4184:	c9 f7       	brne	.-14     	; 0x4178 <__ultoa_invert+0xa2>
    4186:	62 0f       	add	r22, r18
    4188:	73 1f       	adc	r23, r19
    418a:	84 1f       	adc	r24, r20
    418c:	95 1f       	adc	r25, r21
    418e:	a0 1d       	adc	r26, r0
    4190:	08 95       	ret

00004192 <_exit>:
    4192:	f8 94       	cli

00004194 <__stop_program>:
    4194:	ff cf       	rjmp	.-2      	; 0x4194 <__stop_program>
